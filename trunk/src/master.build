<?xml version="1.0" encoding="utf-8" ?> 
<!-- comment -->
<project default="build" xmlns="http://nant.sf.net/release/0.85-rc1/nant.xsd">
    <property name="verbose" value="false"/>
    <property name="debug" value="false"/>
    <property name="src.dir" value="."/>

    <property name="build.dir" value="build-Debug" if="${debug}"/>
    <property name="build.dir" value="build-Release" unless="${debug}"/>
    <property name="deploy.dir" value="${build.dir}"/>
    <property name="lib.dir" value="lib"/>
    <property name="nant.default.framework" value="net-1.0"/>
    <property name="installsource.dir" value="installsource"/>
    <property name="deploy.dir" value="Deploy"/>
    <property name="alt.admin.dir" value="true"/>
    <property name="wix-binary.dir" value="${path::get-full-path('../tools/WiX')}"/>

    <ifnot test="${property::exists('svndir')}">
        <sysinfo />
        <ifnot test="${property::exists('sys.env.SVNSRC')}">
            <fail message="Either provide the svndir property, or set the SVNSRC env var to point to the Subversion source tree" />
        </ifnot>
        <property name="svndir" value="${sys.env.SVNSRC}" />
    </ifnot>

    <!--<property name="nant.default.framework" value="net-1.0" unless="${vs.2003}"/>
    <property name="nant.default.framework" value="net-1.1" unless="${vs.2003}"/>-->


    <!-- Creates the NSvn.msm merge module -->
    <target name="build-NSvn.msm" depends="build">
        <delete dir="${installsource.dir}" verbose="${verbose}" failonerror="false" />
        <mkdir dir="${installsource.dir}" />
        
        <!-- Build project specific parts -->
        <nant buildfile="Nsvn.Common/NSvn.Common.build" target="build-WiX" inheritall="true" />
        <nant buildfile="Nsvn.Core/NSvn.Core.build" target="build-WiX" inheritall="true" />
        
        <!-- Build NSvn Merge Module -->
        <nant buildfile="WiX\NSvn.msm.build" target="build-WiX" inheritall="true" />
    </target>
    
    <target name="build-apr-iconv.wxs">
        <exec workingdir="." program="${wix-binary.dir}\candle.exe"
            commandline="-nologo -w0 -dsvndir=${svndir} WiX\apr-iconv.wxs -out ${installsource.dir}\apr-iconv.wixobj" />
    </target>
    
    <target name="wix-MSI">
        <property name="installsource.fullpath" value="${path::get-full-path(installsource.dir)}" />
        <property name="src.fullpath" value="${path::get-full-path(src.dir)}" />
        <property name="setupfiles.fullpath" value="${path::combine(path::combine(src.fullpath,'WiX'),'SetupFiles')}" />
        <property name="builddir.fullpath" value="${path::get-full-path(build.dir)}" />
        
        <exec workingdir="${installsource.dir}" program="${wix-binary.dir}\candle.exe"
            commandline="-nologo -w0 -dankhversion=${ankh.version} -dsetupfiles=${setupfiles.fullpath} -dinstalldir=${installsource.fullpath} -dbuilddir=${builddir.fullpath} ..\WiX\Ankh.msi.wxs -out Ankh.msi.wixobj" />
        <echo message="building UI" />
        <exec workingdir="${installsource.dir}" program="${wix-binary.dir}\candle.exe"
            commandline="-nologo -w0 -dsetupfiles=${setupfiles.fullpath} ..\WiX\Ankh-UI.wxs -out Ankh-UI.wixobj" />
            
        <!-- Build the Ankh msi -->
        <exec workingdir="${installsource.dir}" program="${wix-binary.dir}\light.exe"
            commandline="-nologo -w0 Ankh-UI.wixobj Ankh.msi.wixobj apr-iconv.wixobj Ankh.wixobj Ankh.UI.wixobj ReposInstaller.wixobj Utils.wixobj lib.wixobj -out Ankh.msi" />
    </target>
    
    <target name="wix" description="Builds installer file(s)" depends="build-NSvn.msm, build-InstallLib, build-apr-iconv.wxs, version, AboutBoxDetails">
        <nant buildfile="Ankh.UI\Ankh.UI.build" target="build-WiX" inheritall="true"/>
        <nant buildfile="Ankh\Ankh.build" target="build-WiX" inheritall="true" />
        <nant buildfile="lib\lib.build" target="build-WiX" inheritall="true" />
        <nant buildfile="ReposInstaller\ReposInstaller.build" target="build-WiX" inheritall="true" />
        <nant buildfile="Utils\Utils.build" target="build-WiX" inheritall="true" />
        
        <call target="wix-MSI" />
    </target>
    
    <target name="clean" description="Cleans all output directories">
        <nant buildfile="NSvn.Common/NSvn.Common.build" target="clean" inheritall="true" />
        <nant buildfile="NSvn.Core/NSvn.Core.build" target="clean" inheritall="true" />
        <nant buildfile="NSvn.Core.Tests/NSvn.Core.Tests.build" target="clean" inheritall="true" />
        <nant buildfile="NSvn.Core.Tests.MCpp/NSvn.Core.Tests.MCpp.build" target="clean" inheritall="true" />
        <nant buildfile="ReposInstaller/ReposInstaller.build" target="clean" inheritall="true" />
        <nant buildfile="Ankh.UI/Ankh.UI.build" target="clean" inheritall="true" />
        <nant buildfile="Ankh/Ankh.build" target="clean" inheritall="true" />
        <nant buildfile="Ankh.Tests/Ankh.Tests.build" target="clean" inheritall="true" />
        <nant buildfile="Utils/Utils.build" target="clean" inheritall="true" />
        <nant buildfile="Utils.Tests/Utils.Tests.build" target="clean" inheritall="true" />
        
        <delete dir="${installsource.dir}" failonerror="false"/>
        
        <regasm assembly="${build.dir}\Ankh.dll" verbose="${verbose}" codebase="true" unregister="true" failonerror="false"/>
    
        <delete dir="build-Release" verbose="${verbose}" failonerror="false" />
        <delete dir="build-Debug" verbose="${verbose}" failonerror="false" />
    </target>
    
    
     <target name="build-Utils">
        <nant buildfile="Utils/Utils.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="Utils/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-Utils.Tests">
        <nant buildfile="Utils.Tests/Utils.Tests.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}">
            <fileset basedir="Utils.Tests/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
        </copy>
    </target>
    
    <target name="build-Ankh" depends="build-Ankh.UI, build-NSvn.Core, build-NSvn.Common, build-Utils">
        <nant buildfile="Ankh/Ankh.build" inheritall="true" target="build" />
        <copy todir="${build.dir}"> 
            <fileset basedir="Ankh/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
        </copy>

        <!-- unfortunately necessary to get regasm to work -->
        <copy todir="${build.dir}">
            <fileset basedir="${lib.dir}">
                <include name="envdte.dll"/>
                <include name="extensibility.dll"/>
            </fileset>
        </copy>        
        
        <copy todir="${build.dir}" flatten="true">
            <fileset basedir="${svndir}">
                <include name="apr\Debug\libapr.dll" if="${debug}" />
                <include name="apr\Release\libapr.dll" unless="${debug}" />
                <include name="apr-util\Debug\libaprutil.dll" if="${debug}" />
                <include name="apr-util\Release\libaprutil.dll" unless="${debug}" />
                <include name="apr-iconv\Debug\libapriconv.dll" if="${debug}" />
                <include name="apr-iconv\Release\libapriconv.dll" unless="${debug}" />
                <include name="db4-win32\bin\libdb42d.dll" if="${debug}" />
                <include name="db4-win32\bin\libdb42.dll" unless="${debug}" />
            </fileset>
        </copy>
         
        <regasm assembly="${build.dir}\Ankh.dll" typelib="${build.dir}\Ankh.tlb" failonerror="false"  codebase="true" exporttypelib="true" verbose="${verbose}"/>

        <!-- and now to get rid of them again -->
        <delete>
            <fileset basedir="${build.dir}">
                <include name="envdte.dll"/>
                <include name="extensibility.dll"/>
            </fileset>
        </delete>
    </target>
    
    <target name="build-Ankh.UI" depends="build-NSvn.Core, build-Utils">
        <nant buildfile="Ankh.UI/Ankh.UI.build" inheritall="true" target="build" />
        <copy todir="${build.dir}"> 
            <fileset basedir="Ankh.UI/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-NSvn.Common" depends="build-Utils">
        <nant buildfile="NSvn.Common/NSvn.Common.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="NSvn.Common/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-NSvn.Core" depends="build-NSvn.Common, build-Utils">
        <nant buildfile="NSvn.Core/NSvn.Core.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="NSvn.Core/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>

    <target name="build-Ankh.Tests" depends="build-Ankh, build-NSvn.Core.Tests, build-NSvn.Common, build-NSvn.Core">
        <nant buildfile="Ankh.Tests/Ankh.Tests.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="Ankh.Tests/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-NSvn.Core.Tests" depends="build-NSvn.Common, build-NSvn.Core">
        <nant buildfile="NSvn.Core.Tests/NSvn.Core.Tests.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="NSvn.Core.Tests/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-NSvn.Core.Tests.MCpp" depends="build-NSvn.Common, build-NSvn.Core, build-Utils">
        <nant buildfile="NSvn.Core.Tests.MCpp/NSvn.Core.Tests.MCpp.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="NSvn.Core.Tests.MCpp/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-ReposInstaller" depends="build-Ankh.UI, build-NSvn.Common, build-NSvn.Core, build-Utils">
        <nant buildfile="ReposInstaller/ReposInstaller.build" inheritall="true" target="build"/>
        <copy todir="${build.dir}"> 
            <fileset basedir="ReposInstaller/${build.dir}">
                <include name="*.dll"/>
                <include name="*.pdb"/>
            </fileset>
         </copy>
    </target>
    
    <target name="build-InstallLib">
        <call target="AboutBoxDetails"/>
        <nant buildfile="InstallLib/InstallLib.build" inheritall="true" target="build"/>

        <copy todir="${build.dir}"> 
            <fileset basedir="InstallLib/${build.dir}">
                <include name="*.dll"/>
            </fileset>
         </copy>        
    </target>
    
    <target name="rebuild" description="Clean all output directories before rebuilding">
        <call target="clean"/>
        <call target="build"/>
    </target>
    
    <target name="build" depends="build-Ankh, build-Ankh.UI, build-Utils,build-NSvn.Common, build-NSvn.Core, build-ReposInstaller"
        description="Build all necessary assemblies">
        
    </target>
    
    <target name="build-tests" depends="build, build-Ankh.Tests, build-NSvn.Core.Tests, build-NSvn.Core.Tests.MCpp, build-Utils.Tests"
        description="Build all test assemblies"/>
    
    
    <target name="test" depends="build-tests" description="Run all tests">
        <copy todir="${build.dir}">
            <fileset basedir="${lib.dir}">
                <include name="*.dll"/>
            </fileset>
        </copy>
        <nunit2 failonerror="true" haltonfailure="false">
            <formatter type="Plain" />
            <formatter type="Xml" usefile="true" outputdir="${build.dir}" extension=".xml" />
            <test haltonfailure="false" assemblyname="${build.dir}/NSvn.Core.Tests.dll"/>
            <test haltonfailure="false" assemblyname="${build.dir}/NSvn.Core.Tests.MCpp.dll"/>

            <!-- Ankh.Tests is disabled until we find a way to close VS after each test. -->
            <!--<test haltonfailure="false" assemblyname="${build.dir}/Ankh.Tests.dll"/>-->
            <test haltonfailure="false" assemblyname="${build.dir}/Utils.Tests.dll"/>
        </nunit2>

        <!-- Use this XmlPeek hack to make sure all tests run even if there are errors in the first test -->
        <!-- We still make the build fail if there are failed tests. -->
        <property name="failedTestCount" value="0" />
        <foreach item="File" property="testResult">
            <in>
                <items basedir="${build.dir}">
                    <include name="*dll-results.xml" />
                </items>
            </in>
            <do>
                <xmlpeek file="${testResult}" property="failed" xpath="/test-results/@failures" />
                <echo message="" />
                <echo message="Found ${failed} failed tests in ${testResult}" level="Warning" />
                <echo message="" />
                <property name="failedTestCount" value="${int::parse(failedTestCount) + int::parse(failed)}" />
            </do>
        </foreach>
        <fail message="In total ${failedTestCount} tests failed!" if="${int::parse(failedTestCount) > 0}"/>
    </target>
    
    <target name="deploy" depends = "rebuild, test" description="Run all tests, then create the MSI installer if the tests pass">
        <call target="wix"/>
    </target>
    
    <target name="deploy-daily" depends="deploy" description="Run all tests, create MSI and then deploy it to a given directory">
        <tstamp property="msi.tstamp" pattern="dd.MM.yyyy.HH.mm" verbose="${verbose}"/>
        <copy tofile="${deploy.dir}\AnkhSVN${vsnet.ver}.${msi.tstamp}.msi" file="${installsource.dir}\AnkhSVN${vsnet.ver}.msi"/>
    </target>
    
    <target name="version" depends="build" description="Determine the current version of Ankh by getting the versionnumber of ankh.dll">    
        <script language="C#">
            <imports>
               <import name="System.Reflection" />
            </imports>
            
            <code><![CDATA[
            public static void ScriptMain( Project project )
            {
               string buildDir = Path.GetFullPath(project.Properties[ "build.dir" ]);
               string ankhPath = Path.Combine(buildDir, "Ankh.dll");

               //retrieve the Ankh.dll version, for use in installer
               string ankhversion = Assembly.LoadFile(ankhPath).GetName().Version.ToString();
               
               project.Log(Level.Info, "Detected Ankh.dll version: {0}", ankhversion);
               project.Properties.Add("ankh.version", ankhversion);
            }]]></code>   
        </script>
    
    </target>
    <target name="AboutBoxDetails">
        <script language="C#">
            <references>
                <include name="${build.dir}\Ankh.dll"/>
                <include name="${build.dir}\NSvn.Core.dll"/>
                <include name="${build.dir}\Utils.dll"/>
                <include name="${lib.dir}\Extensibility.dll"/>
                <include name="${lib.dir}\envdte.dll"/>
            </references>
            <imports>
                <!--import name="Ankh"/-->
                <import name="System.Reflection"/>
            </imports>
            <code><![CDATA[
            public static void ScriptMain( Project project )
            {
                string text = string.Empty;
                string ankhVersion = string.Empty;
                Assembly ankh = typeof( Ankh.Connect ).Assembly;

                // if there are any VersionAttributes on the assembly, we'll use them
                object[] attrs = ankh.GetCustomAttributes( typeof(Utils.VersionAttribute), false );
               
                if ( attrs.Length > 0 )
                {
                    // we'll use the last one
                    Utils.VersionAttribute version = (Utils.VersionAttribute)attrs[attrs.Length-1];
                    if ( version.CustomText != null )
                        ankhVersion = version.CustomText;
                    else            
                        // we don't want the name part
                        ankhVersion = String.Format( "{0}.{1}.{2}{3}", 
                            version.Major, version.Minor, version.PatchLevel, version.Tag );
                }
                else
                {
                    // nope, just resort to the regular assembly version
                    ankhVersion = 
                        ankh.GetName().Version.ToString();
                }
                text += String.Format( "AnkhSVN {0}{1}", 
                    ankhVersion, Environment.NewLine );

                // get the library versions
                object[] attributes = typeof(Ankh.Connect).Assembly.GetCustomAttributes(
                    typeof(Utils.VersionAttribute), false );
                foreach( Utils.VersionAttribute version in attributes )
                {
                    text += version.ToString() + Environment.NewLine;           
                }
                
                project.Log(Level.Info, "Detected AboutBoxText: {0}", text);
                
                string headerText = "#ifndef CustomDetails_\r\n";
                headerText += "#define CustomDetails_\r\n";
                headerText += "const TCHAR* ABOUTBOXDETAILS = _T(\"";
                headerText += text.Replace("\r\n", "\\r\\n");
                headerText += "\");\r\n";
                headerText += "#endif";
                project.Properties.Add( "AboutBoxDetails", headerText );
            }
            ]]></code>
        </script>
    </target>
</project>
