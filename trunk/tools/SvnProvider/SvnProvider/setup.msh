$script:vsbuild = "v2.0.40607"
$script:csc = ""
$script:buildtarget = "SvnProvider.dll"
$script:buildsources = "SvnProvider.cs"
$script:references = "NSvn.Core.dll,NSvn.Common.dll"
$script:providername = "svn"


# next couple of functions are stolen from MSH samples
#
# Find path to msh installation
#
function GetMshPath
{
    #mshhome ideally can be set in the parent scope
    while ( ( "${global:mshhome}" -eq "" ) -or
        ( !( test-path ( combine-path "${global:mshhome}" "System.Management.Automation.dll" ) ) ) )
    {
        write-host ""
        write-host "Type the fully-qualified path to which you installed the Microsoft command shell:"
        $global:mshhome = read-host
    }
}


#
# Check for C# compiler
#
function CheckForCsc
{
    $script:csc = combine-path "$env:windir" "\Microsoft.NET\Framework\$vsbuild\csc.exe"
    while ( !(test-path "$csc") )
    {
        write-host ""
        write-host "The Microsoft .NET C# compiler (csc.exe) is required. $vsbuild "
        write-host "Type the fully-qualified path to which you installed csc.exe."
        $script:csc = read-host
        
        if ( !( $csc.ToLowerInvariant().EndsWith( "csc.exe" ) ) )
        {
            $script:csc = combine-path "$csc" "csc.exe"
        }
    }
}



#
# export the cmdlet discovery file
#
function ExportCmdlet
{
    write-host ""
    write-host "exporting .cmdlet file"
    
    $exporter = combine-path "${global:mshhome}" "Export-Command.exe"
    &$exporter $buildtarget
    
    return $?
}

# gets the reference files, NSvn.*.dll
function GetReferences
{
	"Enter the directory in which NSvn.Common.dll and NSvn.Core.dll reside"
	
	$found = 0
	$dir = ""
	while( $found -lt $references.Split(",").Length )
	{	
		$dir = read-host "Directory name: "
		$found = 0

		# now check if the references are here
		foreach( $file in $references.Split(",") ){
			$src = (combine-path $dir $file)
			if ( ! (test-path $src) )
			{
				"$file not found in $dir"
				break;
			}
			else
			{
				# copy it
				copy-item $src '.\' -vb
				$found += 1
			}
		}
	}
	
	
}


# displays usage stuff
function Usage
{
	"Usage: setup.msh COMMAND"
    "with command being one of the following:"
	""
	"	install		Builds and installs the provider"
	"	build		Merely builds the provider, does no installation"
	"	createzip	Creates a zip file containing all the necessary files"
	"	help		Show this message"
	""
}

function Build
{
	GetMshPath
	if ( ! $? ) { return $? }

	CheckForCsc
	if ( ! $? ) { return $? }
	
	write-host ""
    write-host ""       

    $local:CoreDllPath = combine-path "${global:mshhome}" "System.Management.Automation.dll"
    
    # Build the assembly
    &$csc /debug /target:library /out:$buildtarget $buildsources /reference:"$CoreDllPath" /reference:$references
    
    if ( $?	)	
	{
		ExportCmdLet
	}

	return $?
	
}

function Install
{
	GetMshPath
	Build
	if ( ! $? ) { return $? }

	$o = "This will install the provider. Either provide a directory in your PATH or " 
	$o += "press ENTER to accept the default of the MSH directory"

	$o

	$installdir = read-host "Installation directory: "

	if ( !$installdir ) 
	{
		$installdir = $global:mshhome
	}

	# copy the stuff we need
	copy-item $buildtarget $installdir -vb
	copy-item "$providername.cmdletprovider" $installdir -vb
	copy-item $references.Split(",") $installdir -vb
	copy-item *.xml $installdir -vb	

	""
	""
	$o = "All installed.`n`n"
	$o += "Now fire up a new instance of MSH and access the provider "
	$o += "by doing `n`n`tset-location svn::http://ankhsvn.com/svn/finalproject/`n`n"
	$o += "You can navigate around in a Subversion repository and cat files.`n" 
	$o += "You can also create new drives like this:`n`n"
	$o += "`tnew-drive ankh svn http://ankhsvn.com/svn/finalproject`n`n"
	$o += "The new drive can be accessed by typing`n`n`tcd ankh:`n`n"

	$o

}

function Uninstall
{
	$o = "Enter the directory in which you installed the provider or press "
	$o += "ENTER to accept the default of the MSH directory"
	$o

	$installdir = read-host "Installation directory: "

	if ( !$installdir ) 
	{
		$installdir = $global:mshhome
	}

	remove-item ( combine-path $installdir $buildtarget ) -vb
	remove-item ( combine-path $installdir "$providername.cmdletprovider" ) -vb
	foreach( $r in $references.Split( "," ) ) {
		remove-item ( combine-path $installdir $r ) -vb
	}
	
	$filename = [System.IO.Path].GetFileNameWithoutExtension( $buildtarget )

	remove-item ( combine-path $installdir "$filename.*.xml" ) -vb
	
}

function CreateZip
{
	GetReferences

	$dir = "SvnProvider"
	new-directory $dir

	copy-item $references.split(",") $dir -vb
	copy-item $buildsources.split(",") $dir -vb
	copy-item "setup.msh" $dir -vb
	copy-item "*.xml" $dir -vb

	remove-item "SvnProvider.zip"

	zip -r "SvnProvider.zip" $dir 

	remove-item -re -fo $dir
}



# figure out what to do
$command = "help"

if ( $args ){	$command = $args[0] }

switch( $command )
{
	{ $_ -ieq "install" }	{ Install }
	{ $_ -ieq "help" }		{ Usage }
	{ $_ -ieq "build" }		{ Build }
	{ $_ -ieq "createzip" } { CreateZip }
	{ $_ -ieq "uninstall" } { Uninstall }
	default 
	{
		Usage
	}
}
