<?xml version="1.0" encoding="utf-8" ?> 
<?xml-stylesheet type="text/xsl" href="../doc.xsl"?>
<doc title="Properties">
    <section>
        <p>
            Subversion has no particular policy regarding properties. You can use them for any purpose. 
            Subversion asks only that you not use property names that begin with the prefix svn:. That's the 
            namespace that it sets aside for its own use. In fact, Subversion defines certain properties that 
            have magical effects on the files and directories to which they are attached. In this section, we'll 
            untangle the mystery, and describe how these special properties make your life just a little easier.
            <b>svn:executable</b>
            <br/>
            The svn:executable property is used to control a versioned file's filesystem-level execute 
            permission bit in a semi-automated way. This property has no defined values—its mere presence 
            indicates a desire that the execute permission bit to be kept enabled by Subversion. Removing this 
            property will restore full control of the execute bit back to the operating system.
            <br/><br/>
            On many operating systems, the ability to execute a file as a command is governed by the 
            presence of an execute permission bit. This bit usually defaults to being disabled, and must 
            be explicitly enabled by the user for each file that needs it. In a working copy, new files 
            are being created all the time as new versions of existing files are received during an update. 
            This means that you might enable the execute bit on a file, then update your working copy, 
            and if that file was changed as part of the update, its execute bit might get disabled. So, 
            Subversion provides the <i>svn:executable</i> property as a way to keep the execute bit enabled.
            <br/><br/>
            This property has no effect on filesystems that have no concept of an executable permission 
            bit, such as FAT32 and NTFS.   Also, while it has no defined values, some people choose as 
            a convention a value (such as on) to use when setting this property. Subversion doesn't 
            care—it won't even read the property value. But be careful when choosing such 
            conventions—inexperienced users might mistakenly believe that the way to disable this 
            functionality is to change the property value to its idiomatic opposite (in this case, off). 
            Finally, this property is valid only on files, not on directories.
            <br/><br/>
            <b>svn:mime-type</b>
            <br/>
            The svn:mime-type property serves many purposes in Subversion. Besides being a 
            general-purpose storage location for a file's Multipurpose Internet Mail Extensions 
            (MIME) classification, the value of this property determines several behavioral 
            characteristics of Subversion itself.
            <br/><br/>
            For example, if a file's svn:mime-type property is set to a non-text MIME type 
            (generally, something that doesn't begin with text/, though there are exceptions), 
            Subversion will assume that the file contains binary—that is, not human-readable—data. 
            One of the benefits that Subversion typically provides is contextual, line-based merging 
            of changes received from the server during an update into your working file.
            But for files believed to contain binary data, there is no concept of a “line”.
            So, for those files, Subversion does not attempt to perform contextual merges 
            during updates. Instead, any time you have locally modified a binary working 
            copy file that is also being updated, your file is renamed with a .orig extension, 
            and then Subversion stores a new working copy file that contains the changes 
            received during the update, but not your own local modifications, at the original 
            filename. This behavior is really for the protection of the user against failed 
            attempts at performing contextual merges on files that simply cannot be contextually merged.
            <br/><br/>
            Subversion assists users by running a binary-detection algorithm in the svn import 
            and svn add subcommands. These subcommands use a heuristic to guess at a file's “binary-ness”, 
            and then set the svn:mime-type property to application/octet-stream (the generic “this is a 
            collection of bytes” MIME type) on any files that are deemed binary. If Subversion guesses 
            wrong, or if you wish to set the svn:mime-type property to something more accurate—perhaps 
            image/png or application/x-shockwave-flash—you can always remove or hand-edit the property.
            <br/><br/>
            Finally, if the svn:mime-type property is set, then the Subversion Apache module will use 
            its value to populate the Content-type: HTTP header when responding to GET request. 
            This gives a crucial clue to about how to display a file when perusing your repository with a web browser.
            <br/><br/>
            <b>svn:ignore</b>
            <br/>
            The svn:ignore property contains a list of file patterns which certain Subversion 
            operations will ignore. Perhaps the most commonly used special property, it works in 
            conjunction with the global-ignores run-time configuration option 
            to filter unversioned files and directories out of commands like svn status.
            <br/><br/>
            The rationale behind the svn:ignore property is easily explained. Subversion does not 
            assume that every file or subdirectory in a working copy directory is intended for version 
            control. Resources must be explicitly placed under Subversion's management using the svn add 
            command. As a result, there are often many resources in a working copy that are not versioned.
            <br/><br/>
            Now, the svn status command displays as part of its output every unversioned file or 
            subdirectory in a working copy that is not already filtered out by the global-ignores 
            option (or its built-in default value). This is done so that users can see if perhaps 
            they've forgotten to add a resource to version control.
            <br/><br/>
            But Subversion cannot possibly guess the names of every resource that should be ignored. 
            Also, quite often there are things that should be ignored in every working copy of a 
            particular repository. To force every user of that repository to add patterns for those 
            resources to their run-time configuration areas would be not just a burden, but has the 
            potential to clash with the configuration needs of other working copies that the user has checked out.
            <br/><br/>
            The solution is to store ignore patterns that are unique to the resources likely to 
            appear in a given directory with the directory itself. Common examples of unversioned 
            resources that are basically unique to a directory, yet likely to appear there, include 
            output from program compilations. Or—to use an example more appropriate to this book—the 
            HTML, PDF, or PostScript files generated as the result of a conversion of some source 
            DocBook XML files to a more legible output format.
            <br/><br/>
            <b>svn:keywords</b>
            <br/>
            Subversion has the ability to substitute keywords—pieces of useful, dynamic information 
            about a versioned file—into the contents of the file itself. Keywords generally describe 
            information about the last time the file was known to be modified. Because this information 
            changes each time the file changes, and more importantly, just after the file changes, 
            it is a hassle for any process except the version control system to keep the data 
            completely up-to-date. Left to human authors, the information would inevitably grow stale.
            <br/><br/>
            For example, say you have a document in which you would like to display the last date 
            on which it was modified. You could burden every author of that document to, just before 
            committing their changes, also tweak the part of the document that describes when it was 
            last changed. But sooner or later, someone would forget to do that. Instead simply ask 
            Subversion to perform keyword substitution on the LastChangedDate keyword. You control 
            where the keyword is inserted into your document by placing a keyword anchor at the 
            desired location in the file. This anchor is just a string of text formatted as $KeywordName$
            <br/><br/>
            Subversion defines the list of keywords available for substitution. That list contains 
            the following five keywords, some of which have shorter aliases that you can also use:
            <br/><br/>
            <b>LastChangedDate</b>
            <br/>
            This keyword describes the last time the file was known to have been changed in the 
            repository, and looks something like
            <br/><br/> 
            $LastChangedDate: 2002-07-22 21:42:37 -0700  (Mon, 22 Jul 2002) $ 
            <br/><br/>
            It may be abbreviated as Date.
            <br/><br/>
            <b>LastChangedRevision</b>
            <br/>
            This keyword describes the last known revision in which this file changed in the 
            repository, and looks something like 
            <br/><br/>
            $LastChangedRevision: 144 $
            <br/><br/>
            It may be abbreviated as Rev.
            <br/><br/>
            <b>LastChangedBy</b>
            <br/>
            This keyword describes the last known user to change this file in the repository, 
            and looks something like 
            <br/><br/>
            $LastChangedBy: harry $
            <br/><br/>
            It may be abbreviated as Author
            <br/><br/>
            <b>HeadURL</b>
            <br/>
            This keyword describes the full URL to the latest version of the file in the repository, 
            and looks something like 
            <br/><br/>
            $HeadURL: http://svn.collab.net/repos/trunk/README $
            <br/><br/>
            It may be abbreviated as URL.
            <br/><br/>
            <b>Id</b>
            <br/>
            This keyword is compressed combination of the other keywords. Its substitution looks 
            something like 
            <br/><br/>
            $Id: calc.c 148 2002-07-28 21:30:43Z sally $
            <br/><br/>
            ,and is interpreted to mean 
            that the file calc.c was last changed in revision 148 on the evening of July 28, 2002 by the user sally.
            <br/><br/>
            Simply adding keyword anchor text to your file does nothing special. Subversion will 
            never attempt to perform textual substitutions on your file contents unless explicitly 
            asked to do so. After all, you might be writing a document about how to use keywords,
            and you don't want Subversion to substitute your beautiful examples of un-substited keyword anchors!
            <br/><br/>
            To tell Subversion whether or not to substitute keywords on a particular file, 
            we again turn to the property-related subcommands. The svn:keywords property, 
            when set on a versioned file, controls which keywords will be substituted on that file. 
            The value is a space-delimited list of the keyword names or aliases found in the previous table.
            <br/><br/>
            For example, say you have a versioned file named weather.txt that looks like this:
            <br/><br/>
            Here is the latest report from the front lines.
            $LastChangedDate$
            $Rev$
            Cumulus clouds are appearing more frequently as summer approaches.
            <br/><br/>
            With no svn:keywords property set on that file, Subversion will do nothing special. 
            Now, let's enable substitution of the LastChangedDate keyword.
            <br/><br/>
            $ svn propset svn:keywords "LastChangedDate Author" weather.txt<br/>
            property `svn:keywords' set on 'weather.txt'
            $
            <br/><br/>
            Now you have made a local property modification on the weather.txt file. 
            You will see no changes to the file's contents (unless you made some of your 
            own prior to setting the property). Notice that the file contained a keyword 
            anchor for the Rev keyword, yet we did not include that keyword in the property value we set. 
            Subversion will happily ignore requests to substitute keywords that are not present in the file, 
            and will not substitute keywords that are not present in the svn:keywords property value.
            <br/><br/>
            <b>svn:eol-style</b>
            <br/>
            Unless otherwise noted using a versioned file's svn:mime-type property, 
            Subversion assumes that file contains human-readable data. Generally speaking, 
            Subversion only uses this knowledge to determine if contextual differences reports 
            for that file are possible. Otherwise, to Subversion, bytes are bytes.
            <br/><br/>
            This means that by default, Subversion doesn't pay any attention to the type of 
            end-of-line (EOL) markers used in your files. Unfortunately, different operating 
            system use different tokens to represent the end of a line of text in a file. 
            For example, the usual line ending token used by software on the Windows 
            platform is a pair of ASCII control characters—carriage return (CR) and line feed (LF).
            Unix software, however, just uses the LF character to denote the end of a line.
            <br/><br/>
            Not all of the various tools on these operating systems are prepared to understand 
            files that contain line endings in a format that differs from the native line ending 
            style of the operating system on which they are running. Common results are that 
            Unix programs treat the CR character present in Windows files as a regular character 
            (usually rendered as ^M), and that Windows programs combine all of the lines of a 
            Unix file into one giant line because no carriage return-linefeed (or CRLF) character 
            combination was found to denote the end of line.
            <br/><br/>
            This sensitivity to foreign EOL markers can become frustraing for folks who share a 
            file across different operating systems. For example, consider a source code file, 
            and developers that edit this file on both Windows and Unix systems. If all the developers 
            always use tools which preserve the line ending style of the file, no problems occur.
            <br/><br/>
            But in practice, many common tools either fail to properly read a file with foreign 
            EOL markers, or they convert the file's line endings to the native style when the file 
            is saved. If the former is true for a developer, he has to use an external conversion utility
            (such as dos2unix or its companion, unix2dos) to prepare the file for editing. 
            The latter case requires no extra preparation. But both cases result in a file that 
            differs from the original quite literally on every line! Prior to committing his changes, 
            the user has two choices. Either he can use a conversion utility to restore the modified 
            file to the same line ending style that it was in before his edits were made. 
            Or, he can simply commit the file—new EOL markers and all.
            <br/><br/>
            The result of scenarios like there include wasted time and unnecessary modifications to 
            committed files. Wasted time is painful enough. But when commits change every line in a file, 
            this complicates the job of determining which of those lines were changed in a non-trivial way. 
            Where was that bug really fixed? On what line was a syntax error introduced?
            <br/><br/>
            The solution this problem is the svn:eol-style property. When this property is set to a 
            valid value, Subversion uses it to determine what special processing to perform on the 
            file so that the file's line ending style isn't flip-flopping with every commit that comes
            from a different operating system. The valid values are:
            <br/><br/>
            <b>native</b>
            <br/>
            This causes the file to contain the EOL markers that are native to the operating 
            system on which Subversion was run. In other words, if a user on a Windows machine 
            checks out a working copy that contains a file with a svn:eol-style property set to native, 
            that file will contain CRLF EOL markers. A unix user checking out a working copy which contains 
            the same file will see LF EOL markers in his copy of the file.
            <br/><br/>
            Note that Subversion will actually store the file in the repository using normalized LF 
            EOL markers regardless of the operating system. This is basically transparent to the user, though.
            <br/><br/>
            <b>CRLF</b>
            <br/>
            This causes the file to contain CRLF sequences for EOL markers, 
            regardless of the operating system in use.
            <br/><br/>
            <b>LF</b>
            <br/>
            This causes the file to contain LF characters for EOL markers. 
            regardless of the operating system in use.
            <br/><br/>
            <b>CR</b>
            <br/>
            This causes the file to contain CR characters for EOL markers, 
            regardless of the operating system in use. 
            This line ending style is not very common. It was used on older Macintosh platforms 
            (on which Subversion doesn't even run).
            <br/><br/>
            <b>svn:externals</b>
            <br/>
            The svn:externals property contains instructions for Subversion to populate a 
            versioned directory with one or more other checked-out Subversion working copies. 
        </p>
    </section>   
    <section>
        <p>
        <hr></hr>
            <i>(from "Subversion:The Definitive Guide" - <link url="http://svnbook.red-bean.com/html-chunk/">
            svnbook.red-bean.com/html-chunk/</link>)</i>
        </p>
    </section>
</doc>

