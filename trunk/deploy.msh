
# The URL to build from
$ANKHSVN_ROOT = "http://10.0.0.3/svn/finalproject/trunk"
$ANKHSVN = "$ANKHSVN_ROOT/src"

# version numbers to put in the filename
$MAJOR, $MINOR, $PATCH, $LABEL = 0, 6, 0, "snapshot2"

# The URL of the Subversion version
$SUBVERSION = "http://svn.collab.net/repos/svn/tags/1.1.0/"
$SUBVERSION_VERSION="1.1.0"
$subversion_dir=""

# The URL of neon
$NEON = "http://www.webdav.org/neon/neon-0.24.7.tar.gz"
$NEON_VERSION="0.24.7"

# Berkeley DB
$BDB = "ftp://sleepycat1.inetu.net/releases/db-4.2.52.tar.gz"
$BDB_DIR = "db-4.2.52"
$BDB_VERSION="4.2.52"

# OpenSSL
$OPENSSL = "http://www.openssl.org/source/openssl-0.9.7d.tar.gz"
$OPENSSL_VERSION="0.9.7-d"
$openssl_target_dir = ""

# ZLIB
$ZLIB = "http://www.gzip.org/zlib/contrib/zlib113-win32.zip"
$ZLIB_VERSION="1.1.3"
$zlib_target_dir = ""

# Whether to build openssl as a static library
# Must be an environment variable so that neon.mak picks up on it
$env:OPENSSL_STATIC = 1

# The build directory
$BUILDDIR = "build"

# The location of the vsvars file
$VSVARS="I:\Program Files\Microsoft Visual Studio .NET\Common7\Tools\vsvars32.bat"

# APR
$APACHE_CVS = ":pserver:anoncvs@cvs.apache.org:/home/cvspublic"

$APR_BRANCH = "APR_0_9_BRANCH"
$APR_MODULE = "apr"
$APR_VERSION="0.9.5"

$APR_UTIL_BRANCH = "APU_0_9_BRANCH"
$APR_UTIL_MODULE = "apr-util"
$APR_UTIL_VERSION="0.9.5"

$APR_ICONV_BRANCH = "API_0_9_BRANCH"
$APR_ICONV_MODULE = "apr-iconv"
$APR_ICONV_VERSION="0.9.5"

# Whether to use nant to build Ankh
$USE_NANT = 1


$TMP = "T:"

$CONFIG = "Release"

$ErrorContinue = 0

filter qq
{
    '"' + $_.ToString() + '"' 
}

function showpath
{
    push-location
    $env:path.split(";") | foreach {
        if ( test-path $_ )
        {
            set-location $_
            ls *.exe
        }
    }

    pop-location

}

function showvars
{
    
}

function checkout 
{
    svn co $args[0] $args[1]
}

function get_basename
{
    # find the base name
    $brace = $args[0].LastIndexOf( '/' )
    return $args[0].Substring( ($brace+1), ($args[0].Length-$brace-1) )
}


function create_build_directory
{
    $dir = $BUILDDIR
    $num = 0
    while( test-path $dir )
    {
        $dir = "{0}-{1}" -f $BUILDDIR, $num
        $num += 1
    }

    return $dir
}

function get_env_from_bat( $batfile )
{
    $run_bat = combine-path $TMP "run_bat.cmd"
    echo "call %1" > $run_bat
    echo "set" >> $run_bat
    
    $newenv = cmd.exe "/c" $run_bat "$batfile"
    
    $newenv -match "=" | foreach{
       $var, $value = $_.Split("=")
        "Setting environment variable $var to $value"
        set-env $var $value
    }

    remove-item $run_bat
}

function parse_args( $cmdline )
{
    $do_vsvars = 1
    
    # get "regular" args
    $cmdline | foreach {
        switch( $_ )
        {
            { $_ -match "[-/]novsvars" }
            {
                $do_vsvars = 0
            }
        }
    }

    # go through any var=val args on the command line
    
    $cmdline | where { $_ -match "=" } | foreach    { 
        $var, $value = $_.Split("=")
        #$_.GetType()
         
        "Setting $var to $value"
        set-variable $var $value
    }

    if ( $do_vsvars )
    {
        "Doing vsvars"
        get_env_from_bat( $VSVARS )
    }
    else
    {
        "Not doing vsvars"
    }

}




# Downloads and extracts a zip or a tarball
function download_and_extract($url, $dir, $targetname)
{
    push-location

    # move to the dir where we want it
    set-location $dir    


    "Downloading {0} to {1}" -f $url, $(get-cwd)

    # get the file
    wget -nv $url

    $basename = get_basename $url

    # extract it
    $dirname = $basename

    # what type of file?
    switch ($basename)
    {
        { $_ -like "*.tar.gz" } 
        {
            "Unzipping {0} using gunzip"
            gunzip $basename

            $basename = $basename.Substring(0, ($basename.Length - 2));
            "Extracting {0} using tar" -f $basename
            tar -xf $basename
            $dirname = $basename.Substring(0, $basename.LastIndexOf( ".tar"))
        }
        
        { $_ -like "*.zip" } 
        {           
            "Extracting {0} using unzip" -f $basename
            unzip $basename
        }

        default 
        {
            "$basename: unrecognized filetype"
            exit
        }
            
    }

    # if provided, rename the directory
    if ( $dirname -ne $targetname )
    {
        "Moving {0} to {1}" -f $dirname, $targetname
        move-item $dirname $targetname
    }

    # we don't need the tarball(zipball) any more
    #remove-item $basename
    pop-location
}

function checkout( $url, $dirname )
{
    "Checking out $url to $dirname"
    svn co $url $dirname
}

function do_neon
{
    download_and_extract $NEON "." neon
    $script:neon_target_dir = "neon"
    
}

function do_zlib
{
    if ( $script:zlib_target_dir )
    {
        "Already have zlib. Not doing it"
        return
    }

    push-location
    new-directory "zlib"
    set-location "zlib"
    download_and_extract $ZLIB "." ""
    pop-location
    $script:zlib_target_dir = resolve-path "zlib"
}

function do_openssl
{
    if ( $script:openssl_target_dir )
    {
        "Already have OpenSSL. Not doing it"
        return
    }

    push-location    
    download_and_extract $OPENSSL "." "openssl"

    
    ""
    "** Building OpenSSL **"
    ""

    # now build it
    $script:openssl_target_dir = convert-path "openssl"

    set-location $openssl_target_dir
    perl Configure VC-WIN32
    ms\do_masm
    if ( $env:OPENSSL_STATIC )
    {
        "Building static OpenSSL libraries"
        nmake -f ms\nt.mak
    }
    else
    {
        "Building dynamic OpenSSL libraries"
        nmake -f ms\ntdll.mak 
    }

    if ( ! $? ){ exit }

    pop-location
    
}

function do_berkeley
{
    push-location

    ""
    "** Berkeley DB **"
    ""
    
    $bdb_src = combine-path $TMP $BDB_DIR
    "Looking for BDB sources in $bdb_src"
    if ( -not (test-path $bdb_src) )
    {
        "Not found"
        download_and_extract $BDB $TMP $BDB_DIR
    }

    $slnfile = combine-path ( combine-path $bdb_src "build_win32" ) "Berkeley_DB.sln"
    "Looking for $slnfile"

    if ( ! ( test-path $slnfile ))
    {
        "Not found. Now convert the Berkeley DB workspace to a VS.NET solution"
        die
    }

    $bdb_build_dir = (combine-path "." $BDB_DIR)
    "Copying $bdb_src to $bdb_build_dir"
    copy-item -recurse $bdb_src $bdb_build_dir
    
    
    $slnfile = combine-path ( combine-path $bdb_build_dir "build_win32" ) "Berkeley_DB.sln"
    
    "Building $slnfile"
    devenv $slnfile /Build $CONFIG /project "build_all"

    if ( ! $? )
    {
        exit
    }

    $script:bdb_target_dir = convert-path "db4-win32"
    "Creating $bdb_target_dir"
    new-directory $bdb_target_dir
    
    $dirs = "$bdb_target_dir\include", "$bdb_target_dir\lib", "$bdb_target_dir\bin"
    $dirs | foreach { "Creating $_"; new-directory $_ }

    "Copying header files to $bdb_target_dir\include"
    copy-item "$bdb_build_dir\build_win32\*.h" "$bdb_target_dir\include"

    "Copying lib files to $bdb_target_dir\lib"
    copy-item "$bdb_build_dir\build_win32\$CONFIG\*.lib" "$bdb_target_dir\lib"

    "Copying DLL files to $bdb_target_dir\bin"
    copy-item "$bdb_build_dir\build_win32\$CONFIG\*.dll" "$bdb_target_dir\bin"

    pop-location
    
}

function do_apr
{
    ""
    "** APR **"
    ""
    
    "Checking out $APR_MODULE from $APACHE_CVS, the $APR_BRANCH branch"
    cvs -d $APACHE_CVS co -r $APR_BRANCH $APR_MODULE 

    "Checking out $APR_UTIL_MODULE from $APACHE_CVS, the $APR_UTIL_BRANCH branch"
    cvs -d $APACHE_CVS co -r $APR_UTIL_BRANCH $APR_UTIL_MODULE

    "Checking out $APR_ICONV_MODULE from $APACHE_CVS, the $APR_ICONV_BRANCH branch"
    cvs -d $APACHE_CVS co -r $APR_ICONV_BRANCH $APR_ICONV_MODULE

}

function do_subversion
{
    
    do_openssl
    do_zlib

    push-location   

    if ( $script:subversion_dir )
    {
        "Already have a subversion directory. Not doing it."
        return
    }
    else
    {
        "No subversion dir. Doing it"
    }
    
    checkout $SUBVERSION "subversion" 

    set-location "subversion"

    do_apr
    do_berkeley

    ""
    ""
    "*** And finally - Subversion! ***"
    
    do_neon
    echo "$bdb_target_dir | $openssl_target_dir | $APR_MODULE | $APR_ICONV_MODULE |  $APR_UTIL_MODULE"  
    
    $gen_make = convert-path "gen-make.py"
    
    $opts="-t vcproj "
    $opts+= "--with-berkeley-db=$bdb_target_dir --with-openssl=$openssl_target_dir --with-zlib=$zlib_target_dir"
    
    # quote appropriately
    $opts = $opts.Split() | qq 
    showpath
    "Generating VC++ solution files"
    echo "python gen-make.py $opts"
    python "gen-make.py" $opts

    if ( ! $? ){ exit }

    # make sure our built subversion lets us set the admin dir
    "Patching the Subversion source to allow us to set the admin dir"
    patch -p0 --input "..\src\NSvn.Core\admindir.patch"

    if ( ! $? ){ exit }

    
    "Building Subversion"
    devenv "subversion_vcnet.sln" /Build $CONFIG /project "__ALL__"

    #if ( ! $? ){ exit }

    pop-location

    # so that the Ankh  build will pick up on it.
    $script:subversion_dir = convert-path "subversion"
     
}

function get_revision($dir)
{
    return $(svnversion $dir)
}

function add_version( $name, $version )
{
    $ver, $tag = $version.Split("-")
    $major, $minor, $patch, $rev = $ver.Split(".")
    if ( $rev -eq "" )
    {
        $rev = 0
    }
    $params = "`"$name`", $major, $minor, $patch, Tag=`"$tag`""
    #$params = "`"`", {1}, {2}, {3}, Tag=`"{4}`"" -f `
    #   $name, $maj, $min, $r, $tag 

    "[assembly:Utils.VersionAttribute( $params )]" >> AssemblyInfo.cs
    "[assembly:Utils::VersionAttribute( $params )];" >> AssemblyInfo.cpp
}

function create_assemblyinfo
{
    $rev = get_revision "src" 
    $versiontuple = "{0}.{1}.{2}.{3}" -f $MAJOR, $MINOR, $PATCH, $rev
    $ankhversion="$versiontuple-$LABEL"
    
    "Creating AssemblyInfo.cs"
    
    "using System.Reflection;`
using System.Runtime.CompilerServices;
`
[assembly:AssemblyVersion(`"{0}`")]" -f $versiontuple > AssemblyInfo.cs


    "Creating AssemblyInfo.cpp"
    
    "#include `"stdafx.h`"`
`
using namespace System::Reflection;`
using namespace System::Runtime::CompilerServices;`
[assembly:AssemblyVersionAttribute(`"{0}`")];" -f $versiontuple > AssemblyInfo.cpp

    add_version "Subversion" $SUBVERSION_VERSION 
    add_version "Neon" $NEON_VERSION 
    add_version "Berkeley DB" $BDB_VERSION 
    add_version "OpenSSL" $OPENSSL_VERSION
    add_version "ZLib" $ZLIB_VERSION 
    add_version "apr" $APR_VERSION 
    add_version "apr-util" $APR_UTIL_VERSION 
    add_version "apr-iconv" $APR_ICONV_VERSION 
    add_version "Ankh" $ankhversion

    copy-item -force AssemblyInfo.cs src\Ankh\AssemblyInfo.cs
    copy-item -force AssemblyInfo.cs src\Ankh.UI\AssemblyInfo.cs
    copy-item -force AssemblyInfo.cs src\Utils\AssemblyInfo.cs
    copy-item -force AssemblyInfo.cpp src\NSvn.Core\AssemblyInfo.cpp
    copy-item -force AssemblyInfo.cs src\ReposInstaller\AssemblyInfo.cs 
}



function checkout_tools
{
    checkout "$ANKHSVN_ROOT/tools/WiX"
    checkout "$ANKHSVN_ROOT/tools/nant"
    $curdir=$(get-cwd)
    $env:path = "$curdir\nant;$env:path"    
    $script:wix_binary_dir = convert-path "WiX"
}



function do_ankh
{
    # do_subversion
    #
    checkout $ANKHSVN
    
    $REVISION = $(svnversion src)

    do_subversion

    $toname = "..\AnkhSetup-{0}.{1}.{2}.{3}-{4}.msi" -f $MAJOR, $MINOR, $PATCH, $REVISION, $LABEL

    checkout_tools

    # get the version thing done
    create_assemblyinfo 
    
    set-location "src"

    if ( $USE_NANT )
    {      
        
        nant /t:"net-1.0" /v wix "-D:svndir=$subversion_dir" "-D:wix-binary.dir=$wix_binary_dir"

        if ( ! $? ){ exit }

        copy-item "installsource\Ankh.msi" $toname
        
    }
    else
    {   
        $env:svnsrc=$subversion_dir


        "svnsrc: $env:svnsrc"
        devenv src.sln /build $CONFIG /project "AnkhSetup"

        if ( ! $? ){ exit }

        copy-item "Ankh\AnkhSetup\$CONFIG\AnkhSetup.msi" $toname
    }
}

$starttime = [DateTime].Now

# parse any arguments given on the command line
parse_args( $args )

push-location

# create the build directory
$dir = create_build_directory
new-directory $dir
set-location $dir

"Created build directory {0}" -f $dir

do_ankh
pop-location

"{0}" -f ([DateTime].Now.Subtract($starttime))





