<?xml version="1.0"?>
<doc>
    <assembly>
        "SharpSvn"
    </assembly>
    <members>
        <member name="F:SharpSvn.Implementation.SvnPropertyNames.TortoiseSvnDirectoryProperties">
            <summary>Gets a list of TortoiseSvn defined directory properties, which are applied recursively on all directories below the set root</summary>
        </member>
        <member name="F:SharpSvn.Implementation.SvnPropertyNames.SvnBooleanValue">
            <summary>
Properties whose values are interpreted as booleans (such as
svn:executable, svn:needs_lock, and svn:special) always fold their
value to this.
</summary>
        </member>
        <member name="F:SharpSvn.Implementation.SvnPropertyNames.SvnPropertyPrefix">
            <summary>All Subversion property names start with this</summary>
        </member>
        <member name="M:svn_config_write_auth_data(apr_hash_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Use @a cred_kind and @a realmstring to create or overwrite a file
 * within the ~/.subversion/auth/ area.  Write the contents of @a hash into
 * the file.  If @a config_dir is not NULL it specifies a directory to read
 * the config overriding all other sources.
 *
 * Also, add @a realmstring to the file, with key @c
 * SVN_CONFIG_REALMSTRING_KEY.  This allows programs (or users) to
 * verify exactly which set credentials live within the file.
 *
 * The hashtable must contain <tt>const char *</tt> keys and
 * <tt>svn_string_t *</tt> values.

</member>
        <member name="M:svn_config_read_auth_data(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Accessing cached authentication data in the user config area.
 *
 * @defgroup cached_authentication_data Cached authentication data
 * @{

A hash-key pointing to a realmstring.  Every file containing
 * authentication data should have this key.

Use @a cred_kind and @a realmstring to locate a file within the
 * ~/.subversion/auth/ area.  If the file exists, initialize @a *hash
 * and load the file contents into the hash, using @a pool.  If the
 * file doesn't exist, set @a *hash to NULL.
 *
 * If @a config_dir is not NULL it specifies a directory from which to
 * read the config overriding all other sources.
 *
 * Besides containing the original credential fields, the hash will
 * also contain @c SVN_CONFIG_REALMSTRING_KEY.  The caller can examine
 * this value as a sanity-check that the correct file was loaded.
 *
 * The hashtable will contain <tt>const char *</tt> keys and
 * <tt>svn_string_t *</tt> values.

</member>
        <member name="M:svn_config_ensure(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Try to ensure that the user's ~/.subversion/ area exists, and create
 * no-op template files for any absent config files.  Use @a pool for any
 * temporary allocation.  If @a config_dir is not @c NULL it specifies a
 * directory from which to read the config overriding all other sources.
 *
 * Don't error if something exists but is the wrong kind (for example,
 * ~/.subversion exists but is a file, or ~/.subversion/servers exists
 * but is a directory).
 *
 * Also don't error if trying to create something and failing -- it's
 * okay for the config area or its contents not to be created.
 * However, if creating a config template file succeeds, return an
 * error if unable to initialize its contents.

</member>
        <member name="M:svn_config_get_server_setting_int(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int64,System.Int64*,apr_pool_t*)">
Retrieve value into @a result_value corresponding to @a option_name for a
 *  given @a server_group in @a cfg, or return @a default_value if none is
 *  found.
 *
 *  The config will first be checked for a default, then will be checked for
 *  an override in a server group. If the value found is not a valid integer,
 *  a @c svn_error_t* will be returned.

</member>
        <member name="M:svn_config_get_server_setting(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Retrieve value corresponding to @a option_name for a given
 *  @a server_group in @a cfg , or return @a default_value if none is found.
 *
 *  The config will first be checked for a default, then will be checked for
 *  an override in a server group.

</member>
        <member name="M:svn_config_find_group(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Enumerate the group @a master_section in @a cfg.  Each variable
 * value is interpreted as a list of glob patterns (separated by comma
 * and optional whitespace).  Return the name of the first variable
 * whose value matches @a key, or @c NULL if no variable matches.

</member>
        <member name="M:svn_config_has_section(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return @c TRUE if @a section exists in @a cfg, @c FALSE otherwise.

 @since New in 1.4.

</member>
        <member name="M:svn_config_enumerate2(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,apr_pool_t*)">
Enumerate the options in @a section, passing @a baton and the current
 * option's name and value to @a callback.  Continue the enumeration if
 * @a callback returns @c TRUE.  Return the number of times @a callback
 * was called.
 *
 * ### kff asks: A more usual interface is to continue enumerating
 *     while @a callback does not return error, and if @a callback does
 *     return error, to return the same error (or a wrapping of it)
 *     from svn_config_enumerate().  What's the use case for
 *     svn_config_enumerate()?  Is it more likely to need to break out
 *     of an enumeration early, with no error, than an invocation of
 *     @a callback is likely to need to return an error? ###
 *
 * @a callback's @a name and @a value parameters are only valid for the
 * duration of the call.
 *
 * @since New in 1.3.

</member>
        <member name="D:svn_config_enumerator2_t">
A callback function used in enumerating config options.
 *
 * See svn_config_enumerate2() for the details of this type.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_config_enumerate(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
Similar to svn_config_enumerate2(), but uses a memory pool of
 * @a cfg instead of one that is explicitely provided.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.

</member>
        <member name="D:svn_config_enumerator_t">
Similar to @c svn_config_enumerator2_t, but is not
 * provided with a memory pool argument.
 * See svn_config_enumerate() for the details of this type.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.

</member>
        <member name="M:svn_config_enumerate_sections2(svn_config_t*,=FUNC:System.Int32(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,apr_pool_t*)">
Enumerate the sections, passing @a baton and the current section's name
 * to @a callback.  Continue the enumeration if @a callback returns @c TRUE.
 * Return the number of times @a callback was called.
 *
 * ### See kff's comment to svn_config_enumerate2().  It applies to this
 * function, too. ###
 *
 * @a callback's @a name parameter is only valid for the duration of the call.
 *
 * @since New in 1.3.

</member>
        <member name="D:svn_config_section_enumerator2_t">
A callback function used in enumerating config sections.
 *
 * See svn_config_enumerate_sections2() for the details of this type.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_config_enumerate_sections(svn_config_t*,=FUNC:System.Int32(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
Similar to svn_config_enumerate_sections2(), but uses a memory pool of
 * @a cfg instead of one that is explicitely provided.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.

</member>
        <member name="D:svn_config_section_enumerator_t">
Similar to @c svn_config_section_enumerator2_t, but is not
 * provided with a memory pool argument.
 *
 * See svn_config_enumerate_sections() for the details of this type.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.

</member>
        <member name="M:svn_config_set_bool(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Like svn_config_set(), but for boolean values.
 *
 * Sets the option to 'TRUE'/'FALSE', depending on @a value.

</member>
        <member name="M:svn_config_get_bool(svn_config_t*,System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Like svn_config_get(), but for boolean values.
 *
 * Parses the option as a boolean value. The recognized representations
 * are 'TRUE'/'FALSE', 'yes'/'no', 'on'/'off', '1'/'0'; case does not
 * matter. Returns an error if the option doesn't contain a known string.

</member>
        <member name="M:svn_config_set(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add or replace the value of a (@a section, @a option) pair in @a cfg with
 * @a value.
 *
 * This function invalidates all value expansions in @a cfg.
 *
 * To remove an option, pass NULL for the @c value.

</member>
        <member name="M:svn_config_get(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Find the value of a (@a section, @a option) pair in @a cfg, set @a
 * *valuep to the value.
 *
 * If @a cfg is @c NULL, just sets @a *valuep to @a default_value. If
 * the value does not exist, expand and return @a default_value. @a
 * default_value can be NULL.
 *
 * The returned value will be valid at least until the next call to
 * svn_config_get(), or for the lifetime of @a default_value. It is
 * safest to consume the returned value immediately.
 *
 * This function may change @a cfg by expanding option values.

</member>
        <member name="M:svn_config_merge(svn_config_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Like svn_config_read(), but merges the configuration data from @a file
 * (a file or registry path) into @a *cfg, which was previously returned
 * from svn_config_read().  This function invalidates all value
 * expansions in @a cfg, so that the next svn_config_get() takes the
 * modifications into account.

</member>
        <member name="M:svn_config_read(svn_config_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Read configuration data from @a file (a file or registry path) into
 * @a *cfgp, allocated in @a pool.
 *
 * If @a file does not exist, then if @a must_exist, return an error,
 * otherwise return an empty @c svn_config_t.

</member>
        <member name="M:svn_config_get_config(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@name Client configuration files strings
Strings for the names of files, sections, and options in the
client configuration files.
@{

@} 
@name Repository conf directory configuration files strings
 * Strings for the names of sections and options in the
 * repository conf directory configuration files.
 * @{

@} 
Read configuration information from the standard sources and merge it
 * into the hash @a *cfg_hash.  If @a config_dir is not NULL it specifies a
 * directory from which to read the configuration files, overriding all
 * other sources.  Otherwise, first read any system-wide configurations
 * (from a file or from the registry), then merge in personal
 * configurations (again from file or registry).  The hash and all its data
 * are allocated in @a pool.
 *
 * @a *cfg_hash is a hash whose keys are @c const char * configuration
 * categories (@c SVN_CONFIG_CATEGORY_SERVERS,
 * @c SVN_CONFIG_CATEGORY_CONFIG, etc.) and whose values are the @c
 * svn_config_t * items representing the configuration values for that
 * category.

</member>
        <member name="T:svn_config_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_props.h
 @brief Subversion properties

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_config.h
 @brief Accessing SVN configuration files.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

Opaque structure describing a set of configuration options. 
</member>
        <member name="T:SharpSvn.SvnUnlockArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Unlock(System.String,SharpSvn.SvnUnlockArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnResolvedArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Resolved(System.String,SharpSvn.SvnResolvedArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnReintegrationMergeArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.ReintegrationMerge(System.String,SharpSvn.SvnTarget,SharpSvn.SvnReintegrationMergeArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnImportArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Import(System.String,System.Uri,SharpSvn.SvnImportArgs)" /> and <see cref="M:SharpSvn.SvnClient.RemoteImport(System.String,System.Uri,SharpSvn.SvnImportArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnRecoverRepositoryArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnRepositoryClient" />'s RecoverRepository method</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnDeleteRepositoryArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnRepositoryClient" />'s DeleteRepository method</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnCreateRepositoryArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnRepositoryClient" />'s CreateRepository method</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnGetSuggestedMergeSourcesArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s GetSuggestedMergeSources method</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnAddArgs.AddParents">
            <summary />
        </member>
        <member name="P:SharpSvn.SvnAddArgs.Force">
            <summary>If force is not set and path is already under version control, return the error
SVN_ERR_ENTRY_EXISTS. If force is set, do not error on already-versioned items. When used
on a directory in conjunction with the recursive flag, this has the effect of scheduling
for addition unversioned files and directories scattered deep within a versioned tree.</summary>
        </member>
        <member name="T:SharpSvn.SvnAddArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Add(System.String,SharpSvn.SvnAddArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:svn_utf_cstring_from_utf8_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a natively-encoded C string from utf8 string @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="M:svn_utf_cstring_from_utf8_stringbuf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a natively-encoded C string from utf8 stringbuf @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="M:svn_utf_cstring_from_utf8_fuzzy(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return a fuzzily native-encoded C string from utf8 C string @a src,
 * allocated in @a pool.  A fuzzy recoding leaves all 7-bit ascii
 * characters the same, and substitutes "?\\XXX" for others, where XXX
 * is the unsigned decimal code for that character.
 *
 * This function cannot error; it is guaranteed to return something.
 * First it will recode as described above and then attempt to convert
 * the (new) 7-bit UTF-8 string to native encoding.  If that fails, it
 * will return the raw fuzzily recoded string, which may or may not be
 * meaningful in the client's locale, but is (presumably) better than
 * nothing.
 *
 * ### Notes:
 *
 * Improvement is possible, even imminent.  The original problem was
 * that if you converted a UTF-8 string (say, a log message) into a
 * locale that couldn't represent all the characters, you'd just get a
 * static placeholder saying "[unconvertible log message]".  Then
 * Justin Erenkrantz pointed out how on platforms that didn't support
 * conversion at all, "svn log" would still fail completely when it
 * encountered unconvertible data.
 *
 * Now for both cases, the caller can at least fall back on this
 * function, which converts the message as best it can, substituting
 * "?\\XXX" escape codes for the non-ascii characters.
 *
 * Ultimately, some callers may prefer the iconv "//TRANSLIT" option,
 * so when we can detect that at configure time, things will change.
 * Also, this should (?) be moved to apr/apu eventually.
 *
 * See http://subversion.tigris.org/issues/show_bug.cgi?id=807 for
 * details.

</member>
        <member name="M:svn_utf_cstring_from_utf8_ex(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Like svn_utf_cstring_from_utf8_ex2() but with @a convset_key which is
 * ignored.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_utf_cstring_from_utf8_ex2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a @a topage encoded C string from utf8 encoded C string
 * @a src; allocate @a *dest in @a pool.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_utf_cstring_from_utf8(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a natively-encoded C string from utf8 C string @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="M:svn_utf_string_from_utf8(svn_string_t!System.Runtime.CompilerServices.IsConst**,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a natively-encoded string from utf8 string @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="M:svn_utf_stringbuf_from_utf8(svn_stringbuf_t**,svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a natively-encoded stringbuf from utf8 stringbuf @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="M:svn_utf_cstring_to_utf8_ex(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Like svn_utf_cstring_to_utf8_ex2() but with @a convset_key which is
 * ignored.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_utf_cstring_to_utf8_ex2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a utf8 encoded C string from @a frompage encoded C
 * string @a src; allocate @a *dest in @a pool.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_utf_cstring_to_utf8(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a utf8-encoded C string from native C string @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="M:svn_utf_string_to_utf8(svn_string_t!System.Runtime.CompilerServices.IsConst**,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a utf8-encoded string from native string @a src; allocate
 * @a *dest in @a pool.

</member>
        <member name="M:svn_utf_stringbuf_to_utf8(svn_stringbuf_t**,svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *dest to a utf8-encoded stringbuf from native stringbuf @a src;
 * allocate @a *dest in @a pool.

</member>
        <member name="T:apr_xlate_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_utf.h
 @brief UTF-8 conversion routines

@defgroup APR_Util APR Utility Functions
@{

 APU_DECLARE_EXPORT is defined when building the APR-UTIL dynamic library,
 so that all public symbols are exported.

 APU_DECLARE_STATIC is defined when including the APR-UTIL public headers,
 to provide static linkage when the dynamic library may be unavailable.

 APU_DECLARE_STATIC and APU_DECLARE_EXPORT are left undefined when
 including the APR-UTIL public headers, to import and link the symbols from 
 the dynamic APR-UTIL library and assure appropriate indirection and calling
 conventions at compile time.

@} 
</member>
        <member name="M:svn_dso_load(apr_dso_handle_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Attempt to load @a libname, returning it in @a dso.

 If @a libname cannot be loaded set @a dso to NULL and return
 @c SVN_NO_ERROR.

 @note Due to pool lifetime issues DSOs are all loaded into a global
       pool, so you must be certain that there is a bounded number of
       them that will ever be loaded by the system, otherwise you will
       leak memory.

 @since New in 1.4.0.

</member>
        <member name="T:apr_dso_handle_t">
 @copyright
 ====================================================================
 Copyright (c) 2006 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_dso.h
 @brief DSO loading routines

</member>
        <member name="P:SharpSvn.SvnListChangeListArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnListChangeListArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.ListChangeList(System.String,SharpSvn.SvnListChangeListArgs,System.EventHandler`1{SharpSvn.SvnListChangeListEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnCleanUpArgs">
            <summary>Extended parameter container for <see cref="T:SharpSvn.SvnClient" />Cleanup</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:serf_bucket_headers_do(serf_bucket_t*,=FUNC:System.Int32(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*),System.Void*)">
@param headers_bucket headers to iterate over
@param func callback routine to invoke for every header in the bucket
@param baton baton to pass on each invocation to func

</member>
        <member name="D:serf_bucket_headers_do_callback_fn_t">
@param baton opaque baton as passed to @see serf_bucket_headers_do
@param key The header key from this iteration through the table
@param value The header value from this iteration through the table

</member>
        <member name="M:serf_bucket_headers_setx(serf_bucket_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)">
 Set, extended: fine grained copy control of header and value.

 Set the specified @a header, with length @a header_size with the
 @a value, and length @a value_size, into the bucket. The header will
 be copied if @a header_copy is set, and the value is copied if
 @a value_copy is set. If the values are not copied, then they should
 remain in scope at least as long as the bucket.

 If @a headers_bucket already contains a header with the same name
 as @a header, then append @a value to the existing value,
 separating with a comma (as per RFC 2616, section 4.2).  In this
 case, the new value must be allocated and the header re-used, so
 behave as if @a value_copy were true and @a header_copy false.

</member>
        <member name="M:serf_bucket_headers_setn(serf_bucket_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Set, no copies.

 Set the specified @a header and @a value into the bucket, without
 copying either attribute. Both attributes should remain in scope at
 least as long as the bucket.

 @note In the case where a header already exists this will result
       in a reallocation and copy, @see serf_bucket_headers_setn.

</member>
        <member name="M:serf_bucket_headers_setc(serf_bucket_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Set, copies: header and value copied.

 Copy the specified @a header and @a value into the bucket, using space
 from this bucket's allocator.

</member>
        <member name="M:serf_bucket_headers_set(serf_bucket_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Set, default: value copied.

 Set the specified @a header within the bucket, copying the @a value
 into space from this bucket's allocator. The header is NOT copied,
 so it should remain in scope at least as long as the bucket.

</member>
        <member name="M:serf_bucket_simple_copy_create(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,serf_bucket_alloc_t*)">
Equivalent to serf_bucket_simple_create, except that the bucket takes
ownership of a private copy of the data.

</member>
        <member name="M:serf_bucket_aggregate_become(serf_bucket_t*)">
Transform @a bucket in-place into an aggregate bucket. 
</member>
        <member name="M:serf_bucket_response_set_head(serf_bucket_t*)">
Advise the response @a bucket that this was from a HEAD request and
that it should not expect to see a response body.

</member>
        <member name="M:serf_bucket_response_get_headers(serf_bucket_t*)">
Get the headers bucket for @a response.

</member>
        <member name="M:serf_bucket_response_wait_for_headers(serf_bucket_t*)">
 Wait for the HTTP headers to be processed for a @a response.

 If the headers are available, APR_SUCCESS is returned.
 If the headers aren't available, APR_EAGAIN is returned.

</member>
        <member name="M:serf_bucket_response_status(serf_bucket_t*,serf_status_line*)">
Return the Status-Line information, if available. This function
works like other bucket read functions: it may return APR_EAGAIN or
APR_EOF to signal the state of the bucket for reading. A return
value of APR_SUCCESS will always indicate that status line
information was returned; for other return values the caller must
check the version field in @a sline. A value of 0 means that the
data is not (yet) present.

</member>
        <member name="M:serf_bucket_request_set_root(serf_bucket_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Sets the root url of the remote host. If this request contains a relative
url, it will be prefixed with the root url to form an absolute url.
@a bucket is the request bucket. @a root_url is the absolute url of the
root of the remote host.

</member>
        <member name="F:serf_bucket_type_request">
@file serf_bucket_types.h
@brief serf-supported bucket types

</member>
        <member name="M:apu_version(apr_version_t*)">
@defgroup APR_Util APR Utility Functions
@{

 APU_DECLARE_EXPORT is defined when building the APR-UTIL dynamic library,
 so that all public symbols are exported.

 APU_DECLARE_STATIC is defined when including the APR-UTIL public headers,
 to provide static linkage when the dynamic library may be unavailable.

 APU_DECLARE_STATIC and APU_DECLARE_EXPORT are left undefined when
 including the APR-UTIL public headers, to import and link the symbols from 
 the dynamic APR-UTIL library and assure appropriate indirection and calling
 conventions at compile time.

@} 
</member>
        <member name="T:SharpSvn.SvnLockArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Lock(System.String,SharpSvn.SvnLockArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvnStrings.VerifyEnumFailed">
            <summary>
  Looks up a localized string similar to The value {0} is not a valid {1}.
</summary>
        </member>
        <member name="P:SharpSvnStrings.UriIsNotAbsolute">
            <summary>
  Looks up a localized string similar to The passed Uri is not absolute.
</summary>
        </member>
        <member name="P:SharpSvnStrings.TheTargetIsNotAValidUriTarget">
            <summary>
  Looks up a localized string similar to The specified target is not a valid Uri target.
</summary>
        </member>
        <member name="P:SharpSvnStrings.TheTargetIsNotAValidUriOrPathTarget">
            <summary>
  Looks up a localized string similar to The specified target is not a value Uri or Path target.
</summary>
        </member>
        <member name="P:SharpSvnStrings.TheTargetIsNotAValidPathTarget">
            <summary>
  Looks up a localized string similar to The specified target is not a valid Path target.
</summary>
        </member>
        <member name="P:SharpSvnStrings.SvnClientOperationInProgress">
            <summary>
  Looks up a localized string similar to Svn operation in progress; an SvnClient instance can handle only one command at a time.
</summary>
        </member>
        <member name="P:SharpSvnStrings.SvnAuthManagedPlaceholder">
            <summary>
  Looks up a localized string similar to This function is not available from managed code. .
</summary>
        </member>
        <member name="P:SharpSvnStrings.RevisionTypeMustBeHeadDateOrSpecific">
            <summary>
  Looks up a localized string similar to Revision type must be head, date or a specific revision number.
</summary>
        </member>
        <member name="P:SharpSvnStrings.RevisionNumberMustBeAtLeast0">
            <summary>
  Looks up a localized string similar to Revision number must be at least 0.
</summary>
        </member>
        <member name="P:SharpSvnStrings.PathCountDoesNotMatchRevisions">
            <summary>
  Looks up a localized string similar to The number of elements in the paths collection does not match the number in revisions.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyXUnlocked">
            <summary>
  Looks up a localized string similar to '{0}' unlocked..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyXLockedByUserY">
            <summary>
  Looks up a localized string similar to '{0}' locked by user '{1}'..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyUpdatedToRevisionX">
            <summary>
  Looks up a localized string similar to Updated to revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyUpdatedExternalToRevisionX">
            <summary>
  Looks up a localized string similar to Updated external to revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyTransmittingFileData">
            <summary>
  Looks up a localized string similar to Transmitting file data.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyStatusAgainstRevisionX">
            <summary>
  Looks up a localized string similar to Status against revision: {0}.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifySkippedMissingX">
            <summary>
  Looks up a localized string similar to Skipped missing '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifySkippedMissingTargetX">
            <summary>
  Looks up a localized string similar to Skipped missing target '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyRevertedX">
            <summary>
  Looks up a localized string similar to Reverted '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyReverseMergingRXToRYIntoZ">
            <summary>
  Looks up a localized string similar to --- Reverse-merging r{0} through r{1} into '{2}':.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyReverseMergingRXIntoY">
            <summary>
  Looks up a localized string similar to --- Reverse-merging r{0} into '{1}':.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyRestoredX">
            <summary>
  Looks up a localized string similar to Restored '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyResolvedConflictedStateOfX">
            <summary>
  Looks up a localized string similar to Resolved conflicted state of '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyPerformingStatusOnExternalItemAtX">
            <summary>
  Looks up a localized string similar to Performing status on external item at '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyPathXIsNowAMemberOfChangeListY">
            <summary>
  Looks up a localized string similar to Path '{0}' is now a member of change list '{1}'..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyPathXIsNoLongerAMemberOfAChangeList">
            <summary>
  Looks up a localized string similar to Path '{0}' is no longer a member of a change list..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyMergingRXToRYIntoZ">
            <summary>
  Looks up a localized string similar to --- Merging r{0} through r{1} into '{2}':.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyMergingRXIntoY">
            <summary>
  Looks up a localized string similar to --- Merging r{0} into '{1}':.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyMergingDifferencesBetweenRepositoryUrlsIntoX">
            <summary>
  Looks up a localized string similar to --- Merging differences between repository URLs into '{0}':.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyFetchExternalItemIntoX">
            <summary>
  Looks up a localized string similar to Fetching external item into '{0}'.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyFailedToRevertX">
            <summary>
  Looks up a localized string similar to Failed to revert '{0}' -- try updating instead.
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyExternalAtRevisionX">
            <summary>
  Looks up a localized string similar to External at revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyExportedRevisionX">
            <summary>
  Looks up a localized string similar to Exported revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyExportedExternalAtRevisionX">
            <summary>
  Looks up a localized string similar to Exported external at revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyCheckedOutRevisionX">
            <summary>
  Looks up a localized string similar to Checked out revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyCheckedOutExternalAtRevisionX">
            <summary>
  Looks up a localized string similar to Checked out external at revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NotifyAtRevisionX">
            <summary>
  Looks up a localized string similar to At revision {0}..
</summary>
        </member>
        <member name="P:SharpSvnStrings.NonUtf8ConvertableLine">
            <summary>
  Looks up a localized string similar to {This line does not contain non-Utf8 characters}.
</summary>
        </member>
        <member name="P:SharpSvnStrings.LoadingMimeTypesMapFileFailed">
            <summary>
  Looks up a localized string similar to The loading of the subversion mime mapping file failed.
</summary>
        </member>
        <member name="P:SharpSvnStrings.ItemInListIsNull">
            <summary>
  Looks up a localized string similar to One or more items in the list are null.
</summary>
        </member>
        <member name="P:SharpSvnStrings.IOThreadBlocked">
            <summary>
  Looks up a localized string similar to The IO Thread Blocked -- Do you have a deadlock?.
</summary>
        </member>
        <member name="P:SharpSvnStrings.InvalidUri">
            <summary>
  Looks up a localized string similar to Invalid Uri string.
</summary>
        </member>
        <member name="P:SharpSvnStrings.InvalidSvnRevisionTypeValue">
            <summary>
  Looks up a localized string similar to Invalid SvnRevisionType value specified.
</summary>
        </member>
        <member name="P:SharpSvnStrings.InvalidCharacterInClientName">
            <summary>
  Looks up a localized string similar to Invalid character in client name.
</summary>
        </member>
        <member name="P:SharpSvnStrings.HandlerIsNotRegisteredAtThisTime">
            <summary>
  Looks up a localized string similar to The handler is not registered at this time.
</summary>
        </member>
        <member name="P:SharpSvnStrings.DepthMustBeRecursiveValue">
            <summary>
  Looks up a localized string similar to Depth must be Empty, Files or Infinity in 1.4 compatible compilation.
</summary>
        </member>
        <member name="P:SharpSvnStrings.CollectionMustContainAtLeastOneItem">
            <summary>
  Looks up a localized string similar to The collection must at least contain one item.
</summary>
        </member>
        <member name="P:SharpSvnStrings.ArgumentMustBeAValidRepositoryUri">
            <summary>
  Looks up a localized string similar to The argument must be a valid absolute repository Uri.
</summary>
        </member>
        <member name="P:SharpSvnStrings.ArgumentMustBeAPathNotAUri">
            <summary>
  Looks up a localized string similar to This argument is not a valid path. A Uri was specified.
</summary>
        </member>
        <member name="P:SharpSvnStrings.AllUrisMustBeOnTheSameServer">
            <summary>
  Looks up a localized string similar to All provided Uri's must be on the same server.
</summary>
        </member>
        <member name="P:SharpSvnStrings.AllTargetsMustBeUriOrPath">
            <summary>
  Looks up a localized string similar to All targets must either be Uri or Path.
</summary>
        </member>
        <member name="P:SharpSvnStrings.Culture">
            <summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
        </member>
        <member name="P:SharpSvnStrings.ResourceManager">
            <summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
        </member>
        <member name="T:SharpSvnStrings">
            <summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
        </member>
        <member name="M:svn_fs_print_modules(svn_stringbuf_t*,apr_pool_t*)">
@} 
 Append a textual list of all available FS modules to the stringbuf
 @a output.

 @since New in 1.2.

</member>
        <member name="M:svn_fs_get_locks(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*,svn_lock_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
Report locks on or below @a path in @a fs using the @a
 * get_locks_func / @a get_locks_baton.  Use @a pool for necessary
 * allocations.
 *
 * If the @a get_locks_func callback implementation returns an error,
 * lock iteration will terminate and that error will be returned by
 * this function.

</member>
        <member name="D:svn_fs_get_locks_callback_t">
The type of a lock discovery callback function.  @a baton is the
 * value specified in the call to svn_fs_get_locks(); the filesystem
 * passes it through to the callback.  @a lock is a lock structure.
 * @a pool is a temporary subpool for use by the callback
 * implementation -- it is cleared after invocation of the callback.

</member>
        <member name="M:svn_fs_get_lock(svn_lock_t**,svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
If @a path is locked in @a fs, set @a *lock to an svn_lock_t which
 *  represents the lock, allocated in @a pool.
 *
 * If @a path is not locked, set @a *lock to NULL.

</member>
        <member name="M:svn_fs_unlock(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Remove the lock on @a path represented by @a token in @a fs.
 *
 * If @a token doesn't point to a lock, return @c SVN_ERR_FS_BAD_LOCK_TOKEN.
 * If @a token points to an expired lock, return @c SVN_ERR_FS_LOCK_EXPIRED.
 * If @a fs has no username associated with it, return @c SVN_ERR_FS_NO_USER
 * unless @a break_lock is specified.
 *
 * If @a token points to a lock, but the username of @a fs's access
 * context doesn't match the lock's owner, return @c
 * SVN_ERR_FS_LOCK_OWNER_MISMATCH.  If @a break_lock is TRUE, however, don't
 * return error;  allow the lock to be "broken" in any case.  In the latter
 * case, @a token shall be @c NULL.
 *
 * Use @a pool for temporary allocations.

</member>
        <member name="M:svn_fs_generate_lock_token(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_t*,apr_pool_t*)">
Generate a unique lock-token using @a fs. Return in @a *token,
 * allocated in @a pool.
 *
 * This can be used in to populate lock-&gt;token before calling
 * svn_fs_attach_lock().

</member>
        <member name="M:svn_fs_lock(svn_lock_t**,svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int64,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,apr_pool_t*)">
@defgroup svn_fs_locks Filesystem locks
 * @{
 * @since New in 1.2. 
A lock represents one user's exclusive right to modify a path in a
 * filesystem.  In order to create or destroy a lock, a username must
 * be associated with the filesystem's access context (see @c
 * svn_fs_access_t).
 *
 * When a lock is created, a 'lock-token' is returned.  The lock-token
 * is a unique URI that represents the lock (treated as an opaque
 * string by the client), and is required to make further use of the
 * lock (including removal of the lock.)  A lock-token can also be
 * queried to return a svn_lock_t structure that describes the details
 * of the lock.
 *
 * Locks are not secret; anyone can view existing locks in a
 * filesystem.  Locks are not omnipotent: they can broken and stolen
 * by people who don't "own" the lock.  (Though admins can tailor a
 * custom break/steal policy via libsvn_repos pre-lock hook script.)
 *
 * Locks can be created with an optional expiration date.  If a lock
 * has an expiration date, then the act of fetching/reading it might
 * cause it to automatically expire, returning either nothing or an
 * expiration error (depending on the API).

Lock @a path in @a fs, and set @a *lock to a lock
 * representing the new lock, allocated in @a pool.
 *
 * @warning You may prefer to use svn_repos_fs_lock() instead,
 * which see.
 *
 * @a fs must have a username associated with it (see @c
 * svn_fs_access_t), else return @c SVN_ERR_FS_NO_USER.  Set the
 * 'owner' field in the new lock to the fs username.
 *
 * @a comment is optional: it's either an xml-escapable UTF8 string
 * which describes the lock, or it is @c NULL.
 *
 * @a is_dav_comment describes whether the comment was created by a
 * generic DAV client; only mod_dav_svn's autoversioning feature needs
 * to use it.  If in doubt, pass 0.
 *
 * If path is already locked, then return @c SVN_ERR_FS_PATH_ALREADY_LOCKED,
 * unless @a steal_lock is TRUE, in which case "steal" the existing
 * lock, even if the FS access-context's username does not match the
 * current lock's owner: delete the existing lock on @a path, and
 * create a new one.
 *
 * @a token is a lock token such as can be generated using
 * svn_fs_generate_lock_token() (indicating that the caller wants to
 * dictate the lock token used), or it is @c NULL (indicating that the
 * caller wishes to have a new token generated by this function).  If
 * @a token is not @c NULL, and represents an existing lock, then @a
 * path must match the path associated with that existing lock.
 *
 * If @a expiration_date is zero, then create a non-expiring lock.
 * Else, the lock will expire at @a expiration_date.
 *
 * If @a current_rev is a valid revnum, then do an out-of-dateness
 * check.  If the revnum is less than the last-changed-revision of @a
 * path (or if @a path doesn't exist in HEAD), return @c
 * SVN_ERR_FS_OUT_OF_DATE.
 *
 * @note At this time, only files can be locked.

</member>
        <member name="M:svn_fs_set_uuid(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
If not @c NULL, associate @a *uuid with @a fs.  Otherwise (if @a
 * uuid is @c NULL), generate a new UUID for @a fs.  Use @a pool for
 * any scratchwork.

</member>
        <member name="M:svn_fs_get_uuid(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Populate @a *uuid with the UUID associated with @a fs.  Allocate
    @a *uuid in @a pool.  
</member>
        <member name="M:svn_fs_get_file_delta_stream(svn_txdelta_stream_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *stream_p to a pointer to a delta stream that will turn the
 * contents of the file @a source into the contents of the file @a target.
 * If @a source_root is zero, use a file with zero length as the source.
 *
 * This function does not compare the two files' properties.
 *
 * Allocate @a *stream_p, and do any necessary temporary allocation, in
 * @a pool.

</member>
        <member name="M:svn_fs_change_rev_prop(svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Change a revision's property's value, or add/delete a property.
 *
 * - @a fs is a filesystem, and @a rev is the revision in that filesystem
 *   whose property should change.
 * - @a name is the name of the property to change.
 * - @a value is the new value of the property, or zero if the property should
 *   be removed altogether.
 *
 * Note that revision properties are non-historied --- you can change
 * them after the revision has been committed.  They are not protected
 * via transactions.
 *
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_revision_proplist(apr_hash_t**,svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Set @a *table_p to the entire property list of revision @a rev in
 * filesystem @a fs, as an APR hash table allocated in @a pool.  The table
 * maps <tt>char *</tt> property names to @c svn_string_t * values; the names
 * and values are allocated in @a pool.

</member>
        <member name="M:svn_fs_revision_prop(svn_string_t**,svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *value_p to the value of the property named @a propname on
 * revision @a rev in the filesystem @a fs.  If @a rev has no property by
 * that name, set @a *value_p to zero.  Allocate the result in @a pool.

</member>
        <member name="M:svn_fs_deltify_revision(svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Deltify predecessors of paths modified in @a revision in
 * filesystem @a fs.  Use @a pool for all allocations.
 *
 * @note This can be a time-consuming process, depending the breadth
 * of the changes made in @a revision, and the depth of the history of
 * those changed paths.

</member>
        <member name="M:svn_fs_youngest_rev(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_fs_t*,apr_pool_t*)">
Set @a *youngest_p to the number of the youngest revision in filesystem
 * @a fs.  Use @a pool for all temporary allocation.
 *
 * The oldest revision in any filesystem is numbered zero.

</member>
        <member name="M:svn_fs_contents_changed(System.Int32*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Check if the contents of two root/path combos have changed.
 *
 * Set @a *changed_p to 1 if the contents at @a path1 under @a root1 differ
 * from those at @a path2 under @a root2, or set it to 0 if they are the
 * same.  Both paths must exist under their respective roots, and both
 * roots must be in the same filesystem.

</member>
        <member name="M:svn_fs_apply_text(svn_stream_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Write data directly to the file @a path in @a root.  @a root must be the
 * root of a transaction, not a revision.
 *
 * Set @a *contents_p to a stream ready to receive full textual data.
 * When the caller closes this stream, the data replaces the previous
 * contents of the file.  The caller must write all file data and close
 * the stream before making further changes to the transaction.
 *
 * If @a path does not exist in @a root, return an error.  (You cannot use
 * this routine to create new files;  use svn_fs_make_file() to create
 * an empty file first.)
 *
 * @a result_checksum is the hex MD5 digest for the final fulltext
 * written to the stream.  It is ignored if NULL, but if not null, it
 * must match the checksum of the result; if it does not, then the @a
 * *contents_p call which detects the mismatch will return the error
 * @c SVN_ERR_CHECKSUM_MISMATCH.
 *
 * Do any necessary temporary allocation in @a pool.
 *
 * ### This is like svn_fs_apply_textdelta(), but takes the text
 * straight.  It is currently used only by the loader, see
 * libsvn_repos/load.c.  It should accept a checksum, of course, which
 * would come from an (optional) header in the dump file.  See
 * http://subversion.tigris.org/issues/show_bug.cgi?id=1102 for more.

</member>
        <member name="M:svn_fs_apply_textdelta(=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Apply a text delta to the file @a path in @a root.  @a root must be the
 * root of a transaction, not a revision.
 *
 * Set @a *contents_p to a function ready to receive text delta windows
 * describing how to change the file's contents, relative to its
 * current contents.  Set @a *contents_baton_p to a baton to pass to
 * @a *contents_p.
 *
 * If @a path does not exist in @a root, return an error.  (You cannot use
 * this routine to create new files;  use svn_fs_make_file() to create
 * an empty file first.)
 *
 * @a base_checksum is the hex MD5 digest for the base text against
 * which the delta is to be applied; it is ignored if NULL, and may be
 * ignored even if not NULL.  If it is not ignored, it must match the
 * checksum of the base text against which svndiff data is being
 * applied; if not, svn_fs_apply_textdelta() or the @a *contents_p call
 * which detects the mismatch will return the error
 * @c SVN_ERR_CHECKSUM_MISMATCH (if there is no base text, there may
 * still be an error if @a base_checksum is neither NULL nor the
 * checksum of the empty string).
 *
 * @a result_checksum is the hex MD5 digest for the fulltext that
 * results from this delta application.  It is ignored if NULL, but if
 * not NULL, it must match the checksum of the result; if it does not,
 * then the @a *contents_p call which detects the mismatch will return
 * the error @c SVN_ERR_CHECKSUM_MISMATCH.
 *
 * The caller must send all delta windows including the terminating
 * NULL window to @a *contents_p before making further changes to the
 * transaction.
 *
 * Do temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_make_file(svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create a new file named @a path in @a root.  The file's initial contents
 * are the empty string, and it has no properties.  @a root must be the
 * root of a transaction, not a revision.
 *
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_file_contents(svn_stream_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *contents to a readable generic stream that will yield the
 * contents of the file @a path in @a root.  Allocate the stream in
 * @a pool.  You can only use @a *contents for as long as the underlying
 * filesystem is open.  If @a path is not a file, return
 * @c SVN_ERR_FS_NOT_FILE.
 *
 * If @a root is the root of a transaction, it is possible that the
 * contents of the file @a path will change between calls to
 * svn_fs_file_contents().  In that case, the result of reading from
 * @a *contents is undefined.
 *
 * ### @todo kff: I am worried about lifetime issues with this pool vs
 * the trail created farther down the call stack.  Trace this function
 * to investigate...

</member>
        <member name="M:svn_fs_file_md5_checksum(System.Byte*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Put the MD5 checksum of file @a path into @a digest, which points
 * to @c APR_MD5_DIGESTSIZE bytes of storage.  Use @a pool only for temporary
 * allocations.
 *
 * If the filesystem does not have a prerecorded checksum for @a path,
 * do not calculate a checksum dynamically, just put all 0's into @a
 * digest.  (By convention, the all-zero checksum is considered to
 * match any checksum.)
 *
 * Notes:
 *
 * You might wonder, why do we only provide this interface for file
 * contents, and not for properties or directories?
 *
 * The answer is that property lists and directory entry lists are
 * essentially data structures, not text.  We serialize them for
 * transmission, but there is no guarantee that the consumer will
 * parse them into the same form, or even the same order, as the
 * producer.  It's difficult to find a checksumming method that
 * reaches the same result given such variation in input.  (I suppose
 * we could calculate an independent MD5 sum for each propname and
 * value, and XOR them together; same with directory entry names.
 * Maybe that's the solution?)  Anyway, for now we punt.  The most
 * important data, and the only data that goes through svndiff
 * processing, is file contents, so that's what we provide
 * checksumming for.
 *
 * Internally, of course, the filesystem checksums everything, because
 * it has access to the lowest level storage forms: strings behind
 * representations.

</member>
        <member name="M:svn_fs_file_length(System.Int64*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *length_p to the length of the file @a path in @a root, in bytes.
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_revision_link(svn_fs_root_t*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Like svn_fs_copy(), but doesn't record copy history, and preserves
 * the PATH.  You cannot use svn_fs_copied_from() later to find out
 * where this copy came from.
 *
 * Use svn_fs_revision_link() in situations where you don't care
 * about the copy history, and where @a to_path and @a from_path are
 * the same, because it is cheaper than svn_fs_copy().

</member>
        <member name="M:svn_fs_copy(svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create a copy of @a from_path in @a from_root named @a to_path in
 * @a to_root.  If @a from_path in @a from_root is a directory, copy the
 * tree it refers to recursively.
 *
 * The copy will remember its source; use svn_fs_copied_from() to
 * access this information.
 *
 * @a to_root must be the root of a transaction; @a from_root must be the
 * root of a revision.  (Requiring @a from_root to be the root of a
 * revision makes the implementation trivial: there is no detectable
 * difference (modulo node revision ID's) between copying @a from and
 * simply adding a reference to it.  So the operation takes place in
 * constant time.  However, there's no reason not to extend this to
 * mutable nodes --- it's just more code.)  Further, @a to_root and @a
 * from_root must represent the same filesystem.
 *
 * @note To do a copy without preserving copy history, use
 * svn_fs_revision_link().
 *
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_delete(svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Delete the node named @a path in @a root.  If the node being deleted is
 * a directory, its contents will be deleted recursively.  @a root must be
 * the root of a transaction, not of a revision.  Use @a pool for
 * temporary allocation.
 *
 * This function may be more efficient than making the equivalent
 * series of calls to svn_fs_delete(), because it takes advantage of the
 * fact that, to delete an immutable subtree, shared with some
 * committed revision, you need only remove the directory entry.  The
 * dumb algorithm would recurse into the subtree and end up cloning
 * each non-empty directory it contains, only to delete it later.
 *
 * If return @c SVN_ERR_FS_NO_SUCH_ENTRY, then the basename of @a path is
 * missing from its parent, that is, the final target of the deletion
 * is missing.
 *
 * Attempting to remove the root dir also results in an error,
 * @c SVN_ERR_FS_ROOT_DIR, even if the dir is empty.

</member>
        <member name="M:svn_fs_make_dir(svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create a new directory named @a path in @a root.  The new directory has
 * no entries, and no properties.  @a root must be the root of a transaction,
 * not a revision.
 *
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_dir_entries(apr_hash_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *entries_p to a newly allocated APR hash table containing the
 * entries of the directory at @a path in @a root.  The keys of the table
 * are entry names, as byte strings, excluding the final NULL
 * character; the table's values are pointers to @c svn_fs_dirent_t
 * structures.  Allocate the table and its contents in @a pool.

</member>
        <member name="F:svn_fs_dirent_t.kind">
The node kind. 
</member>
        <member name="F:svn_fs_dirent_t.id">
The node revision ID it names.  
</member>
        <member name="F:svn_fs_dirent_t.name">
The name of this directory entry.  
</member>
        <member name="T:svn_fs_dirent_t">
The type of a Subversion directory entry.  
</member>
        <member name="M:svn_fs_merge(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Merge changes between two nodes into a third node.
 *
 * Given nodes @a source and @a target, and a common ancestor @a ancestor,
 * modify @a target to contain all the changes made between @a ancestor and
 * @a source, as well as the changes made between @a ancestor and @a target.
 * @a target_root must be the root of a transaction, not a revision.
 *
 * @a source, @a target, and @a ancestor are generally directories; this
 * function recursively merges the directories' contents.  If they are
 * files, this function simply returns an error whenever @a source,
 * @a target, and @a ancestor are all distinct node revisions.
 *
 * If there are differences between @a ancestor and @a source that conflict
 * with changes between @a ancestor and @a target, this function returns an
 * @c SVN_ERR_FS_CONFLICT error.
 *
 * If the merge is successful, @a target is left in the merged state, and
 * the base root of @a target's txn is set to the root node of @a source.
 * If an error is returned (whether for conflict or otherwise), @a target
 * is left unaffected.
 *
 * If @a conflict_p is non-NULL, then: a conflict error sets @a *conflict_p
 * to the name of the node in @a target which couldn't be merged,
 * otherwise, success sets @a *conflict_p to NULL.
 *
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_get_mergeinfo(apr_hash_t**,svn_fs_root_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,svn_mergeinfo_inheritance_t,System.Int32,apr_pool_t*)">
Retrieve mergeinfo for multiple nodes.
 *
 * Set @a *minfohash to a hash table allocated in @a pool, and fill it
 * with mergeinfo for each path in @a paths.  Use a string (textual)
 * representation for the mergeinfo.  If there is no mergeinfo, then
 * @a *minfohash is empty (never @c NULL).
 *
 * @a root is revision root to use when looking up paths.
 *
 * @a paths are the paths you are requesting information for.
 *
 * @a inherit indicates whether to retrieve explicit,
 * explicit-or-inherited, or only inherited mergeinfo.
 *
 * If @a include_descendants is TRUE, then additionally return the
 * mergeinfo for any descendant of any element of @a paths which has
 * the @c SVN_PROP_MERGEINFO property explicitly set on it.  (Note
 * that inheritance is only taken into account for the elements in @a
 * paths; descendants of the elements in @a paths which get their
 * mergeinfo via inheritance are not included in @a *mergeoutput.)
 *
 * Do any necessary temporary allocation in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_fs_closest_copy(svn_fs_root_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *root_p and @a *path_p to the revision root and path of the
 * destination of the most recent copy event that caused @a path to
 * exist where it does in @a root, or to NULL if no such copy exists.
 * When non-NULL, allocate @a *root_p and @a *path_p in @a pool.
 *
 * @a *path_p might be a parent of @a path, rather than @a path
 * itself.  However, it will always be the deepest relevant path.
 * That is, if a copy occurs underneath another copy in the same txn,
 * this function makes sure to set @a *path_p to the longest copy
 * destination path that is still a parent of or equal to @a path.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_fs_copied_from(System.Int32!System.Runtime.CompilerServices.IsLong*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Discover a node's copy ancestry, if any.
 *
 * If the node at @a path in @a root was copied from some other node, set
 * @a *rev_p and @a *path_p to the revision and path of the other node,
 * allocating @a *path_p in @a pool.
 *
 * Else if there is no copy ancestry for the node, set @a *rev_p to
 * @c SVN_INVALID_REVNUM and @a *path_p to NULL.
 *
 * If an error is returned, the values of @a *rev_p and @a *path_p are
 * undefined, but otherwise, if one of them is set as described above,
 * you may assume the other is set correspondingly.
 *
 * @a root may be a revision root or a transaction root.
 *
 * Notes:
 *    - Copy ancestry does not descend.  After copying directory D to
 *      E, E will have copy ancestry referring to D, but E's children
 *      may not.  See also svn_fs_copy().
 *
 *    - Copy ancestry *under* a copy is preserved.  That is, if you
 *      copy /A/D/G/pi to /A/D/G/pi2, and then copy /A/D/G to /G, then
 *      /G/pi2 will still have copy ancestry pointing to /A/D/G/pi.
 *      We don't know if this is a feature or a bug yet; if it turns
 *      out to be a bug, then the fix is to make svn_fs_copied_from()
 *      observe the following logic, which currently callers may
 *      choose to follow themselves: if node X has copy history, but
 *      its ancestor A also has copy history, then you may ignore X's
 *      history if X's revision-of-origin is earlier than A's --
 *      because that would mean that X's copy history was preserved in
 *      a copy-under-a-copy scenario.  If X's revision-of-origin is
 *      the same as A's, then it was copied under A during the same
 *      transaction that created A.  (X's revision-of-origin cannot be
 *      greater than A's, if X has copy history.)  @todo See how
 *      people like this, it can always be hidden behind the curtain
 *      if necessary.
 *
 *    - Copy ancestry is not stored as a regular subversion property
 *      because it is not inherited.  Copying foo to bar results in a
 *      revision of bar with copy ancestry; but committing a text
 *      change to bar right after that results in a new revision of
 *      bar without copy ancestry.

</member>
        <member name="M:svn_fs_props_changed(System.Int32*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Determine if the properties of two path/root combinations are different.
 *
 * Set @a *changed_p to 1 if the properties at @a path1 under @a root1 differ
 * from those at @a path2 under @a root2, or set it to 0 if they are the
 * same.  Both paths must exist under their respective roots, and both
 * roots must be in the same filesystem.

</member>
        <member name="M:svn_fs_change_node_prop(svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Change a node's property's value, or add/delete a property.
 *
 * - @a root and @a path indicate the node whose property should change.
 *   @a root must be the root of a transaction, not the root of a revision.
 * - @a name is the name of the property to change.
 * - @a value is the new value of the property, or zero if the property should
 *   be removed altogether.
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_node_proplist(apr_hash_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *table_p to the entire property list of @a path in @a root,
 * as an APR hash table allocated in @a pool.  The resulting table maps
 * property names to pointers to @c svn_string_t objects containing the
 * property value.

</member>
        <member name="M:svn_fs_node_prop(svn_string_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *value_p to the value of the property named @a propname of
 * @a path in @a root.  If the node has no property by that name, set
 * @a *value_p to zero.  Allocate the result in @a pool.

</member>
        <member name="M:svn_fs_node_created_path(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *created_path to the path at which @a path under @a root was
 * created.  Use @a pool for all allocations.  Callers may use this
 * function in conjunction with svn_fs_node_created_rev() to perform a
 * reverse lookup of the mapping of (path, revision) -&gt; node-id that
 * svn_fs_node_id() performs.

</member>
        <member name="M:svn_fs_node_origin_rev(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *revision to the revision in which the line of history
 * represented by @a path under @a root originated.  Use @a pool for
 * any temporary allocations.  If @a root is a transaction root, @a
 * *revision will be set to @c SVN_INVALID_REVNUM for any nodes newly
 * added in that transaction (brand new files or directories created
 * using @c svn_fs_make_dir or @c svn_fs_make_file).
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_fs_node_created_rev(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *revision to the revision in which @a path under @a root was
 * created.  Use @a pool for any temporary allocations.  @a *revision will
 * be set to @c SVN_INVALID_REVNUM for uncommitted nodes (i.e. modified nodes
 * under a transaction root).  Note that the root of an unmodified transaction
 * is not itself considered to be modified; in that case, return the revision
 * upon which the transaction was based.

</member>
        <member name="M:svn_fs_node_id(svn_fs_id_t!System.Runtime.CompilerServices.IsConst**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Get the id of a node.
 *
 * Set @a *id_p to the node revision ID of @a path in @a root, allocated in
 * @a pool.
 *
 * If @a root is the root of a transaction, keep in mind that other
 * changes to the transaction can change which node @a path refers to,
 * and even whether the path exists at all.

</member>
        <member name="M:svn_fs_is_file(System.Int32*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *is_file to @c TRUE iff @a path in @a root is a file.
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_is_dir(System.Int32*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *is_dir to @c TRUE iff @a path in @a root is a directory.
 * Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_history_location(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Int32!System.Runtime.CompilerServices.IsLong*,svn_fs_history_t*,apr_pool_t*)">
Set @a *path and @a *revision to the path and revision,
 * respectively, of the @a history object.  Use @a pool for all
 * allocations.

</member>
        <member name="M:svn_fs_history_prev(svn_fs_history_t**,svn_fs_history_t*,System.Int32,apr_pool_t*)">
Set @a *prev_history_p to an opaque node history object which
 * represents the previous (or "next oldest") interesting history
 * location for the filesystem node represented by @a history, or @c
 * NULL if no such previous history exists.  If @a cross_copies is @c
 * FALSE, also return @c NULL if stepping backwards in history to @a
 * *prev_history_p would cross a filesystem copy operation.
 *
 * @note If this is the first call to svn_fs_history_prev() for the @a
 * history object, it could return a history object whose location is
 * the same as the original.  This will happen if the original
 * location was an interesting one (where the node was modified, or
 * took place in a copy event).  This behavior allows looping callers
 * to avoid the calling svn_fs_history_location() on the object
 * returned by svn_fs_node_history(), and instead go ahead and begin
 * calling svn_fs_history_prev().
 *
 * @note This function uses node-id ancestry alone to determine
 * modifiedness, and therefore does NOT claim that in any of the
 * returned revisions file contents changed, properties changed,
 * directory entries lists changed, etc.
 *
 * @note The revisions returned for @a path will be older than or
 * the same age as the revision of that path in @a root.  That is, if
 * @a root is a revision root based on revision X, and @a path was
 * modified in some revision(s) younger than X, those revisions
 * younger than X will not be included for @a path.  
</member>
        <member name="M:svn_fs_node_history(svn_fs_history_t**,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *history_p to an opaque node history object which
 * represents @a path under @a root.  @a root must be a revision root.
 * Use @a pool for all allocations.

</member>
        <member name="T:svn_fs_history_t">
An opaque node history object. 
</member>
        <member name="M:svn_fs_check_path(svn_node_kind_t*,svn_fs_root_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@} 
Set @a *kind_p to the type of node present at @a path under @a
 * root.  If @a path does not exist under @a root, set @a *kind_p to @c
 * svn_node_none.  Use @a pool for temporary allocation.

</member>
        <member name="M:svn_fs_paths_changed(apr_hash_t**,svn_fs_root_t*,apr_pool_t*)">
Determine what has changed under a @a root.
 *
 * Allocate and return a hash @a *changed_paths_p containing descriptions
 * of the paths changed under @a root.  The hash is keyed with
 * <tt>const char *</tt> paths, and has @c svn_fs_path_change_t * values.
 * Use @c pool for all allocations, including the hash and its values.

</member>
        <member name="F:svn_fs_path_change_t.prop_mod">
were there property mods? 
</member>
        <member name="F:svn_fs_path_change_t.text_mod">
were there text mods? 
</member>
        <member name="F:svn_fs_path_change_t.change_kind">
kind of change 
</member>
        <member name="F:svn_fs_path_change_t.node_rev_id">
node revision id of changed path 
</member>
        <member name="T:svn_fs_path_change_t">
Change descriptor. 
</member>
        <member name="F:svn_fs_path_change_reset">
ignore all previous change items for path (internal-use only) 
</member>
        <member name="F:svn_fs_path_change_replace">
path removed and re-added in txn 
</member>
        <member name="F:svn_fs_path_change_delete">
path removed in txn 
</member>
        <member name="F:svn_fs_path_change_add">
path added in txn 
</member>
        <member name="F:svn_fs_path_change_modify">
default value 
</member>
        <member name="M:svn_fs_revision_root_revision(svn_fs_root_t*)">
If @a root is the root of a revision, return the revision number.
 * Otherwise, return @c SVN_INVALID_REVNUM.

</member>
        <member name="M:svn_fs_txn_root_base_revision(svn_fs_root_t*)">
If @a root is the root of a transaction, return the number of the
 * revision on which is was based when created.  Otherwise, return @c
 * SVN_INVALID_REVNUM.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_fs_txn_root_name(svn_fs_root_t*,apr_pool_t*)">
If @a root is the root of a transaction, return the name of the
 * transaction, allocated in @a pool; otherwise, return NULL.

</member>
        <member name="M:svn_fs_is_revision_root(svn_fs_root_t*)">
Return @c TRUE iff @a root is a revision root.  
</member>
        <member name="M:svn_fs_is_txn_root(svn_fs_root_t*)">
Return @c TRUE iff @a root is a transaction root.  
</member>
        <member name="M:svn_fs_root_fs(svn_fs_root_t*)">
Return the filesystem to which @a root belongs.  
</member>
        <member name="M:svn_fs_close_root(svn_fs_root_t*)">
Free the root directory @a root.  Simply clearing or destroying the
 * pool @a root was allocated in will have the same effect as calling
 * this function.

</member>
        <member name="M:svn_fs_txn_root(svn_fs_root_t**,svn_fs_txn_t*,apr_pool_t*)">
Set @a *root_p to the root directory of @a txn.  Allocate @a *root_p in
 * @a pool.

</member>
        <member name="M:svn_fs_revision_root(svn_fs_root_t**,svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Set @a *root_p to the root directory of revision @a rev in filesystem
 * @a fs.  Allocate @a *root_p in @a pool.

</member>
        <member name="T:svn_fs_root_t">
@} 
Roots.
 *
 * An @c svn_fs_root_t object represents the root directory of some
 * revision or transaction in a filesystem.  To refer to particular
 * node, you provide a root, and a directory path relative that root.
 *
 * @defgroup svn_fs_roots Filesystem roots
 * @{

The Filesystem Root object. 
</member>
        <member name="M:svn_fs_change_txn_props(svn_fs_txn_t*,apr_array_header_t*,apr_pool_t*)">
Change, add, and/or delete transaction property values in
 * transaction @a txn.  @a props is an array of <tt>svn_prop_t</tt>
 * elements.  This is equivalent to calling svn_fs_change_txp_prop
 * multiple times with the @c name and @c value fields of each
 * successive <tt>svn_prop_t</tt>, but may be more efficient.
 * (Properties not mentioned are left alone.)  Do any necessary
 * temporary allocation in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_fs_change_txn_prop(svn_fs_txn_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Change a transactions @a txn's property's value, or add/delete a
 * property.  @a name is the name of the property to change, and @a value
 * is the new value of the property, or zero if the property should be
 * removed altogether.  Do any necessary temporary allocation in @a pool.

</member>
        <member name="M:svn_fs_txn_proplist(apr_hash_t**,svn_fs_txn_t*,apr_pool_t*)">
Set @a *table_p to the entire property list of transaction @a txn, as
 * an APR hash table allocated in @a pool.  The resulting table maps property
 * names to pointers to @c svn_string_t objects containing the property value.

</member>
        <member name="M:svn_fs_txn_prop(svn_string_t**,svn_fs_txn_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *value_p to the value of the property named @a propname on
 * transaction @a txn.  If @a txn has no property by that name, set
 * @a *value_p to zero.  Allocate the result in @a pool.

</member>
        <member name="M:svn_fs_list_transactions(apr_array_header_t**,svn_fs_t*,apr_pool_t*)">
Set @a *names_p to an array of <tt>const char *</tt> ids which are the
 * names of all the currently active transactions in the filesystem @a fs.
 * Allocate the array in @a pool.

</member>
        <member name="M:svn_fs_open_txn(svn_fs_txn_t**,svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Open the transaction named @a name in the filesystem @a fs.  Set @a *txn
 * to the transaction.
 *
 * If there is no such transaction, @c SVN_ERR_FS_NO_SUCH_TRANSACTION is
 * the error returned.
 *
 * Allocate the new transaction in @a pool; when @a pool is freed, the new
 * transaction will be closed (neither committed nor aborted).

</member>
        <member name="M:svn_fs_txn_base_revision(svn_fs_txn_t*)">
Return @a txn's base revision. 
</member>
        <member name="M:svn_fs_txn_name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_txn_t*,apr_pool_t*)">
Set @a *name_p to the name of the transaction @a txn, as a
 * NULL-terminated string.  Allocate the name in @a pool.

</member>
        <member name="M:svn_fs_purge_txn(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Cleanup the dead transaction in @a fs whose ID is @a txn_id.  Use
 * @a pool for all allocations.  If the transaction is not yet dead,
 * the error @c SVN_ERR_FS_TRANSACTION_NOT_DEAD is returned.  (The
 * caller probably forgot to abort the transaction, or the cleanup
 * step of that abort failed for some reason.)

</member>
        <member name="M:svn_fs_abort_txn(svn_fs_txn_t*,apr_pool_t*)">
Abort the transaction @a txn.  Any changes made in @a txn are
 * discarded, and the filesystem is left unchanged.  Use @a pool for
 * any necessary allocations.
 *
 * @note This function first sets the state of @a txn to "dead", and
 * then attempts to purge it and any related data from the filesystem.
 * If some part of the cleanup process fails, @a txn and some portion
 * of its data may remain in the database after this function returns.
 * Use svn_fs_purge_txn() to retry the transaction cleanup.

</member>
        <member name="M:svn_fs_commit_txn(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Int32!System.Runtime.CompilerServices.IsLong*,svn_fs_txn_t*,apr_pool_t*)">
Commit @a txn.
 *
 * @note You usually don't want to call this directly.
 * Instead, call svn_repos_fs_commit_txn(), which honors the
 * repository's hook configurations.
 *
 * If the transaction conflicts with other changes committed to the
 * repository, return an @c SVN_ERR_FS_CONFLICT error.  Otherwise, create
 * a new filesystem revision containing the changes made in @a txn,
 * storing that new revision number in @a *new_rev, and return zero.
 *
 * If @a conflict_p is non-zero, use it to provide details on any
 * conflicts encountered merging @a txn with the most recent committed
 * revisions.  If a conflict occurs, set @a *conflict_p to the path of
 * the conflict in @a txn, with the same lifetime as @a txn;
 * otherwise, set @a *conflict_p to NULL.
 *
 * If the commit succeeds, @a txn is invalid.
 *
 * If the commit fails, @a txn is still valid; you can make more
 * operations to resolve the conflict, or call svn_fs_abort_txn() to
 * abort the transaction.
 *
 * @note Success or failure of the commit of @a txn is determined by
 * examining the value of @a *new_rev upon this function's return.  If
 * the value is a valid revision number, the commit was successful,
 * even though a non-@c NULL function return value may indicate that
 * something else went wrong.

</member>
        <member name="M:svn_fs_begin_txn(svn_fs_txn_t**,svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
 Same as svn_fs_begin_txn2(), but with @a flags set to 0.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_fs_begin_txn2(svn_fs_txn_t**,svn_fs_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32,apr_pool_t*)">
@defgroup svn_fs_begin_txn2_flags Bitmask flags for svn_fs_begin_txn2()
 * @since New in 1.2.
 * @{ 
Do on-the-fly out-of-dateness checks.  That is, an fs routine may
 * throw error if a caller tries to edit an out-of-date item in the
 * transaction.
 *
 * @warning ### Not yet implemented.

Do on-the-fly lock checks.  That is, an fs routine may throw error
 * if a caller tries to edit a locked item without having rights to the lock.

@} 
 Begin a new transaction on the filesystem @a fs, based on existing
 revision @a rev.  Set @a *txn_p to a pointer to the new transaction.
 When committed, this transaction will create a new revision.

 Allocate the new transaction in @a pool; when @a pool is freed, the new
 transaction will be closed (neither committed nor aborted).

 @a flags determines transaction enforcement behaviors, and is composed
 from the constants SVN_FS_TXN_* (@c SVN_FS_TXN_CHECK_OOD etc.).

 @note If you're building a txn for committing, you probably
 don't want to call this directly.  Instead, call
 svn_repos_fs_begin_txn_for_commit(), which honors the
 repository's hook configurations.

 @since New in 1.2.

</member>
        <member name="T:svn_fs_txn_t">
@} 
Filesystem Transactions.
 *
 * To make a change to a Subversion filesystem:
 * - Create a transaction object, using svn_fs_begin_txn().
 * - Call svn_fs_txn_root(), to get the transaction's root directory.
 * - Make whatever changes you like in that tree.
 * - Commit the transaction, using svn_fs_commit_txn().
 *
 * The filesystem implementation guarantees that your commit will
 * either:
 * - succeed completely, so that all of the changes are committed to
 *   create a new revision of the filesystem, or
 * - fail completely, leaving the filesystem unchanged.
 *
 * Until you commit the transaction, any changes you make are
 * invisible.  Only when your commit succeeds do they become visible
 * to the outside world, as a new revision of the filesystem.
 *
 * If you begin a transaction, and then decide you don't want to make
 * the change after all (say, because your net connection with the
 * client disappeared before the change was complete), you can call
 * svn_fs_abort_txn(), to cancel the entire transaction; this
 * leaves the filesystem unchanged.
 *
 * The only way to change the contents of files or directories, or
 * their properties, is by making a transaction and creating a new
 * revision, as described above.  Once a revision has been committed, it
 * never changes again; the filesystem interface provides no means to
 * go back and edit the contents of an old revision.  Once history has
 * been recorded, it is set in stone.  Clients depend on this property
 * to do updates and commits reliably; proxies depend on this property
 * to cache changes accurately; and so on.
 *
 * There are two kinds of nodes in the filesystem: mutable, and
 * immutable.  Revisions in the filesystem consist entirely of
 * immutable nodes, whose contents never change.  A transaction in
 * progress, which the user is still constructing, uses mutable nodes
 * for those nodes which have been changed so far, and refers to
 * immutable nodes from existing revisions for portions of the tree
 * which haven't been changed yet in that transaction.
 *
 * Immutable nodes, as part of revisions, never refer to mutable
 * nodes, which are part of uncommitted transactions.  Mutable nodes
 * may refer to immutable nodes, or other mutable nodes.
 *
 * Note that the terms "immutable" and "mutable" describe whether or
 * not the nodes have been changed as part of a transaction --- not
 * the permissions on the nodes they refer to.  Even if you aren't
 * authorized to modify the filesystem's root directory, you might be
 * authorized to change some descendant of the root; doing so would
 * create a new mutable copy of the root directory.  Mutability refers
 * to the role of the node: part of an existing revision, or part of a
 * new one.  This is independent of your authorization to make changes
 * to a given node.
 *
 * Transactions are actually persistent objects, stored in the
 * database.  You can open a filesystem, begin a transaction, and
 * close the filesystem, and then a separate process could open the
 * filesystem, pick up the same transaction, and continue work on it.
 * When a transaction is successfully committed, it is removed from
 * the database.
 *
 * Every transaction is assigned a name.  You can open a transaction
 * by name, and resume work on it, or find out the name of a
 * transaction you already have open.  You can also list all the
 * transactions currently present in the database.
 *
 * You may assign properties to transactions; these are name/value
 * pairs.  When you commit a transaction, all of its properties become
 * unversioned revision properties of the new revision.  (There is one
 * exception: the svn:date property will be automatically set on new
 * transactions to the date that the transaction was created, and will
 * be overwritten when the transaction is committed by the current
 * time; changes to a transaction's svn:date property will not affect
 * its committed value.)
 *
 * Transaction names are guaranteed to contain only letters (upper-
 * and lower-case), digits, `-', and `.', from the ASCII character
 * set.
 *
 * The Subversion filesystem will make a best effort to not reuse
 * transaction names.  The Berkeley DB backend generates transaction
 * names using a sequence, or a counter, which is stored in the BDB
 * database.  Each new transaction increments the counter.  The
 * current value of the counter is not serialized into a filesystem
 * dump file, so dumping and restoring the repository will reset the
 * sequence and reuse transaction names.  The FSFS backend generates a
 * transaction name using the hostname, process ID and current time in
 * microseconds since 00:00:00 January 1, 1970 UTC.  So it is
 * extremely unlikely that a transaction name will be reused.
 *
 * @defgroup svn_fs_txns Filesystem transactions
 * @{

The type of a Subversion transaction object.  
</member>
        <member name="M:svn_fs_unparse_id(svn_fs_id_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return a Subversion string containing the unparsed form of the
 * node or node revision id @a id.  Allocate the string containing the
 * unparsed form in @a pool.

</member>
        <member name="M:svn_fs_parse_id(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,apr_pool_t*)">
 @note This function is not guaranteed to work with all filesystem
 types.  There is currently no un-deprecated equivalent; contact the
 Subversion developers if you have a need for it.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_fs_check_related(svn_fs_id_t!System.Runtime.CompilerServices.IsConst*,svn_fs_id_t!System.Runtime.CompilerServices.IsConst*)">
Return non-zero IFF the nodes associated with @a id1 and @a id2 are
 * related, else return zero.

</member>
        <member name="M:svn_fs_compare_ids(svn_fs_id_t!System.Runtime.CompilerServices.IsConst*,svn_fs_id_t!System.Runtime.CompilerServices.IsConst*)">
Return -1, 0, or 1 if node revisions @a a and @a b are unrelated,
 * equivalent, or otherwise related (respectively).

</member>
        <member name="T:svn_fs_id_t">
@} 
Filesystem Nodes.
 *
 * In a Subversion filesystem, a `node' corresponds roughly to an
 * `inode' in a Unix filesystem:
 * - A node is either a file or a directory.
 * - A node's contents change over time.
 * - When you change a node's contents, it's still the same node; it's
 *   just been changed.  So a node's identity isn't bound to a specific
 *   set of contents.
 * - If you rename a node, it's still the same node, just under a
 *   different name.  So a node's identity isn't bound to a particular
 *   filename.
 *
 * A `node revision' refers to a node's contents at a specific point in
 * time.  Changing a node's contents always creates a new revision of that
 * node.  Once created, a node revision's contents never change.
 *
 * When we create a node, its initial contents are the initial revision of
 * the node.  As users make changes to the node over time, we create new
 * revisions of that same node.  When a user commits a change that deletes
 * a file from the filesystem, we don't delete the node, or any revision
 * of it --- those stick around to allow us to recreate prior revisions of
 * the filesystem.  Instead, we just remove the reference to the node
 * from the directory.
 *
 * @defgroup svn_fs_nodes Filesystem nodes
 * @{

An object representing a node-id.  
</member>
        <member name="M:svn_fs_access_add_lock_token(svn_fs_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Push a lock-token @a token into the context @a access_ctx.  The
 * context remembers all tokens it receives, and makes them available
 * to fs functions.  The token is not duplicated into @a access_ctx's
 * pool;  make sure the token's lifetime is at least as long as @a
 * access_ctx. 
</member>
        <member name="M:svn_fs_access_get_username(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,svn_fs_access_t*)">
Accessors for the access context: 
Set @a *username to the name represented by @a access_ctx. 
</member>
        <member name="M:svn_fs_get_access(svn_fs_access_t**,svn_fs_t*)">
Set @a *access_ctx to the current @a fs access context, or NULL if
 * there is no current fs access context.

</member>
        <member name="M:svn_fs_set_access(svn_fs_t*,svn_fs_access_t*)">
Associate @a access_ctx with an open @a fs.
 *
 * This function can be run multiple times on the same open
 * filesystem, in order to change the filesystem access context for
 * different filesystem operations.  Pass a NULL value for @a
 * access_ctx to disassociate the current access context from the
 * filesystem.

</member>
        <member name="M:svn_fs_create_access(svn_fs_access_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *access_ctx to a new @c svn_fs_access_t object representing
 *  @a username, allocated in @a pool.  @a username is presumed to
 *  have been authenticated by the caller.

</member>
        <member name="T:svn_fs_access_t">
@} 
@} 
Filesystem Access Contexts.
 *
 * @since New in 1.2.
 *
 * At certain times, filesystem functions need access to temporary
 * user data.  For example, which user is changing a file?  If the
 * file is locked, has an appropriate lock-token been supplied?
 *
 * This temporary user data is stored in an "access context" object,
 * and the access context is then connected to the filesystem object.
 * Whenever a filesystem function requires information, it can pull
 * things out of the context as needed.
 *
 * @defgroup svn_fs_access_ctx Filesystem access contexts
 * @{

An opaque object representing temporary user data. 
</member>
        <member name="M:svn_fs_berkeley_recover(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@deprecated Provided for backward compatibility with the 1.4 API. 
</member>
        <member name="M:svn_fs_hotcopy_berkeley(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
@deprecated Provided for backward compatibility with the 1.0 API. 
</member>
        <member name="M:svn_fs_delete_berkeley(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@deprecated Provided for backward compatibility with the 1.0 API. 
</member>
        <member name="M:svn_fs_berkeley_path(svn_fs_t*,apr_pool_t*)">
@deprecated Provided for backward compatibility with the 1.0 API. 
</member>
        <member name="M:svn_fs_open_berkeley(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@deprecated Provided for backward compatibility with the 1.0 API. 
</member>
        <member name="M:svn_fs_create_berkeley(svn_fs_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@deprecated Provided for backward compatibility with the 1.0 API. 
</member>
        <member name="M:svn_fs_new(apr_hash_t*,apr_pool_t*)">
 The following functions are similar to their generic counterparts.

 In Subversion 1.2 and earlier, they only work on Berkeley DB filesystems.
 In Subversion 1.3 and later, they perform largely as aliases for their
 generic counterparts (with the exception of recover, which only gained
 a generic counterpart in 1.5).

 @defgroup svn_fs_bdb_deprecated Berkeley DB filesystem compatibility
 @{

@deprecated Provided for backward compatibility with the 1.0 API. 
</member>
        <member name="M:svn_fs_berkeley_logfiles(apr_array_header_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Set @a *logfiles to an array of <tt>const char *</tt> log file names
 * of Berkeley DB-based Subversion filesystem.
 *
 * If @a only_unused is @c TRUE, set @a *logfiles to an array which
 * contains only the names of Berkeley DB log files no longer in use
 * by the filesystem.  Otherwise, all log files (used and unused) are
 * returned.

 * This function wraps the Berkeley DB 'log_archive' function
 * called by the db_archive binary.  Repository administrators may
 * want to run this function periodically and delete the unused log
 * files, as a way of reclaiming disk space.

</member>
        <member name="M:svn_fs_set_berkeley_errcall(svn_fs_t*,=FUNC:System.Void(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*))">
Subversion filesystems based on Berkeley DB.
 *
 * The following functions are specific to Berkeley DB filesystems.
 *
 * @defgroup svn_fs_bdb Berkeley DB filesystems
 * @{

Register an error handling function for Berkeley DB error messages.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 *
 * Despite being first declared deprecated in Subversion 1.3, this API
 * is redundant in versions 1.1 and 1.2 as well.
 *
 * Berkeley DB's error codes are seldom sufficiently informative to allow
 * adequate troubleshooting.  Berkeley DB provides extra messages through
 * a callback function - if an error occurs, the @a handler will be called
 * with two strings: an error message prefix, which will be zero, and
 * an error message.  @a handler might print it out, log it somewhere,
 * etc.
 *
 * Subversion 1.1 and later install their own handler internally, and
 * wrap the messages from Berkeley DB into the standard svn_error_t object,
 * making any information gained through this interface redundant.
 *
 * It is only worth using this function if your program will be used
 * with Subversion 1.0.
 *
 * This function connects to the Berkeley DB @c DBENV-&gt;set_errcall interface.
 * Since that interface supports only a single callback, Subversion's internal
 * callback is registered with Berkeley DB, and will forward notifications to
 * a user provided callback after performing its own processing.

</member>
        <member name="M:svn_fs_recover(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
Perform any necessary non-catastrophic recovery on the Subversion
 * filesystem located at @a path.
 *
 * If @a cancel_func is not @c NULL, it is called periodically with
 * @a cancel_baton as argument to see if the client wishes to cancel
 * recovery.  BDB filesystems do not currently support cancellation.
 *
 * Do any necessary allocation within @a pool.
 *
 * For FSFS filesystems, recovery is currently limited to recreating
 * the db/current file, and does not require exclusive access.
 *
 * For BDB filesystems, recovery requires exclusive access, and is
 * described in detail below.
 *
 * After an unexpected server exit, due to a server crash or a system
 * crash, a Subversion filesystem based on Berkeley DB needs to run
 * recovery procedures to bring the database back into a consistent
 * state and release any locks that were held by the deceased process.
 * The recovery procedures require exclusive access to the database
 * --- while they execute, no other process or thread may access the
 * database.
 *
 * In a server with multiple worker processes, like Apache, if a
 * worker process accessing the filesystem dies, you must stop the
 * other worker processes, and run recovery.  Then, the other worker
 * processes can re-open the database and resume work.
 *
 * If the server exited cleanly, there is no need to run recovery, but
 * there is no harm in it, either, and it take very little time.  So
 * it's a fine idea to run recovery when the server process starts,
 * before it begins handling any requests.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_fs_hotcopy(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
 Copy a possibly live Subversion filesystem from @a src_path to
 @a dest_path.  If @a clean is @c TRUE, perform cleanup on the
 source filesystem as part of the copy operation; currently, this
 means deleting copied, unused logfiles for a Berkeley DB source
 filesystem.

 @since New in 1.1.

</member>
        <member name="M:svn_fs_delete_fs(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Delete the filesystem at @a path.

 @since New in 1.1.

</member>
        <member name="M:svn_fs_path(svn_fs_t*,apr_pool_t*)">
 Return the path to @a fs's repository, allocated in @a pool.
 @note This is just what was passed to svn_fs_create() or
 svn_fs_open() -- might be absolute, might not.

 @since New in 1.1.

</member>
        <member name="M:svn_fs_type(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return, in @a *fs_type, a string identifying the back-end type of
 the Subversion filesystem located in @a path.  Allocate @a *fs_type
 in @a pool.

 The string should be equal to one of the @c SVN_FS_TYPE_* defined
 constants, unless the filesystem is a new back-end type added in
 a later version of Subversion.

 In general, the type should make no difference in the filesystem's
 semantics, but there are a few situations (such as backups) where
 it might matter.

 @since New in 1.3.

</member>
        <member name="M:svn_fs_upgrade(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Upgrade the Subversion filesystem located in the directory @a path
 to the latest version supported by this library.  Return @c
 SVN_ERR_FS_UNSUPPORTED_UPGRADE and make no changes to the
 filesystem if the requested upgrade is not supported.  Use @a pool
 for necessary allocations.

 @note You probably don't want to use this directly.  Take a look at
 svn_repos_upgrade() instead.

 @since New in 1.5.

</member>
        <member name="M:svn_fs_open(svn_fs_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,apr_pool_t*)">
 Open a Subversion filesystem located in the directory @a path, and
 return a pointer to it in @a *fs_p.  If @a fs_config is not @c
 NULL, the options it contains modify the behavior of the
 filesystem.  The interpretation of @a fs_config is specific to the
 filesystem back-end.  The opened filesystem may be closed by
 destroying @a pool.

 @note The lifetime of @a fs_config must not be shorter than @a
 pool's. It's a good idea to allocate @a fs_config from @a pool or
 one of its ancestors.

 Only one thread may operate on any given filesystem object at once.
 Two threads may access the same filesystem simultaneously only if
 they open separate filesystem objects.

 @note You probably don't want to use this directly.  Take a look at
 svn_repos_open() instead.

 @since New in 1.1.

</member>
        <member name="M:svn_fs_create(svn_fs_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,apr_pool_t*)">
 Create a new, empty Subversion filesystem, stored in the directory
 @a path, and return a pointer to it in @a *fs_p.  @a path must not
 currently exist, but its parent must exist.  If @a fs_config is not
 @c NULL, the options it contains modify the behavior of the
 filesystem.  The interpretation of @a fs_config is specific to the
 filesystem back-end.  The new filesystem may be closed by
 destroying @a pool.

 @note The lifetime of @a fs_config must not be shorter than @a
 pool's. It's a good idea to allocate @a fs_config from @a pool or
 one of its ancestors.

 If @a fs_config contains a value for @c SVN_FS_CONFIG_FS_TYPE, that
 value determines the filesystem type for the new filesystem.
 Currently defined values are:

   SVN_FS_TYPE_BDB   Berkeley-DB implementation
   SVN_FS_TYPE_FSFS  Native-filesystem implementation

 If @a fs_config is @c NULL or does not contain a value for
 @c SVN_FS_CONFIG_FS_TYPE then the default filesystem type will be used.
 This will typically be BDB for version 1.1 and FSFS for later versions,
 though the caller should not rely upon any particular default if they
 wish to ensure that a filesystem of a specific type is created.

 @since New in 1.1.

</member>
        <member name="M:svn_fs_set_warning_func(svn_fs_t*,=FUNC:System.Void(System.Void*,svn_error_t*),System.Void*)">
Provide a callback function, @a warning, that @a fs should use to
 * report (non-fatal) errors.  To print an error, the filesystem will call
 * @a warning, passing it @a warning_baton and the error.
 *
 * By default, this is set to a function that will crash the process.
 * Dumping to @c stderr or <tt>/dev/tty</tt> is not acceptable default
 * behavior for server processes, since those may both be equivalent to
 * <tt>/dev/null</tt>.

</member>
        <member name="D:svn_fs_warning_callback_t">
The type of a warning callback function.  @a baton is the value specified
 * in the call to svn_fs_set_warning_func(); the filesystem passes it through
 * to the callback.  @a err contains the warning message.
 *
 * The callback function should not clear the error that is passed to it;
 * its caller should do that.

</member>
        <member name="M:svn_fs_initialize(apr_pool_t*)">
@name Filesystem configuration options
@{

@since New in 1.1. 
@since New in 1.1. 
@since New in 1.1. 
Create repository format compatible with Subversion versions
 * earlier than 1.4.
 *
 *  @since New in 1.4.

Create repository format compatible with Subversion versions
 * earlier than 1.5.
 *
 * @since New in 1.5.

@} 
 Callers should invoke this function to initialize global state in
 the FS library before creating FS objects.  If this function is
 invoked, no FS objects may be created in another thread at the same
 time as this invocation, and the provided @a pool must last longer
 than any FS object created subsequently.

 If this function is not called, the FS library will make a best
 effort to bootstrap a mutex for protecting data common to FS
 objects; however, there is a small window of failure.  Also, a
 small amount of data will be leaked if the Subversion FS library is
 dynamically unloaded, and using the bdb FS can potentially segfault
 or invoke other undefined behavior if this function is not called
 with an appropriate pool (such as the pool the module was loaded into)
 when loaded dynamically.

 If this function is called multiple times before the pool passed to
 the first call is destroyed or cleared, the later calls will have
 no effect.

 @since New in 1.2.

</member>
        <member name="T:svn_fs_t">
@defgroup fs_handling Filesystem interaction subsystem
@{

An object representing a Subversion filesystem.  
</member>
        <member name="M:svn_fs_version">
 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_fs.h
 @brief Interface to the Subversion filesystem.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_delta.h
 @brief Delta-parsing

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_io.h
 @brief General file I/O for Subversion

 @copyright
 ====================================================================
 Copyright (c) 2006-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_mergeinfo.h
 @brief mergeinfo handling and processing

 Get libsvn_fs version information.

 @since New in 1.1.

</member>
        <member name="M:svn_diff_mem_string_output_merge(svn_stream_t*,svn_diff_t*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
Output the @a diff generated by svn_diff_mem_string_diff3() in diff3
 * format on @a output_stream, using @a original, @a modified and @a latest
 * for content changes.
 *
 * Use the conflict markers @a conflict_original, @a conflict_modified,
 * @a conflict_latest and @a conflict_separator or the default one for
 * each of these if @c NULL is passed.
 *
 * Insert the original in the output if @a display_original_in_conflict
 * is @c TRUE.
 *
 * @note @a display_original_in_conflict and @a display_resolved_conflicts
 *       are mutually exclusive.

</member>
        <member name="M:svn_diff_mem_string_output_unified(svn_stream_t*,svn_diff_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Outputs the @a diff object generated by svn_diff_mem_string_diff()
 * in unified diff format on @a output_stream, using @a original
 * and @a modified for the text in the output.
 * Outputs the header and markers in @a header_encoding.
 *
 * @a original_header and @a modified header are
 * used to fill the field after the "---" and "+++" header markers.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_diff_mem_string_diff4(svn_diff_t**,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_diff_file_options_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Generate @a diff output from the @a original, @a modified and @a latest
 * in-memory strings, using @a ancestor.  @a diff will be allocated in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_diff_mem_string_diff3(svn_diff_t**,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_diff_file_options_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Generate @a diff output from the @a orginal, @a modified and @a latest
 * in-memory strings.  @a diff will be allocated in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_diff_mem_string_diff(svn_diff_t**,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_diff_file_options_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Generate @a diff output from the @a original and @a modified
 * in-memory strings.  @a diff will be allocated from @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_diff_file_output_merge(svn_stream_t*,svn_diff_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.">
A convenience function to produce diff3 output from the
 * diff generated by svn_diff_file_diff3().
 *
 * Output a @a diff between @a original_path, @a modified_path and
 * @a latest_path in merged format to @a output_stream.  Optionally supply
 * @a conflict_modified, @a conflict_original, @a conflict_separator and/or
 * @a conflict_latest to be displayed as conflict markers in the output.
 * If @a conflict_original, @a conflict_modified, @a conflict_latest and/or
 * @a conflict_separator is @c NULL, a default marker will be displayed.
 * Set @a display_original_in_conflict and @a display_resolved_conflicts
 * as desired.  Note that these options are mutually exclusive.

</member>
        <member name="M:svn_diff_file_output_unified(svn_stream_t*,svn_diff_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_diff_file_output_unified2(), but with @a header_encoding
 * set to @c APR_LOCALE_CHARSET.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.

</member>
        <member name="M:svn_diff_file_output_unified2(svn_stream_t*,svn_diff_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_diff_file_output_unified3(), but with @a relative_to_dir
 * set to NULL and @a show_c_function to false.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_diff_file_output_unified3(svn_stream_t*,svn_diff_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
A convenience function to produce unified diff output from the
 * diff generated by svn_diff_file_diff().
 *
 * @since New in 1.5.
 *
 * Output a @a diff between @a original_path and @a modified_path in unified
 * context diff format to @a output_stream.  Optionally supply
 * @a original_header and/or @a modified_header to be displayed in the header
 * of the output.  If @a original_header or @a modified_header is @c NULL, a
 * default header will be displayed, consisting of path and last modified time.
 * Output all headers and markers in @a header_encoding.  If @a relative_to_dir
 * is not @c NULL, the @a original_path and @a modified_path will have the
 * @a relative_to_dir stripped from the front of the respective paths.  If
 * @a relative_to_dir is @c NULL, paths will be not be modified.  If
 * @a relative_to_dir is not @c NULL but @a relative_to_dir is not a parent
 * path of the target, an error is returned. Finally, if @a relative_to_dir
 * is a URL, an error will be returned.

</member>
        <member name="M:svn_diff_file_diff4(svn_diff_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Simliar to svn_file_diff4_2(), but with @a options set to a struct with
 * default options.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_diff_file_diff4_2(svn_diff_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_diff_file_options_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
A convenience function to produce a diff between four files.
 *
 * @since New in 1.4.
 *
 * Return a diff object in @a *diff (allocated from @a pool) that represents
 * the difference between an @a original file, @a modified file, @a latest
 * and @a ancestor file. (The file arguments must be full paths to the files.)
 *
 * Compare lines according to the relevant fields of @a options.

</member>
        <member name="M:svn_diff_file_diff3(svn_diff_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_diff_file_diff3_2(), but with @a options set to a struct
 * with default options.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_diff_file_diff3_2(svn_diff_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_diff_file_options_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
A convenience function to produce a diff between three files.
 *
 * @since New in 1.4.
 *
 * Return a diff object in @a *diff (allocated from @a pool) that represents
 * the difference between an @a original file, @a modified file, and @a latest
 * file.
 *
 * Compare lines according to the relevant fields of @a options.

</member>
        <member name="M:svn_diff_file_diff(svn_diff_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_file_diff_2(), but with @a options set to a struct with
 * default options.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_diff_file_diff_2(svn_diff_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_diff_file_options_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
A convenience function to produce a diff between two files.
 *
 * @since New in 1.4.
 *
 * Return a diff object in @a *diff (allocated from @a pool) that represents
 * the difference between an @a original file and @a modified file.
 * (The file arguments must be full paths to the files.)
 *
 * Compare lines according to the relevant fields of @a options.

</member>
        <member name="M:svn_diff_file_options_parse(svn_diff_file_options_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Parse @a args, an array of <tt>const char *</tt> command line switches
 and adjust @a options accordingly.  @a options is assumed to be initialized
 with default values.  @a pool is used for temporary allocation.

 @since New in 1.4.

 The following options are supported:
 - --ignore-space-change, -b
 - --ignore-all-space, -w
 - --ignore-eol-style
 - --unified, -u (for compatibility, does nothing).

</member>
        <member name="M:svn_diff_file_options_create(apr_pool_t*)">
Allocate a @c svn_diff_file_options_t structure in @a pool, initializing
 * it with default values.
 *
 * @since New in 1.4.

</member>
        <member name="F:svn_diff_file_options_t.show_c_function">
Whether the '@@' lines of the unified diff output should include a prefix
    * of the nearest preceding line that starts with a character that might be
    * the initial character of a C language identifier.  The default is
    * @c FALSE.

</member>
        <member name="F:svn_diff_file_options_t.ignore_eol_style">
Whether to treat all end-of-line markers the same when comparing lines.
   * The default is @c FALSE. 
</member>
        <member name="F:svn_diff_file_options_t.ignore_space">
To what extent whitespace should be ignored when comparing lines.
   * The default is @c svn_diff_file_ignore_space_none. 
</member>
        <member name="T:svn_diff_file_options_t">
Options to control the behaviour of the file diff routines.
 *
 * @since New in 1.4.
 *
 * @note This structure may be extended in the future, so to preserve binary
 * compatibility, users must not allocate structs of this type themselves.
 * @see svn_diff_file_options_create().
 *
 * @note Although its name suggests otherwise, this structure is used to
 *       pass options to file as well as in-memory diff functions.

</member>
        <member name="T:svn_diff_file_ignore_space_t">
To what extent whitespace should be ignored when comparing lines.
 *
 * @since New in 1.4.

</member>
        <member name="F:svn_diff_file_ignore_space_all">
Ignore all whitespace characters. 
</member>
        <member name="F:svn_diff_file_ignore_space_change">
Ignore changes in sequences of whitespace characters, treating each
   * sequence of whitespace characters as a single space. 
</member>
        <member name="F:svn_diff_file_ignore_space_none">
Ignore no whitespace. 
</member>
        <member name="M:svn_diff_output(svn_diff_t*,System.Void*,svn_diff_output_fns_t!System.Runtime.CompilerServices.IsConst*)">
Given a vtable of @a output_fns/@a output_baton for consuming
 * differences, output the differences in @a diff.

</member>
        <member name="F:svn_diff_output_fns_t.output_conflict">
All three datasources have conflicting data ranges.  The range
   * @a latest_start, @a latest_length in the "latest" datasource conflicts
   * with the range @a original_start, @a original_length in the "original"
   * datasource, and also conflicts with the range @a modified_start,
   * @a modified_length in the "modified" datasource.
   * If there are common ranges in the "modified" and "latest" datasources
   * in this conflicting range, @a resolved_diff will contain a diff
   * which can be used to retrieve the common and conflicting ranges.

</member>
        <member name="F:svn_diff_output_fns_t.output_diff_common">
An identical data range was discovered between the "modified" and
   * "latest" datasources, but this conflicts with a range in the
   * "original" datasource.

</member>
        <member name="F:svn_diff_output_fns_t.output_diff_latest">
An identical data range was discovered between the "original" and
   * "modified" datasources, but this conflicts with a range in the
   * "latest" datasource.

</member>
        <member name="F:svn_diff_output_fns_t.output_diff_modified">
 If doing a two-way diff, then an *conflicting* data range was found
 between the "original" and "modified" datasources.  Specifically,
 the conflict starts at @a original_start and goes for @a original_length
 tokens in the original data, and at @a modified_start for
 @a modified_length tokens in the modified data.

 If doing a three-way diff, then an identical data range was discovered
 between the "original" and "latest" datasources, but this conflicts with
 a range in the "modified" datasource.

</member>
        <member name="F:svn_diff_output_fns_t.output_common">
 If doing a two-way diff, then an *identical* data range was found
 between the "original" and "modified" datasources.  Specifically,
 the match starts at @a original_start and goes for @a original_length
 tokens in the original data, and at @a modified_start for
 @a modified_length tokens in the modified data.

 If doing a three-way diff, then all three datasources have
 matching data ranges.  The range @a latest_start, @a latest_length in
 the "latest" datasource is identical to the range @a original_start,
 @a original_length in the original data, and is also identical to
 the range @a modified_start, @a modified_length in the modified data.

</member>
        <member name="T:svn_diff_output_fns_t">
A vtable for displaying (or consuming) differences between datasources.
 *
 * Differences, similarities, and conflicts are described by lining up
 * "ranges" of data.
 *
 * @note These callbacks describe data ranges in units of "tokens".
 * A "token" is whatever you've defined it to be in your datasource
 * @c svn_diff_fns_t vtable.

</member>
        <member name="M:svn_diff_contains_diffs(svn_diff_t*)">
Determine if a diff object contains actual differences between the
 * datasources.  If so, return @c TRUE, else return @c FALSE.

</member>
        <member name="M:svn_diff_contains_conflicts(svn_diff_t*)">
Determine if a diff object contains conflicts.  If it does, return
 * @c TRUE, else return @c FALSE.

</member>
        <member name="M:svn_diff_diff4(svn_diff_t**,System.Void*,svn_diff_fns_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Given a vtable of @a diff_fns/@a diff_baton for reading datasources,
 * return a diff object in @a *diff that represents a difference between
 * two datasources: "original" and "latest", adjusted to become a full
 * difference between "original", "modified" and "latest" using "ancestor".
 * Do all allocation in @a pool.

</member>
        <member name="M:svn_diff_diff3(svn_diff_t**,System.Void*,svn_diff_fns_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Given a vtable of @a diff_fns/@a diff_baton for reading datasources,
 * return a diff object in @a *diff that represents a difference between
 * three datasources: "original", "modified", and "latest".  Do all
 * allocation in @a pool.

</member>
        <member name="M:svn_diff_diff(svn_diff_t**,System.Void*,svn_diff_fns_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Given a vtable of @a diff_fns/@a diff_baton for reading datasources,
 * return a diff object in @a *diff that represents a difference between
 * an "original" and "modified" datasource.  Do all allocation in @a pool.

</member>
        <member name="F:svn_diff_fns_t.token_discard_all">
Free *all* tokens from memory, they're no longer needed. 
</member>
        <member name="F:svn_diff_fns_t.token_discard">
Free @a token from memory, the diff algorithm is done with it. 
</member>
        <member name="F:svn_diff_fns_t.datasource_get_next_token">
Get the next "token" from the datasource of type @a datasource.
   *  Return a "token" in @a *token.   Return a hash of "token" in @a *hash.
   *  Leave @a token and @a hash untouched when the datasource is exhausted.

</member>
        <member name="F:svn_diff_fns_t.datasource_close">
Close the datasource of type @a datasource. 
</member>
        <member name="F:svn_diff_fns_t.datasource_open">
Open the datasource of type @a datasource. 
</member>
        <member name="T:svn_diff_fns_t">
A vtable for reading data from the three datasources. 
</member>
        <member name="T:svn_diff_datasource_e">
There are four types of datasources.  In GNU diff3 terminology,
the first three types correspond to the phrases "older", "mine",
and "yours".

</member>
        <member name="F:svn_diff_datasource_ancestor">
The common ancestor of original and modified. 
</member>
        <member name="F:svn_diff_datasource_latest">
The latest version of the data, possibly different than the
   * user's modified version.

</member>
        <member name="F:svn_diff_datasource_modified">
The same data, but potentially changed by the user. 
</member>
        <member name="F:svn_diff_datasource_original">
The oldest form of the data. 
</member>
        <member name="T:svn_diff_t">
An opaque type that represents a difference between either two or
 * three datasources.   This object is returned by svn_diff_diff(),
 * svn_diff_diff3() and svn_diff_diff4(), and consumed by a number of
 * other routines.

</member>
        <member name="M:svn_diff_version">
 @copyright
 ====================================================================
 Copyright (c) 2000-2006 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_string.h
 @brief Counted-length strings for Subversion, plus some C string goodies.

 There are two string datatypes: @c svn_string_t and @c svn_stringbuf_t.
 The former is a simple pointer/length pair useful for passing around
 strings (or arbitrary bytes) with a counted length. @c svn_stringbuf_t is
 buffered to enable efficient appending of strings without an allocation
 and copy for each append operation.

 @c svn_string_t contains a <tt>const char *</tt> for its data, so it is
 most appropriate for constant data and for functions which expect constant,
 counted data. Functions should generally use <tt>const @c svn_string_t
 *</tt> as their parameter to indicate they are expecting a constant,
 counted string.

 @c svn_stringbuf_t uses a plain <tt>char *</tt> for its data, so it is
 most appropriate for modifiable data.

 <h3>Invariants</h3>

   1. Null termination:

      Both structures maintain a significant invariant:

         <tt>s-&gt;data[s-&gt;len] == '\\0'</tt>

      The functions defined within this header file will maintain
      the invariant (which does imply that memory is
      allocated/defined as @c len+1 bytes).  If code outside of the
      @c svn_string.h functions manually builds these structures,
      then they must enforce this invariant.

      Note that an @c svn_string(buf)_t may contain binary data,
      which means that strlen(s-&gt;data) does not have to equal @c
      s-&gt;len. The NULL terminator is provided to make it easier to
      pass @c s-&gt;data to C string interfaces.


   2. Non-NULL input:

      All the functions assume their input data is non-NULL,
      unless otherwise documented, and may seg fault if passed
      NULL.  The input data may *contain* null bytes, of course, just
      the data pointer itself must not be NULL.

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_opt.h
 @brief Option and argument parsing for Subversion command lines

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_version.h
 @brief Version information.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_ra.h
 @brief Repository Access

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_diff.h
 @brief Contextual diffing.

 This is an internalized library for performing contextual diffs
 between sources of data.

 @note This is different than Subversion's binary-diffing engine.
 That API lives in @c svn_delta.h -- see the "text deltas" section.  A
 "text delta" is way of representing precise binary diffs between
 strings of data.  The Subversion client and server send text deltas
 to one another during updates and commits.

 This API, however, is (or will be) used for performing *contextual*
 merges between files in the working copy.  During an update or
 merge, 3-way file merging is needed.  And 'svn diff' needs to show
 the differences between 2 files.

 The nice thing about this API is that it's very general.  It
 operates on any source of data (a "datasource") and calculates
 contextual differences on "tokens" within the data.  In our
 particular usage, the datasources are files and the tokens are
 lines.  But the possibilities are endless.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_io.h
 @brief General file I/O for Subversion

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_version.h
 @brief Version information.

 Get libsvn_diff version information.

 @since New in 1.1.

</member>
        <member name="M:svn_wc_set_changelist(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Set @a path's entry's 'changelist' attribute to @a changelist iff
 @a changelist is not @c NULL; otherwise, remove any current
 changelist assignment from @a path.  @a adm_access is an access
 baton set that contains @a path.

 If @a cancel_func is not @c NULL, call it with @a cancel_baton to
 determine if the client has cancelled the operation.

 If @a notify_func is not @c NULL, call it with @a notify_baton to
 report the change (using notification types @c
 svn_wc_notify_changelist_set and @c svn_wc_notify_changelist_clear).

 @note For now, directories are NOT allowed to be associated with
 changelists; there is confusion about whether they should behave
 as depth-0 or depth-infinity objects.  If @a path is a directory,
 return @c SVN_ERR_UNSUPPORTED_FEATURE.

 @note This metadata is purely a client-side "bookkeeping"
 convenience, and is entirely managed by the working copy.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_revision_status(svn_wc_revision_status_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
Set @a *result_p to point to a new @c svn_wc_revision_status_t structure
 * containing a summary of the revision range and status of the working copy
 * at @a wc_path (not including "externals").
 *
 * Set @a (*result_p)-&gt;min_rev and @a (*result_p)-&gt;max_rev respectively to the
 * lowest and highest revision numbers in the working copy.  If @a committed
 * is TRUE, summarize the last-changed revisions, else the base revisions.
 *
 * Set @a (*result_p)-&gt;switched to indicate whether any item in the WC is
 * switched relative to its parent.  If @a trail_url is non-NULL, use it to
 * determine if @a wc_path itself is switched.  It should be any trailing
 * portion of @a wc_path's expected URL, long enough to include any parts
 * that the caller considers might be changed by a switch.  If it does not
 * match the end of @a wc_path's actual URL, then report a "switched"
 * status.
 *
 * Set @a (*result_p)-&gt;modified to indicate whether any item is locally
 * modified.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 * if the client has cancelled the operation.
 *
 * Allocate *result_p in @a pool.
 *
 * @since New in 1.4

</member>
        <member name="F:svn_wc_revision_status_t.sparse_checkout">
Whether any WC paths are at a depth other than @c svn_depth_infinity.
   * @since New in 1.5.

</member>
        <member name="T:svn_wc_revision_status_t">
A structure to report a summary of a working copy, including the
 * mix of revisions found within it, whether any parts are switched or
 * locally modified, and whether it is a sparse checkout.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.
 *
 * @since New in 1.4

</member>
        <member name="M:svn_wc_remove_lock(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Remove any lock from @a path.  @a adm_access must contain a
 * write-lock for @a path.  If @a path has a lock and the locking
 * so specifies, make the file read-only.  Don't return an error if @a
 * path didn't have a lock.  Perform temporary allocations in @a pool. 
</member>
        <member name="M:svn_wc_add_lock(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_lock_t!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Add @a lock to the working copy for @a path.  @a adm_access must contain
 * a write lock for @a path.  If @a path is read-only, due to locking
 * properties, make it writable.  Perform temporary allocations in @a
 * pool. 
</member>
        <member name="M:svn_wc_match_ignore_list(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_array_header_t*,apr_pool_t*)">
Return TRUE iff @a str matches any of the elements of @a list, a
 * list of zero or more ignore patterns.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_get_ignores(apr_array_header_t**,apr_hash_t*,svn_wc_adm_access_t*,apr_pool_t*)">
Get the list of ignore patterns from the @c svn_config_t's in the
 * @a config hash and the local ignore patterns from the directory
 * in @a adm_access, and store them in @a *patterns.
 * Allocate @a *patterns and its contents in @a pool.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_wc_get_default_ignores(apr_array_header_t**,apr_hash_t*,apr_pool_t*)">
Get the run-time configured list of ignore patterns from the
 * @c svn_config_t's in the @a config hash, and store them in @a *patterns.
 * Allocate @a *patterns and its contents in @a pool.

</member>
        <member name="M:svn_wc_transmit_prop_deltas(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_wc_entry_t!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Given a @a path with its accompanying @a entry, transmit all local
 * property modifications using the appropriate @a editor method (in
 * conjunction with @a baton). @a adm_access is an access baton set
 * that contains @a path.  Use @a pool for all allocations.
 *
 * If a temporary file remains after this function is finished, the
 * path to that file is returned in @a *tempfile (so the caller can
 * clean this up if it wishes to do so).
 *
 * @note Starting version 1.5, no tempfile will ever be returned
 *       anymore.  If @a *tempfile is passed, its value is set to @c NULL.

</member>
        <member name="M:svn_wc_transmit_text_deltas(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Similar to svn_wc_transmit_text_deltas2(), but with @a digest set to NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_wc_transmit_text_deltas2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Byte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
Send the local modifications for versioned file @a path (with
 * matching @a file_baton) through @a editor, then close @a file_baton
 * afterwards.  Use @a pool for any temporary allocation and
 * @a adm_access as an access baton for @a path.
 *
 * This process creates a copy of @a path with keywords and eol
 * untranslated.  If @a tempfile is non-NULL, set @a *tempfile to the
 * path to this copy.  Do not clean up the copy; caller can do that.
 * If @a digest is non-NULL, put the MD5 checksum of the
 * temporary file into @a digest, which must point to @c APR_MD5_DIGESTSIZE
 * bytes of storage.  (The purpose of handing back the tmp copy is that
 * it is usually about to become the new text base anyway, but the
 * installation of the new text base is outside the scope of this
 * function.)
 *
 * If @a fulltext, send the untranslated copy of @a path through @a editor
 * as full-text; else send it as svndiff against the current text base.
 *
 * If sending a diff, and the recorded checksum for @a path's text-base
 * does not match the current actual checksum, then remove the tmp
 * copy (and set @a *tempfile to NULL if appropriate), and return the
 * error @c SVN_ERR_WC_CORRUPT_TEXT_BASE.
 *
 * @note This is intended for use with both infix and postfix
 * text-delta styled editor drivers.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_wc_translated_stream(svn_stream_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.UInt32,apr_pool_t*)">
Returns a @a stream allocated in @a pool with access to the given
 * @a path taking the file properties from @a versioned_file using
 * @a adm_access.
 *
 * When translation from normal form is requested
 * (@c SVN_WC_TRANSLATE_FROM_NF is specified in @a flags), @a path
 * is used as target path and stream read operations are not supported.
 * Conversely, if translation to normal form is requested
 * (@c SVN_WC_TRANSLATE_TO_NF is specified in @a flags), @a path is
 * used as source path and stream write operations are not supported.
 *
 * The @a flags are the same constants as those used for
 * svn_wc_translated_file().
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_translated_file(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,apr_pool_t*)">
Same as svn_wc_translated_file2, but will never clean up
 * temporary files.
 *
 * @deprecated Provided for compatibility with the 1.3 API

</member>
        <member name="M:svn_wc_translated_file2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.UInt32,apr_pool_t*)">
Set @a xlated_path to a translated copy of @a src
 * or to @a src itself if no translation is necessary.
 * That is, if @a versioned_file's properties indicate newline conversion or
 * keyword expansion, point @a *xlated_path to a copy of @a src
 * whose newlines and keywords are converted using the translation
 * as requested by @a flags.
 *
 * When translating to the normal form, inconsistent eol styles will be
 * repaired when appropriate for the given setting.  When translating
 * from normal form, no EOL repair is performed (consistency is assumed).
 * This behaviour can be overridden by specifying
 * @c SVN_WC_TRANSLATE_FORCE_EOL_REPAIR.
 *
 * The caller can explicitly request a new file to be returned by setting the
 * @c SVN_WC_TRANSLATE_FORCE_COPY flag in @a flags.
 *
 * This function is generally used to get a file that can be compared
 * meaningfully against @a versioned_file's text base, if
 * @c SVN_WC_TRANSLATE_TO_NF is specified, against @a versioned_file itself
 * if @c SVN_WC_TRANSLATE_FROM_NF is specified.
 *
 * Output files are created in the temp file area belonging to
 * @a versioned_file.  By default they will be deleted at pool cleanup.
 *
 * If @c SVN_WC_TRANSLATE_NO_OUTPUT_CLEANUP is specified, the default
 * pool cleanup handler to remove @a *xlated_path is not registered.
 *
 * If an error is returned, the effect on @a *xlated_path is undefined.
 *
 * @since New in 1.4

</member>
        <member name="M:svn_wc_create_tmp_file(apr_file_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Same as svn_wc_create_tmp_file2(), but with @a new_name set to @c NULL,
 * and without the ability to delete the file on pool cleanup.
 *
 * @deprecated For compatibility with 1.3 API

</member>
        <member name="M:svn_wc_create_tmp_file2(apr_file_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_io_file_del_t,apr_pool_t*)">
Create a unique temporary file in administrative tmp/ area of
 * directory @a path.  Return a handle in @a *fp and the path
 * in @a *new_name. Either @a fp or @a new_name can be NULL.
 *
 * The flags will be <tt>APR_WRITE | APR_CREATE | APR_EXCL</tt> and
 * optionally @c APR_DELONCLOSE (if the @a delete_when argument is
 * set to @c svn_io_file_del_on_close).
 *
 * This means that as soon as @a fp is closed, the tmp file will vanish.
 *
 * @since New in 1.4

</member>
        <member name="M:svn_wc_revert(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,apr_pool_t*)">
 Similar to svn_wc_revert2(), but takes an @c svn_wc_notify_func_t instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_revert2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Similar to svn_wc_revert3(), but with @a changelists passed as @c
 NULL, and @a depth set according to @a recursive: if @a recursive
 is TRUE, @a depth is @c svn_depth_infinity; if FALSE, @a depth is
 @c svn_depth_empty.

 @note Most APIs map @a recurse==FALSE to @a depth==svn_depth_files;
 revert is deliberately different.

 @deprecated Provided for backward compatibility with the 1.2 API.

</member>
        <member name="M:svn_wc_revert3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_depth_t,System.Int32,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Revert changes to @a path.  Perform necessary allocations in @a pool.

 @a parent_access is an access baton for the directory containing @a
 path, unless @a path is a working copy root (as determined by @c
 svn_wc_is_wc_root), in which case @a parent_access refers to @a
 path itself.

 If @a depth is @c svn_depth_empty, revert just @a path (if a
 directory, then revert just the properties on that directory).
 Else if @c svn_depth_files, revert @a path and any files
 directly under @a path if it is directory.  Else if
 @c svn_depth_immediates, revert all of the preceding plus
 properties on immediate subdirectories; else if @c svn_depth_infinity,
 revert path and everything under it fully recursively.

 @a changelists is an array of <tt>const char *</tt> changelist
 names, used as a restrictive filter on items reverted; that is,
 don't revert any item unless it's a member of one of those
 changelists.  If @a changelists is empty (or altogether @c NULL),
 no changelist filtering occurs.

 If @a cancel_func is non-NULL, call it with @a cancel_baton at
 various points during the reversion process.  If it returns an
 error (typically @c SVN_ERR_CANCELLED), return that error
 immediately.

 If @a use_commit_times is TRUE, then all reverted working-files
 will have their timestamp set to the last-committed-time.  If
 FALSE, the reverted working-files will be touched with the 'now' time.

 For each item reverted, @a notify_func will be called with @a notify_baton
 and the path of the reverted item. @a notify_func may be @c NULL if this
 notification is not needed.

 If @a path is not under version control, return the error
 SVN_ERR_UNVERSIONED_RESOURCE.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_relocate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*),System.Void*,apr_pool_t*)">
Similar to svn_wc_relocate2(), but uses @c svn_wc_relocation_validator_t.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API. 
</member>
        <member name="M:svn_wc_relocate2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*),System.Void*,apr_pool_t*)">
Similar to svn_wc_relocate3(), but uses @c svn_wc_relocation_validator2_t.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API. 
</member>
        <member name="M:svn_wc_relocate3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
Change repository references at @a path that begin with @a from
 * to begin with @a to instead.  Perform necessary allocations in @a pool.
 * If @a recurse is TRUE, do so.  @a validator (and its baton,
 * @a validator_baton), will be called for each newly generated URL.
 *
 * @a adm_access is an access baton for the directory containing
 * @a path.
 *
 * @since New in 1.5.

</member>
        <member name="D:svn_wc_relocation_validator_t">
Similar to @c svn_wc_relocation_validator2_t, but without
 * the @a root and @a pool arguments.  @a uuid will not be NULL in this version
 * of the function.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="D:svn_wc_relocation_validator2_t">
Similar to @c svn_wc_relocation_validator3_t, but without
 * the @a root_url arguments.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.

</member>
        <member name="D:svn_wc_relocation_validator3_t">
Relocation validation callback typedef.
 *
 * Called for each relocated file/directory.  @a uuid, if non-NULL, contains
 * the expected repository UUID, @a url contains the tentative URL.
 *
 * @a baton is a closure object; it should be provided by the
 * implementation, and passed by the caller.
 *
 * If @a root is TRUE, then the implementation should make sure that @a url
 * is the repository root.  Else, it can be an URL inside the repository.
 * @a pool may be used for temporary allocations.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_cleanup(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Similar to svn_wc_cleanup2(). @a optional_adm_access is an historic
 relic and not used, it may be NULL.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_cleanup2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Recurse from @a path, cleaning up unfinished log business.  Perform
 necessary allocations in @a pool.  Any working copy locks under @a path
 will be taken over and then cleared by this function.  If @a diff3_cmd
 is non-NULL, then use it as the diff3 command for any merging; otherwise,
 use the built-in merge code.

 WARNING: there is no mechanism that will protect locks that are still
 being used.

 If @a cancel_func is non-NULL, invoke it with @a cancel_baton at
 various points during the operation.  If it returns an error
 (typically @c SVN_ERR_CANCELLED), return that error immediately.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_get_pristine_copy_path(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Given a @a path to a wc file, return a @a pristine_path which points to a
 * pristine version of the file.  This is needed so clients can do
 * diffs.  If the WC has no text-base, return a @c NULL instead of a
 * path.

</member>
        <member name="M:svn_wc_merge_prop_diffs(svn_wc_notify_state_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_merge_props(), but no baseprops are given.
 Instead, it's assumed that the incoming propchanges are based
 against the working copy's own baseprops.  While this assumption is
 correct for 'svn update', it's incorrect for 'svn merge', and can
 cause flawed behavior.  (See issue #2035.)

 @deprecated Provided for backward compatibility with the 1.2 API.

</member>
        <member name="M:svn_wc_merge_props(svn_wc_notify_state_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_hash_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Same as svn_wc_merge_props2(), but with a @a conflict_func (and
 baton) of NULL.

 @deprecated Provided for backward compatibility with the 1.3 API.


</member>
        <member name="M:svn_wc_merge_props2(svn_wc_notify_state_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_hash_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:svn_error_t*(svn_wc_conflict_result_t**,svn_wc_conflict_description_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,apr_pool_t*)">
Given a @a path under version control, merge an array of @a
 * propchanges into the path's existing properties.  @a propchanges is
 * an array of @c svn_prop_t objects, and @a baseprops is a hash
 * representing the original set of properties that @a propchanges is
 * working against.  @a adm_access is an access baton for the directory
 * containing @a path.
 *
 * If @a base_merge is @c FALSE only the working properties will be changed,
 * if it is @c TRUE both the base and working properties will be changed.
 *
 * If @a state is non-NULL, set @a *state to the state of the properties
 * after the merge.
 *
 * If conflicts are found when merging working properties, they are
 * described in a temporary .prej file (or appended to an already-existing
 * .prej file), and the entry is marked "conflicted".  Base properties
 * are changed unconditionally, if @a base_merge is @c TRUE, they never result
 * in a conflict.
 *
 * If @a path is not under version control, return the error
 * SVN_ERR_UNVERSIONED_RESOURCE and don't touch anyone's properties.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_merge(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_wc_merge_outcome_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspe">
Similar to svn_wc_merge2(), but with @a merge_options set to NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_wc_merge2(svn_wc_merge_outcome_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnsp">
Similar to svn_wc_merge3(), but with @a prop_diff, @a
 * conflict_func, @a conflict_baton set to NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_merge3(svn_wc_merge_outcome_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnsp">
Given paths to three fulltexts, merge the differences between @a left
 * and @a right into @a merge_target.  (It may help to know that @a left,
 * @a right, and @a merge_target correspond to "OLDER", "YOURS", and "MINE",
 * respectively, in the diff3 documentation.)  Use @a pool for any
 * temporary allocation.
 *
 * @a adm_access is an access baton with a write lock for the directory
 * containing @a merge_target.
 *
 * This function assumes that @a left and @a right are in repository-normal
 * form (linefeeds, with keywords contracted); if necessary,
 * @a merge_target is temporarily converted to this form to receive the
 * changes, then translated back again.
 *
 * If @a merge_target is absent, or present but not under version
 * control, then set @a *merge_outcome to @c svn_wc_merge_no_merge and
 * return success without merging anything.  (The reasoning is that if
 * the file is not versioned, then it is probably unrelated to the
 * changes being considered, so they should not be merged into it.)
 *
 * @a dry_run determines whether the working copy is modified.  When it
 * is @c FALSE the merge will cause @a merge_target to be modified, when it
 * is @c TRUE the merge will be carried out to determine the result but
 * @a merge_target will not be modified.
 *
 * If @a diff3_cmd is non-NULL, then use it as the diff3 command for
 * any merging; otherwise, use the built-in merge code.  If @a
 * merge_options is non-NULL, either pass its elements to @a diff3_cmd or
 * parse it and use as options to the internal merge code (@see
 * svn_diff_file_options_parse()).  @a merge_options must contain
 * <tt>const char *</tt> elements.
 *
 * The outcome of the merge is returned in @a *merge_outcome. If there
 * is a conflict and @a dry_run is @c FALSE, then attempt to call @a
 * conflict_func with @a conflict_baton (if non-NULL).  If the
 * conflict callback cannot resolve the conflict, then:
 *
 *   * Put conflict markers around the conflicting regions in
 *     @a merge_target, labeled with @a left_label, @a right_label, and
 *     @a target_label.  (If any of these labels are @c NULL, default
 *     values will be used.)
 *
 *   * Copy @a left, @a right, and the original @a merge_target to unique
 *     names in the same directory as @a merge_target, ending with the
 *     suffixes ".LEFT_LABEL", ".RIGHT_LABEL", and ".TARGET_LABEL"
 *     respectively.
 *
 *   * Mark the entry for @a merge_target as "conflicted", and track the
 *     above mentioned backup files in the entry as well.
 *
 * Binary case:
 *
 *  If @a merge_target is a binary file, then no merging is attempted,
 *  the merge is deemed to be a conflict.  If @a dry_run is @c FALSE the
 *  working @a merge_target is untouched, and copies of @a left and
 *  @a right are created next to it using @a left_label and @a right_label.
 *  @a merge_target's entry is marked as "conflicted", and begins
 *  tracking the two backup files.  If @a dry_run is @c TRUE no files are
 *  changed.  The outcome of the merge is returned in @a *merge_outcome.
 *
 * @since New in 1.5.

</member>
        <member name="T:svn_wc_merge_outcome_t">
The outcome of a merge carried out (or tried as a dry-run) by
 * svn_wc_merge()

</member>
        <member name="F:svn_wc_merge_no_merge">
No merge was performed, probably because the target file was
    * either absent or not under version control.

</member>
        <member name="F:svn_wc_merge_conflict">
The working copy has been (or would be) changed, but there was (or
    * would be) a conflict

</member>
        <member name="F:svn_wc_merge_merged">
The working copy has been (or would be) changed. 
</member>
        <member name="F:svn_wc_merge_unchanged">
The working copy is (or would be) unchanged.  The changes to be
    * merged were already present in the working copy

</member>
        <member name="M:svn_wc_get_prop_diffs(apr_array_header_t**,apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Given a @a path to a file or directory under version control, discover
 * any local changes made to properties and/or the set of 'pristine'
 * properties.  @a adm_access is an access baton set for @a path.
 *
 * If @a propchanges is non-@c NULL, return these changes as an array of
 * @c svn_prop_t structures stored in @a *propchanges.  The structures and
 * array will be allocated in @a pool.  If there are no local property
 * modifications on @a path, then set @a *propchanges to @c NULL.
 *
 * If @a original_props is non-@c NULL, then set @a *original_props to
 * hashtable (<tt>const char *name</tt> -&gt; <tt>const svn_string_t *value</tt>)
 * that represents the 'pristine' property list of @a path.  This hashtable is
 * allocated in @a pool, and can be used to compare old and new values of
 * properties.

</member>
        <member name="M:svn_wc_diff(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,apr_pool_t*)">
 Similar to svn_wc_diff2(), but with @a ignore_ancestry always set
 to @c FALSE.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_diff2(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_diff3(), but with a @c svn_wc_diff_callbacks_t argument
 instead of @c svn_wc_diff_callbacks2_t.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_diff3(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_diff4(), but with @a changelists passed @c NULL,
 and @a depth set to @c svn_depth_infinity if @a recurse is TRUE, or
 @a svn_depth_files if @a recurse is FALSE.

 @deprecated Provided for backward compatibility with the 1.2 API.

</member>
        <member name="M:svn_wc_diff4(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,svn_depth_t,System.Int32,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Compare working copy against the text-base.

 @a anchor/@a target represent the base of the hierarchy to be compared.

 @a callbacks/@a callback_baton is the callback table to use when two
 files are to be compared.

 If @a depth is @c svn_depth_empty, just diff exactly @a target or
 @a anchor if @a target is empty.  If @c svn_depth_files then do the same
 and for top-level file entries as well (if any).  If
 @c svn_depth_immediates, do the same as @c svn_depth_files but also diff
 top-level subdirectories at @c svn_depth_empty.  If @c svn_depth_infinity,
 then diff fully recursively.  In the latter case, @a anchor should be part
 of an access baton set for the @a target hierarchy.

 @a ignore_ancestry determines whether paths that have discontinuous node
 ancestry are treated as delete/add or as simple modifications.  If
 @a ignore_ancestry is @c FALSE, then any discontinuous node ancestry will
 result in the diff given as a full delete followed by an add.

 @a changelists is an array of <tt>const char *</tt> changelist
 names, used as a restrictive filter on items whose differences are
 reported; that is, don't generate diffs about any item unless
 it's a member of one of those changelists.  If @a changelists is
 empty (or altogether @c NULL), no changelist filtering occurs.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_get_diff_editor(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_pool_t*)">
 Similar to svn_wc_get_diff_editor2(), but with @a ignore_ancestry
 always set to @c FALSE.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_get_diff_editor2(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_pool_t*)">
 Similar to svn_wc_get_diff_editor3(), but with an
 @c svn_wc_diff_callbacks_t instead of @c svn_wc_diff_callbacks2_t.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_get_diff_editor3(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_pool_t*)">
 * Similar to svn_wc_get_diff_editor4(), but with @a changelists
 * passed as @c NULL, and @a depth set to @c svn_depth_infinity if @a
 * recurse is TRUE, or @a svn_depth_files if @a recurse is FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.

 * @since New in 1.2.

</member>
        <member name="M:svn_wc_get_diff_editor4(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_diff_callbacks2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,svn_depth_t,System.Int32,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_pool_t*)">
 Return an @a editor/@a edit_baton for diffing a working copy against the
 repository.

 @a anchor/@a target represent the base of the hierarchy to be compared.

 @a callbacks/@a callback_baton is the callback table to use when two
 files are to be compared.

 If @a depth is @c svn_depth_empty, just diff exactly @a target or
 @a anchor if @a target is empty.  If @c svn_depth_files then do the same
 and for top-level file entries as well (if any).  If
 @c svn_depth_immediates, do the same as @c svn_depth_files but also diff
 top-level subdirectories at @c svn_depth_empty.  If @c svn_depth_infinity,
 then diff fully recursively.  In the latter case, @a anchor should be part
 of an access baton set for the @a target hierarchy.

 @a ignore_ancestry determines whether paths that have discontinuous node
 ancestry are treated as delete/add or as simple modifications.  If
 @a ignore_ancestry is @c FALSE, then any discontinuous node ancestry will
 result in the diff given as a full delete followed by an add.

 If @a use_text_base is TRUE, then compare the repository against
 the working copy's text-base files, rather than the working files.

 Normally, the difference from repository-&gt;working_copy is shown.
 If @a reverse_order is TRUE, then show working_copy-&gt;repository diffs.

 If @a cancel_func is non-NULL, it will be used along with @a cancel_baton
 to periodically check if the client has canceled the operation.

 @a changelists is an array of <tt>const char *</tt> changelist
 names, used as a restrictive filter on items whose differences are
 reported; that is, don't generate diffs about any item unless
 it's a member of one of those changelists.  If @a changelists is
 empty (or altogether @c NULL), no changelist filtering occurs.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_canonicalize_svn_prop(svn_string_t!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_node_kind_t,System.Int32,=FUNC:svn_error_t*(svn_string_t!System.Runtime.CompilerServices.IsConst**,svn_stream_t*,System.Void*,apr_pool_t*),System.Void*,apr_pool_t*)">
Canonicalize the value of an svn:* property @a propname with
 * value @a propval.
 *
 * If the property is not appropriate for a node of kind @a kind, or
 * is otherwise invalid, throw an error.  Otherwise, set @a *propval_p
 * to a canonicalized version of the property value.  If @a
 * skip_some_checks is TRUE, only some validity checks are taken.
 *
 * Some validity checks require access to the contents and MIME type
 * of the target if it is a file; they will call @a prop_getter with @a
 * getter_baton, which then needs to set the MIME type and print the
 * contents of the file to the given stream.
 *
 * @a path should be the path of the file in question; it is only used
 * for error messages.
 *
 * ### This is not actually related to the WC, but it does need to call
 * ### svn_wc_parse_externals_description2.

</member>
        <member name="D:svn_wc_canonicalize_svn_prop_get_file_t">
Callback type used by @c svn_wc_canonicalize_svn_prop.
 *
 * If @a mime_type is non-null, it sets @a *mime_type to the value of
 * @a SVN_PROP_MIME_TYPE for the path passed to @c
 * svn_wc_canonicalize_svn_prop (allocated from @a pool).  If @a
 * stream is non-null, it writes the contents of the file to @a
 * stream.
 *
 * (Currently, this is used if you are attempting to set the @a
 * SVN_PROP_EOL_STYLE property, to make sure that the value matches
 * the mime type and contents.)

</member>
        <member name="M:svn_wc_is_entry_prop(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return TRUE iff @a name is a 'entry' property name. 
</member>
        <member name="M:svn_wc_is_wc_prop(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return TRUE iff @a name is a 'wc' property name. 
</member>
        <member name="M:svn_wc_is_normal_prop(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return TRUE iff @a name is a 'normal' property name.  'Normal' is
 * defined as a user-visible and user-tweakable property that shows up
 * when you fetch a proplist.
 *
 * The function currently parses the namespace like so:
 *
 *   - 'svn:wc:'  ==&gt;  a wcprop, stored/accessed separately via different API.
 *
 *   - 'svn:entry:' ==&gt; an "entry" prop, shunted into the 'entries' file.
 *
 * If these patterns aren't found, then the property is assumed to be
 * Normal.

</member>
        <member name="M:svn_wc_prop_set(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
 Like svn_wc_prop_set2(), but with @a skip_checks always FALSE.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_prop_set2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,apr_pool_t*)">
 Set property @a name to @a value for @a path, or if @a value is
 NULL, remove property @a name from @a path.  @a adm_access is an
 access baton with a write lock for @a path.

 If @a skip_checks is TRUE, do no validity checking.  But if @a
 skip_checks is FALSE, and @a name is not a valid property for @a
 path, return an error, either @c SVN_ERR_ILLEGAL_TARGET (if the
 property is not appropriate for @a path), or @c
 SVN_ERR_BAD_MIME_TYPE (if @a name is "svn:mime-type", but @a value
 is not a valid mime-type).

 @a name may be a wc property or a regular property; but if it is an
 entry property, return the error @c SVN_ERR_BAD_PROP_KIND, even if
 @a skip_checks is TRUE.

 Use @a pool for temporary allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_prop_get(svn_string_t!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *value to the value of property @a name for @a path, allocating
 * @a *value in @a pool.  If no such prop, set @a *value to @c NULL.
 * @a name may be a regular or wc property; if it is an entry property,
 * return the error @c SVN_ERR_BAD_PROP_KIND.  @a adm_access is an access
 * baton set that contains @a path.

</member>
        <member name="M:svn_wc_prop_list(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *props to a hash table mapping <tt>char *</tt> names onto
 * <tt>svn_string_t *</tt> values for all the regular properties of
 * @a path.  Allocate the table, names, and values in @a pool.  If
 * the node has no properties, or does not exist in the working copy,
 * then an empty hash is returned.  @a adm_access is an access baton
 * set that contains @a path.

</member>
        <member name="M:svn_wc_get_switch_editor(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,=FUNC:svn_error_t*(System.Void*),Syste">
 Similar to svn_wc_get_switch_editor2(), but takes an
 @c svn_wc_notify_func_t instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_get_switch_editor2(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,svn_wc_traversal_info_t*,apr_pool_t*)">
 Similar to svn_wc_get_switch_editor3() but with the
 @a allow_unver_obstructions parameter always set to FALSE,
 @a preserved_exts set to NULL, @a conflict_func and baton set to NULL,
 @a depth_is_sticky set to FALSE, and @a depth set according to @a
 recurse: if @a recurse is TRUE, pass @c svn_depth_infinity, if
 FALSE, pass @c svn_depth_files.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_get_switch_editor3(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_depth_t,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:svn_error_t*(svn_wc_conflict_result_t**,svn_wc_conflict_description_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerSe">
 A variant of svn_wc_get_update_editor().

 Set @a *editor and @a *edit_baton to an editor and baton for "switching"
 a working copy to a new @a switch_url.  (Right now, this URL must be
 within the same repository that the working copy already comes
 from.)  @a switch_url must not be @c NULL.

 If @a ti is non-NULL, record traversal info in @a ti, for use by
 post-traversal accessors such as svn_wc_edited_externals().

 @a anchor is an access baton, with a write lock, for the local path to the
 working copy which will be used as the root of our editor.  Further
 locks will be acquired if the switch creates new directories.  All
 locks, both those in @a anchor and newly acquired ones, will be released
 when the editor driver calls @c close_edit.

 @a target is the entry in @a anchor that will actually be updated, or
 empty if all of @a anchor should be updated.

 The editor invokes @a notify_func with @a notify_baton as the switch
 progresses, if @a notify_func is non-NULL.

 If @a cancel_func is non-NULL, it will be called with @a cancel_baton as
 the switch progresses to determine if it should continue.

 If @a conflict_func is non-NULL, then invoke it with @a
 conflict_baton whenever a conflict is encountered, giving the
 callback a chance to resolve the conflict before the editor takes
 more drastic measures (such as marking a file conflicted, or
 bailing out of the switch).

 If @a diff3_cmd is non-NULL, then use it as the diff3 command for
 any merging; otherwise, use the built-in merge code.

 @a preserved_exts is an array of filename patterns which, when
 matched against the extensions of versioned files, determine for
 which such files any related generated conflict files will preserve
 the original file's extension as their own.  If a file's extension
 does not match any of the patterns in @a preserved_exts (which is
 certainly the case if @a preserved_exts is @c NULL or empty),
 generated conflict files will carry Subversion's custom extensions.

 @a target_revision is a pointer to a revision location which, after
 successful completion of the drive of this editor, will be
 populated with the revision to which the working copy was updated.

 If @a use_commit_times is TRUE, then all edited/added files will
 have their working timestamp set to the last-committed-time.  If
 FALSE, the working files will be touched with the 'now' time.

 @a depth and @a depth_is_sticky behave as for svn_wc_get_update_editor3().

 If @a allow_unver_obstructions is TRUE, then allow unversioned
 obstructions when adding a path.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_get_update_editor(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.I">
 Similar to svn_wc_get_update_editor2(), but takes an svn_wc_notify_func_t
 instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_get_update_editor2(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,svn_wc_traversal_info_t*,apr_pool_t*)">
 Similar to svn_wc_get_update_editor3() but with the @a
 allow_unver_obstructions parameter always set to FALSE, @a
 conflict_func and baton set to NULL, @a fetch_func and baton set to
 NULL, @a preserved_exts set to NULL, @a depth_is_sticky set to
 FALSE, and @a depth set according to @a recurse: if @a recurse is
 TRUE, pass @c svn_depth_infinity, if FALSE, pass @c
 svn_depth_files.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_get_update_editor3(System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_depth_t,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:svn_error_t*(svn_wc_conflict_result_t**,svn_wc_conflict_description_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_stre">
 Set @a *editor and @a *edit_baton to an editor and baton for updating a
 working copy.

 If @a ti is non-NULL, record traversal info in @a ti, for use by
 post-traversal accessors such as svn_wc_edited_externals().

 @a anchor is an access baton, with a write lock, for the local path to the
 working copy which will be used as the root of our editor.  Further
 locks will be acquired if the update creates new directories.  All
 locks, both those in @a anchor and newly acquired ones, will be released
 when the editor driver calls @c close_edit.

 @a target is the entry in @a anchor that will actually be updated, or
 empty if all of @a anchor should be updated.

 The editor invokes @a notify_func with @a notify_baton as the update
 progresses, if @a notify_func is non-NULL.

 If @a cancel_func is non-NULL, the editor will invoke @a cancel_func with
 @a cancel_baton as the update progresses to see if it should continue.

 If @a conflict_func is non-NULL, then invoke it with @a
 conflict_baton whenever a conflict is encountered, giving the
 callback a chance to resolve the conflict before the editor takes
 more drastic measures (such as marking a file conflicted, or
 bailing out of the update).

 If @a fetch_func is non-NULL, then use it (with @a fetch_baton) as
 a fallback for retrieving repository files whenever 'copyfrom' args
 are sent into editor-&gt;add_file().

 If @a diff3_cmd is non-NULL, then use it as the diff3 command for
 any merging; otherwise, use the built-in merge code.

 @a preserved_exts is an array of filename patterns which, when
 matched against the extensions of versioned files, determine for
 which such files any related generated conflict files will preserve
 the original file's extension as their own.  If a file's extension
 does not match any of the patterns in @a preserved_exts (which is
 certainly the case if @a preserved_exts is @c NULL or empty),
 generated conflict files will carry Subversion's custom extensions.

 @a target_revision is a pointer to a revision location which, after
 successful completion of the drive of this editor, will be
 populated with the revision to which the working copy was updated.

 If @a use_commit_times is TRUE, then all edited/added files will
 have their working timestamp set to the last-committed-time.  If
 FALSE, the working files will be touched with the 'now' time.

 If @a allow_unver_obstructions is TRUE, then allow unversioned
 obstructions when adding a path.

 If @a depth is @c svn_depth_infinity, update fully recursively.
 Else if it is @c svn_depth_immediates, update the uppermost
 directory, its file entries, and the presence or absence of
 subdirectories (but do not descend into the subdirectories).
 Else if it is @c svn_depth_files, update the uppermost directory
 and its immediate file entries, but not subdirectories.
 Else if it is @c svn_depth_empty, update exactly the uppermost
 target, and don't touch its entries.

 If @a depth_is_sticky is set and @a depth is not @c
 svn_depth_unknown, then in addition to updating PATHS, also set
 their sticky ambient depth value to @a depth.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_get_actual_target(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Conditionally split @a path into an @a anchor and @a target for the
 * purpose of updating and committing.
 *
 * @a anchor is the directory at which the update or commit editor
 * should be rooted.
 *
 * @a target is the actual subject (relative to the @a anchor) of the
 * update/commit, or "" if the @a anchor itself is the subject.
 *
 * Allocate @a anchor and @a target in @a pool.

</member>
        <member name="M:svn_wc_is_wc_root(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *wc_root to @c TRUE if @a path represents a "working copy root",
 * @c FALSE otherwise.  Use @a pool for any intermediate allocations.
 *
 * If @a path is not found, return the error @c SVN_ERR_ENTRY_NOT_FOUND.
 *
 * @note Due to the way in which "WC-root-ness" is calculated, passing
 * a @a path of `.' to this function will always return @c TRUE.

</member>
        <member name="M:svn_wc_crawl_revisions(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_ra_reporter_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,svn_wc_traversal_info_t*,apr_pool_t*)">
 Similar to svn_wc_crawl_revisions2(), but takes an svn_wc_notify_func_t
 and a @c svn_reporter_t instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_crawl_revisions2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_ra_reporter2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,svn_wc_traversal_info_t*,apr_pool_t*)">
 Similar to svn_wc_crawl_revisions3, but taking svn_ra_reporter2_t
 instead of svn_ra_reporter3_t, and therefore only able to report @c
 svn_depth_infinity for depths; and taking @a recurse instead of @a
 depth; and with @a depth_compatibility_trick always false.

 @deprecated Provided for compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_crawl_revisions3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_ra_reporter3_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,svn_depth_t,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,svn_wc_traversal_info_t*,apr_pool_t*)">
 Do a depth-first crawl in a working copy, beginning at @a path.

 Communicate the `state' of the working copy's revisions and depths
 to @a reporter/@a report_baton.  Obviously, if @a path is a file
 instead of a directory, this depth-first crawl will be a short one.

 No locks are or logs are created, nor are any animals harmed in the
 process.  No cleanup is necessary.  @a adm_access must be an access
 baton for the @a path hierarchy, it does not require a write lock.

 After all revisions are reported, @a reporter-&gt;finish_report() is
 called, which immediately causes the RA layer to update the working
 copy.  Thus the return value may very well reflect the result of
 the update!

 If @a depth is @c svn_depth_empty, then report state only for
 @a path itself.  If @c svn_depth_files, do the same and include
 immediate file children of @a path.  If @c svn_depth_immediates,
 then behave as if for @c svn_depth_files but also report the
 property states of immediate subdirectories.  If @a depth is
 @c svn_depth_infinity, then report state fully recursively.  All
 descents are only as deep as @a path's own depth permits, of
 course.  If @a depth is @c svn_depth_unknown, then just use
 @c svn_depth_infinity, which in practice means depth of @a path.

 Iff @a depth_compatibility_trick is TRUE, then set the @c start_empty
 flag on @a reporter-&gt;set_path() and @a reporter-&gt;link_path() calls
 as necessary to trick a pre-1.5 (i.e., depth-unaware) server into
 sending back all the items the client might need to upgrade a
 working copy from a shallower depth to a deeper one.

 If @a restore_files is TRUE, then unexpectedly missing working files
 will be restored from the administrative directory's cache. For each
 file restored, the @a notify_func function will be called with the
 @a notify_baton and the path of the restored file. @a notify_func may
 be @c NULL if this notification is not required.  If @a
 use_commit_times is TRUE, then set restored files' timestamps to
 their last-commit-times.

 If @a traversal_info is non-NULL, then record pre-update traversal
 state in it.  (Caller should obtain @a traversal_info from
 svn_wc_init_traversal_info().)

 @since New in 1.5.

</member>
        <member name="M:svn_wc_process_committed(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_array_header_t*,apr_pool_t*)">
 Similar to svn_wc_process_committed2(), but with @a remove_lock set to
 @c FALSE.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_process_committed2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_array_header_t*,System.Int32,apr_pool_t*)">
Similar to svn_wc_process_committed3(), but with @a digest set to
 * NULL.
 *
 * @since New in 1.2.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_wc_process_committed3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_array_header_t*,System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_wc_process_committed4(), but with @a
 * remove_changelist set to FALSE.
 *
 * @since New in 1.4.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_process_committed4(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_array_header_t*,System.Int32,System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Bump a successfully committed absolute @a path to @a new_revnum after a
 commit succeeds.  @a rev_date and @a rev_author are the (server-side)
 date and author of the new revision; one or both may be @c NULL.
 @a adm_access must hold a write lock appropriate for @a path.

 If non-NULL, @a wcprop_changes is an array of <tt>svn_prop_t *</tt>
 changes to wc properties; if an @c svn_prop_t-&gt;value is NULL, then
 that property is deleted.

 If @a remove_lock is @c TRUE, any entryprops related to a repository
 lock will be removed.

 If @a remove_changelist is @c TRUE, any association with a
 changelist will be removed.

 If @a path is a member of a changelist, remove that association.

 If @a path is a file and @a digest is non-NULL, use @a digest as
 the checksum for the new text base.  Else, calculate the checksum
 if needed.

 If @a recurse is TRUE and @a path is a directory, then bump every
 versioned object at or under @a path.  This is usually done for
 copied trees.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_process_committed_queue(svn_wc_committed_queue_t*,svn_wc_adm_access_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Like svn_wc_process_committed4(), but batch processes
 items queued with svn_wc_queue_committed().

 @since New in 1.5.

</member>
        <member name="M:svn_wc_queue_committed(svn_wc_committed_queue_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,apr_array_header_t*,System.Int32,System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Queue committed items to be processed later by
 svn_wc_process_committed_queue().

 The first time this function is called, @a *queue should
 be @c NULL to signal that initialization is required.

 All pointer data passed to this function
 (@a path, @a adm_access, @a wcprop_changes
 and @a digest) should remain valid until the queue has been
 processed by svn_wc_process_committed_queue().

 The parameters have the same meaning as those
 for svn_wc_process_committed4().

 @since New in 1.5.

</member>
        <member name="M:svn_wc_committed_queue_create(apr_pool_t*)">
 Create a queue for use with svn_wc_queue_committed() and
 svn_wc_process_committed_queue().

 The returned queue and all further
 allocations required for queueing new items will also be done
 from @a pool.

 @since New in 1.5.

</member>
        <member name="T:svn_wc_committed_queue_t">
 Storage type for queued post-commit data.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_resolved_conflict(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,apr_pool_t*)">
 Similar to svn_wc_resolved_conflict2(), but takes an
 svn_wc_notify_func_t and doesn't have cancellation support.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_resolved_conflict2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Similar to svn_wc_resolved_conflict3(), but without automatic conflict
 resolution support, and with @a depth set according to @a recurse:
 if @a recurse is TRUE, @a depth is @c svn_depth_infinity, else it is
 @c svn_depth_files.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_resolved_conflict3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,System.Int32,svn_depth_t,svn_wc_conflict_choice_t,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Assuming @a path is under version control and in a state of conflict,
 then take @a path *out* of this state.  If @a resolve_text is TRUE then
 any text conflict is resolved, if @a resolve_props is TRUE then any
 property conflicts are resolved.

 If @a depth is @c svn_depth_empty, act only on @a path; if
 @c svn_depth_files, resolve @a path and its conflicted file
 children (if any); if @c svn_depth_immediates, resolve @a path and
 all its immediate conflicted children (both files and directories,
 if any); if @c svn_depth_infinity, resolve @a path and every
 conflicted file or directory anywhere beneath it.

 If @a conflict_choice is @c svn_wc_conflict_choose_base, resolve the
 conflict with the old file contents; if
 @c svn_wc_conflict_choose_mine_full, use the original working contents;
 if @c svn_wc_conflict_choose_theirs_full, the new contents; and if
 @c svn_wc_conflict_choose_merged, don't change the contents at all,
 just remove the conflict status, which is the pre-1.5 behavior.

 (@c svn_wc_conflict_choose_theirs and @c svn_wc_conflict_choose_mine
 are not yet implemented; the effect of passing one of those values
 as @a conflict_choice is currently undefined, which may or may not
 be an underhanded way of allowing real behaviors to be added for
 them later without revving this interface.)

 @a adm_access is an access baton, with a write lock, for @a path.

 Needless to say, this function doesn't touch conflict markers or
 anything of that sort -- only a human can semantically resolve a
 conflict.  Instead, this function simply marks a file as "having
 been resolved", clearing the way for a commit.

 The implementation details are opaque, as our "conflicted" criteria
 might change over time.  (At the moment, this routine removes the
 three fulltext 'backup' files and any .prej file created in a conflict,
 and modifies @a path's entry.)

 If @a path is not under version control, return @c SVN_ERR_ENTRY_NOT_FOUND.
 If @a path isn't in a state of conflict to begin with, do nothing, and
 return @c SVN_NO_ERROR.

 If @c path was successfully taken out of a state of conflict, report this
 information to @c notify_func (if non-@c NULL.)  If only text or only
 property conflict resolution was requested, and it was successful, then
 success gets reported.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_remove_from_revision_control(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
Remove entry @a name in @a adm_access from revision control.  @a name
 * must be either a file or @c SVN_WC_ENTRY_THIS_DIR.  @a adm_access must
 * hold a write lock.
 *
 * If @a name is a file, all its info will be removed from @a adm_access's
 * administrative directory.  If @a name is @c SVN_WC_ENTRY_THIS_DIR, then
 * @a adm_access's entire administrative area will be deleted, along with
 * *all* the administrative areas anywhere in the tree below @a adm_access.
 *
 * Normally, only administrative data is removed.  However, if
 * @a destroy_wf is TRUE, then all working file(s) and dirs are deleted
 * from disk as well.  When called with @a destroy_wf, any locally
 * modified files will *not* be deleted, and the special error
 * @c SVN_ERR_WC_LEFT_LOCAL_MOD might be returned.  (Callers only need to
 * check for this special return value if @a destroy_wf is TRUE.)
 *
 * If @a instant_error is TRUE, then return @c
 * SVN_ERR_WC_LEFT_LOCAL_MOD the instant a locally modified file is
 * encountered.  Otherwise, leave locally modified files in place and
 * return the error only after all the recursion is complete.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton at
 * various points during the removal.  If it returns an error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.
 *
 * WARNING:  This routine is exported for careful, measured use by
 * libsvn_client.  Do *not* call this routine unless you really
 * understand what the heck you're doing.

</member>
        <member name="M:svn_wc_add_repos_file(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Same as svn_wc_add_repos_file2(), except that it doesn't have the
 * new_text_base_path and new_base_props arguments.
 *
 * @deprecated Provided for compatibility with the 1.3 API
 *

</member>
        <member name="M:svn_wc_add_repos_file2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,apr_hash_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Add a file to a working copy at @a dst_path, obtaining the text-base's
 * contents from @a new_text_base_path, the wc file's content from
 * @a new_text_path, its base properties from @a new_base_props and
 * wc properties from @a new_props.
 * The base text and props normally come from the repository file
 * represented by the copyfrom args, see below.  The new file will
 * be scheduled for addition with history.
 *
 * Automatically remove @a new_text_base_path and @a new_text_path
 * upon successful completion.
 *
 * @a new_text_path and @a new_props may be NULL, in which case
 * the working copy text and props are taken from the base files with
 * appropriate translation of the file's content.
 *
 * @a adm_access, or an access baton in its associated set, must
 * contain a write lock for the parent of @a dst_path.
 *
 * If @a copyfrom_url is non-NULL, then @a copyfrom_rev must be a
 * valid revision number, and together they are the copyfrom history
 * for the new file.
 *
 * Use @a pool for temporary allocations.
 *
 * ### This function is very redundant with svn_wc_add().  Ideally,
 * we'd merge them, so that svn_wc_add() would just take optional
 * new_props and optional copyfrom information.  That way it could be
 * used for both 'svn add somefilesittingonmydisk' and for adding
 * files from repositories, with or without copyfrom history.
 *
 * The problem with this Ideal Plan is that svn_wc_add() also takes
 * care of recursive URL-rewriting.  There's a whole comment in its
 * doc string about how that's really weird, outside its core mission,
 * etc, etc.  So another part of the Ideal Plan is that that
 * functionality of svn_wc_add() would move into a separate function.
 *
 * @since New in 1.4

</member>
        <member name="M:svn_wc_add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,apr_pool_t*)">
 Similar to svn_wc_add2(), but takes an @c svn_wc_notify_func_t instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_add2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Put @a path under version control by adding an entry in its parent,
 and, if @a path is a directory, adding an administrative area.  The
 new entry and anything under it is scheduled for addition to the
 repository.  @a parent_access should hold a write lock for the parent
 directory of @a path.  If @a path is a directory then an access baton
 for @a path will be added to the set containing @a parent_access.

 If @a path does not exist, return @c SVN_ERR_WC_PATH_NOT_FOUND.

 If @a copyfrom_url is non-NULL, it and @a copyfrom_rev are used as
 `copyfrom' args.  This is for copy operations, where one wants
 to schedule @a path for addition with a particular history.

 If @a cancel_func is non-NULL, call it with @a cancel_baton at
 various points during the operation.  If it returns an error
 (typically @c SVN_ERR_CANCELLED), return that error immediately.

 When the @a path has been added, then @a notify_func will be called
 (if it is not @c NULL) with the @a notify_baton and the path.

 Return @c SVN_ERR_WC_NODE_KIND_CHANGE if @a path is both an unversioned
 directory and a file that is scheduled for deletion or in state deleted.

<pre> ### This function currently does double duty -- it is also
 ### responsible for "switching" a working copy directory over to a
 ### new copyfrom ancestry and scheduling it for addition.  Here is
 ### the old doc string from Ben, lightly edited to bring it
 ### up-to-date, explaining the TRUE, secret life of this function:</pre>

 Given a @a path within a working copy of type KIND, follow this algorithm:

    - if @a path is not under version control:
       - Place it under version control and schedule for addition;
         if @a copyfrom_url is non-NULL, use it and @a copyfrom_rev as
         'copyfrom' history

    - if @a path is already under version control:
          (This can only happen when a directory is copied, in which
           case ancestry must have been supplied as well.)

       -  Schedule the directory itself for addition with copyfrom history.
       -  Mark all its children with a 'copied' flag
       -  Rewrite all the URLs to what they will be after a commit.
       -  ### @todo Remove old wcprops too, see the '###' below.

<pre> ### I think possibly the "switchover" functionality should be
 ### broken out into a separate function, but its all intertwined in
 ### the code right now.  Ben, thoughts?  Hard?  Easy?  Mauve?</pre>

 ### Update: see "###" comment in svn_wc_add_repos_file()'s doc
 string about this.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_delete(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,apr_pool_t*)">
 Similar to svn_wc_delete2(), but takes an @c svn_wc_notify_func_t instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_delete2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Similar to svn_wc_delete3(), but with @a keep_local always set to FALSE.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_delete3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,System.Int32,apr_pool_t*)">
 Schedule @a path for deletion, it will be deleted from the repository on
 the next commit.  If @a path refers to a directory, then a recursive
 deletion will occur.  @a adm_access must hold a write lock for the parent
 of @a path.

 If @a keep_local is FALSE, this function immediately deletes all files,
 modified and unmodified, versioned and unversioned from the working copy.
 It also immediately deletes unversioned directories and directories that
 are scheduled to be added.  Only versioned directories will remain in the
 working copy, these get deleted by the update following the commit.

 If @a keep_local is TRUE, all files and directories will be kept in the
 working copy (and will become unversioned on the next commit).

 If @a cancel_func is non-NULL, call it with @a cancel_baton at
 various points during the operation.  If it returns an error
 (typically @c SVN_ERR_CANCELLED), return that error immediately.

 For each path marked for deletion, @a notify_func will be called with
 the @a notify_baton and that path. The @a notify_func callback may be
 @c NULL if notification is not needed.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_copy(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,svn_node_kind_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_state_t,svn_wc_notify_state_t,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,apr_pool_t*)">
 Similar to svn_wc_copy2(), but takes an @c svn_wc_notify_func_t instead.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_copy2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*),System.Void*,=FUNC:System.Void(System.Void*,svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
@} 
 Copy @a src to @a dst_basename in @a dst_parent, and schedule
 @a dst_basename for addition to the repository, remembering the copy
 history.

 @a src must be a file or directory under version control; @a dst_parent
 must be a directory under version control in the same working copy;
 @a dst_basename will be the name of the copied item, and it must not
 exist already.

 If @a cancel_func is non-NULL, call it with @a cancel_baton at
 various points during the operation.  If it returns an error
 (typically @c SVN_ERR_CANCELLED), return that error immediately.

 For each file or directory copied, @a notify_func will be called
 with its path and the @a notify_baton.  @a notify_func may be @c NULL
 if you are not interested in this information.

 @par Important:
 This is a variant of svn_wc_add().  No changes will happen
 to the repository until a commit occurs.  This scheduling can be
 removed with svn_client_revert2().

 @since New in 1.2.

</member>
        <member name="M:svn_wc_status_set_repos_locks(System.Void*,apr_hash_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Associate @a locks, a hash table mapping <tt>const char*</tt>
 absolute repository paths to <tt>svn_lock_t</tt> objects, with a
 @a set_locks_baton returned by an earlier call to
 svn_wc_get_status_editor3().  @a repos_root is the repository root URL.
 Perform all allocations in @a pool.

 @note @a locks will not be copied, so it must be valid throughout the
 edit.  @a pool must also not be destroyed or cleared before the edit is
 finished.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_get_status_editor(svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,System.Int32,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_status_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,svn_wc_traversal_info_t*,apr_pool_t*)">
 Same as svn_wc_get_status_editor2(), but with @a set_locks_baton set
 to @c NULL, and taking a deprecated svn_wc_status_func_t argument.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_get_status_editor2(svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,System.Int32,System.Int32,System.Int32,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_status2_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,svn_wc_traversal_info_t*,apr_pool_t*)">
 Like svn_wc_get_status_editor3(), but with @a ignore_patterns
 provided from the corresponding value in @a config, and @a recurse
 instead of @a depth.  If @a recurse is TRUE, behave as if for @c
 svn_depth_infinity; else if @a recurse is FALSE, behave as if for
 @c svn_depth_immediates.

 @since New in 1.2.
 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_get_status_editor3(svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong*,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_depth_t,System.Int32,System.Int32,apr_array_header_t*,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_status2_t*),System.Void*,=FUNC:svn_error_t*(System.Void*),System.Void*,svn_wc_traversal_info_t*,apr_pool_t*)">
 Set @a *editor and @a *edit_baton to an editor that generates @c
 svn_wc_status2_t structures and sends them through @a status_func /
 @a status_baton.  @a anchor is an access baton, with a tree lock,
 for the local path to the working copy which will be used as the
 root of our editor.  If @a target is not empty, it represents an
 entry in the @a anchor path which is the subject of the editor
 drive (otherwise, the @a anchor is the subject).

 If @a set_locks_baton is non-@c NULL, it will be set to a baton that can
 be used in a call to the svn_wc_status_set_repos_locks() function.

 Callers drive this editor to describe working copy out-of-dateness
 with respect to the repository.  If this information is not
 available or not desired, callers should simply call the
 close_edit() function of the @a editor vtable.

 If the editor driver calls @a editor's set_target_revision() vtable
 function, then when the edit drive is completed, @a *edit_revision
 will contain the revision delivered via that interface.

 Assuming the target is a directory, then:

   - If @a get_all is FALSE, then only locally-modified entries will be
     returned.  If TRUE, then all entries will be returned.

   - If @a depth is @c svn_depth_empty, a status structure will
     be returned for the target only; if @c svn_depth_files, for the
     target and its immediate file children; if
     @c svn_depth_immediates, for the target and its immediate
     children; if @c svn_depth_infinity, for the target and
     everything underneath it, fully recursively.

     If @a depth is @c svn_depth_unknown, take depths from the
     working copy and behave as above in each directory's case.

     If the given @a depth is incompatible with the depth found in a
     working copy directory, the found depth always governs.

 If @a no_ignore is set, statuses that would typically be ignored
 will instead be reported.

 @a ignore_patterns is an array of file patterns matching
 unversioned files to ignore for the purposes of status reporting,
 or @c NULL if the default set of ignorable file patterns should be used.

 If @a cancel_func is non-NULL, call it with @a cancel_baton while building
 the @a statushash to determine if the client has cancelled the operation.

 If @a traversal_info is non-NULL, then record pre-update traversal
 state in it.  (Caller should obtain @a traversal_info from
 svn_wc_init_traversal_info().)

 Allocate the editor itself in @a pool, but the editor does temporary
 allocations in a subpool of @a pool.

 @since New in 1.5.

</member>
        <member name="D:svn_wc_status_func_t">
  Same as svn_wc_status_func2_t(), but for older svn_wc_status_t structures.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="D:svn_wc_status_func2_t">
 A callback for reporting a @a status about @a path.

 @a baton is a closure object; it should be provided by the
 implementation, and passed by the caller.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_status(svn_wc_status_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
  Same as svn_wc_status2(), but for older svn_wc_status_t structures.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_status2(svn_wc_status2_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
 Fill @a *status for @a path, allocating in @a pool.
 @a adm_access must be an access baton for @a path.

 Here are some things to note about the returned structure.  A quick
 examination of the @c status-&gt;text_status after a successful return of
 this function can reveal the following things:

    - @c svn_wc_status_none : @a path is not versioned, and is either not
                              present on disk, or is ignored by svn's
                              default ignore regular expressions or the
                              svn:ignore property setting for @a path's
                              parent directory.

    - @c svn_wc_status_missing : @a path is versioned, but is missing from
                                 the working copy.

    - @c svn_wc_status_unversioned : @a path is not versioned, but is
                                     present on disk and not being
                                     ignored (see above).

 The other available results for the @c text_status field are more
 straightforward in their meanings.  See the comments on the
 @c svn_wc_status_kind structure for some hints.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_dup_status(svn_wc_status_t*,apr_pool_t*)">
 Same as svn_wc_dup_status2(), but for older svn_wc_status_t structures.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_dup_status2(svn_wc_status2_t*,apr_pool_t*)">
 Return a deep copy of the @a orig_stat status structure, allocated
 in @a pool.

 @since New in 1.2.

</member>
        <member name="F:svn_wc_status_t.switched">
a file or directory can be 'switched' if the switch command has been
   * used.

</member>
        <member name="F:svn_wc_status_t.copied">
a file or directory can be 'copied' if it's scheduled for
   * addition-with-history (or part of a subtree that is scheduled as such.).

</member>
        <member name="F:svn_wc_status_t.locked">
a directory can be 'locked' if a working copy update was interrupted. 
</member>
        <member name="F:svn_wc_status_t.entry">
Can be @c NULL if not under version control. 
</member>
        <member name="T:svn_wc_status_t">
 Same as @c svn_wc_status2_t, but without the svn_lock_t 'repos_lock' field.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="F:svn_wc_status2_t.ood_last_cmt_author">
Set to the user name of the youngest commit, or @c NULL if not
   * out of date or non-existent.  Because a non-existent @c
   * svn:author property has the same behavior as an out-of-date
   * working copy, examine @c ood_last_cmt_rev to determine whether
   * the working copy is out of date.
   * @since New in 1.3

</member>
        <member name="F:svn_wc_status2_t.ood_kind">
Set to the node kind of the youngest commit, or @c svn_node_none
   * if not out of date.
   * @since New in 1.3

</member>
        <member name="F:svn_wc_status2_t.ood_last_cmt_date">
Set to the most recent commit date, or @c 0 if not out of date.
   * @since New in 1.3

</member>
        <member name="F:svn_wc_status2_t.ood_last_cmt_rev">
 @defgroup svn_wc_status_ood WC out-of-date info from the repository
 @{

 When the working copy item is out-of-date compared to the
 repository, the following fields represent the state of the
 youngest revision of the item in the repository.  If the working
 copy is not out of date, the fields are initialized as described
 below.

Set to the youngest committed revision, or @c SVN_INVALID_REVNUM
   * if not out of date.
   * @since New in 1.3

</member>
        <member name="F:svn_wc_status2_t.url">
Set to the URI (actual or expected) of the item.
   * @since New in 1.3

</member>
        <member name="F:svn_wc_status2_t.repos_lock">
The entry's lock in the repository, if any. 
</member>
        <member name="F:svn_wc_status2_t.switched">
a file or directory can be 'switched' if the switch command has been
   * used.

</member>
        <member name="F:svn_wc_status2_t.copied">
a file or directory can be 'copied' if it's scheduled for
   * addition-with-history (or part of a subtree that is scheduled as such.).

</member>
        <member name="F:svn_wc_status2_t.locked">
a directory can be 'locked' if a working copy update was interrupted. 
</member>
        <member name="F:svn_wc_status2_t.entry">
Can be @c NULL if not under version control. 
</member>
        <member name="T:svn_wc_status2_t">
 Structure for holding the "status" of a working copy item.

 The item's entry data is in @a entry, augmented and possibly shadowed
 by the other fields.  @a entry is @c NULL if this item is not under
 version control.

 @note Fields may be added to the end of this structure in future
 versions.  Therefore, to preserve binary compatibility, users
 should not directly allocate structures of this type.

 @since New in 1.2.

</member>
        <member name="T:svn_wc_status_kind">
 @defgroup svn_wc_status Working copy status.
 @{

 We have two functions for getting working copy status: one function
 for getting the status of exactly one thing, and another for
 getting the statuses of (potentially) multiple things.

 The concept of depth, as explained in the documentation for
 svn_depth_t, may be useful in understanding this.  Suppose we're
 getting the status of directory D:

 To offer all three levels, we could have one unified function,
 taking a `depth' parameter.  Unfortunately, because this function
 would have to handle multiple return values as well as the single
 return value case, getting the status of just one entity would
 become cumbersome: you'd have to roll through a hash to find one
 lone status.

 So we have svn_wc_status() for depth-empty (just D itself), and
 svn_wc_get_status_editor() for depth-immediates and depth-infinity,
 since the latter two involve multiple return values.

 @note The status structures may contain a @c NULL -&gt;entry field.
 This indicates an item that is not versioned in the working copy.

The type of status for the working copy. 

The status of the entries text. 

The status of the entries properties. 

The entry's text status in the repository. 

The entry's property status in the repository. 

The status of the entries text. 

The status of the entries properties. 

The entry's text status in the repository. 

The entry's property status in the repository. 
</member>
        <member name="F:svn_wc_status_incomplete">
a directory doesn't contain a complete entries list 
</member>
        <member name="F:svn_wc_status_external">
an unversioned path populated by an svn:externals property 
</member>
        <member name="F:svn_wc_status_obstructed">
an unversioned resource is in the way of the versioned resource 
</member>
        <member name="F:svn_wc_status_ignored">
is unversioned but configured to be ignored 
</member>
        <member name="F:svn_wc_status_conflicted">
local mods received conflicting repos mods 
</member>
        <member name="F:svn_wc_status_merged">
local mods received repos mods 
</member>
        <member name="F:svn_wc_status_modified">
text or props have been modified 
</member>
        <member name="F:svn_wc_status_replaced">
was deleted and then re-added 
</member>
        <member name="F:svn_wc_status_deleted">
scheduled for deletion 
</member>
        <member name="F:svn_wc_status_missing">
under v.c., but is missing 
</member>
        <member name="F:svn_wc_status_added">
is scheduled for addition 
</member>
        <member name="F:svn_wc_status_normal">
exists, but uninteresting 
</member>
        <member name="F:svn_wc_status_unversioned">
is not a versioned thing in this wc 
</member>
        <member name="F:svn_wc_status_none">
does not exist 
</member>
        <member name="M:svn_wc_maybe_set_repos_root(svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set the repository root URL of @a path to @a repos, if possible.
 *
 * @a adm_access must contain @a path and be write-locked, if @a path
 * is versioned.  Return no error if path is missing or unversioned.
 * Use @a pool for temporary allocations.
 *
 * @note In some circumstances, the repository root can't be set
 * without making the working copy corrupt.  In such cases, this
 * function just returns no error, without modifying the @a path entry.
 *
 * @note This function exists to make it possible to try to set the repository
 * root in old working copies; new working copies normally get this set at
 * creation time.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_wc_ensure_adm(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
 Similar to svn_wc_ensure_adm2(), but with @a repos set to @c NULL.

 @deprecated Provided for backwards compatibility with the 1.2 API.

</member>
        <member name="M:svn_wc_ensure_adm2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
 Similar to svn_wc_ensure_adm3(), but with @a depth set to
 @c svn_depth_infinity.

 @deprecated Provided for backwards compatibility with the 1.4 API.

 @since New in 1.3.

</member>
        <member name="M:svn_wc_ensure_adm3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_depth_t,apr_pool_t*)">
Ensure that an administrative area exists for @a path, so that @a
 * path is a working copy subdir based on @a url at @a revision, with
 * depth @a depth, and with repository UUID @a uuid and repository
 * root URL @a repos.
 *
 * @a depth must be a definite depth, it cannot be @c svn_depth_unknown.
 * @a uuid and @a repos may be @c NULL.  If non-@c NULL, @a repos must
 * be a prefix of @a url.
 *
 * If the administrative area does not exist, then create it and
 * initialize it to an unlocked state.
 *
 * If the administrative area already exists then the given @a url
 * must match the URL in the administrative area and the given
 * @a revision must match the BASE of the working copy dir unless
 * the admin directory is scheduled for deletion or the
 * SVN_ERR_WC_OBSTRUCTED_UPDATE error will be returned.
 *
 * Do not ensure existence of @a path itself; if @a path does not
 * exist, return error.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_mark_missing_deleted(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Mark missing @a path as 'deleted' in its @a parent's list of entries.
 *
 * Return @c SVN_ERR_WC_PATH_FOUND if @a path isn't actually missing.

</member>
        <member name="M:svn_wc_walk_entries(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_wc_entry_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,apr_pool_t*)">
 Similar to svn_wc_walk_entries2(), but without cancellation support.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_walk_entries2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_wc_entry_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Similar to svn_wc_walk_entries3(), but without cancellation support
 or error handling from @a walk_callbacks, and with @a depth always
 set to @c svn_depth_infinity.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_walk_entries3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,svn_wc_entry_callbacks2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,svn_depth_t,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 A generic entry-walker.

 Do a potentially recursive depth-first entry-walk beginning on
 @a path, which can be a file or dir.  Call callbacks in
 @a walk_callbacks, passing @a walk_baton to each.  Use @a pool for
 looping, recursion, and to allocate all entries returned.
 @a adm_access must be an access baton for @a path.

 If @a depth is @c svn_depth_empty, invoke the callbacks on @a path
 and return without recursing further.  If @c svn_depth_files, do
 the same and invoke the callbacks on file children (if any) of
 @a path, then return.  If @c svn_depth_immediates, do the preceding
 but also invoke callbacks on immediate subdirectories, then return.
 If @c svn_depth_infinity, recurse fully starting from @a path.

 If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 if the client has cancelled the operation.

 Like our other entries interfaces, entries that are in a 'deleted'
 or 'absent' state (and not scheduled for re-addition) are not
 discovered, unless @a show_hidden is TRUE.

 When a new directory is entered, @c SVN_WC_ENTRY_THIS_DIR will always
 be returned first.

 @note Callers should be aware that each directory will be
 returned *twice*:  first as an entry within its parent, and
 subsequently as the '.' entry within itself.  The two calls can be
 distinguished by looking for @c SVN_WC_ENTRY_THIS_DIR in the 'name'
 field of the entry.

 @since New in 1.5.

</member>
        <member name="F:svn_wc_entry_callbacks_t.found_entry">
An @a entry was found at @a path. 
</member>
        <member name="T:svn_wc_entry_callbacks_t">
@deprecated Provided for backward compatibility with the 1.4 API. 
</member>
        <member name="F:svn_wc_entry_callbacks2_t.handle_error">
Handle the error @a err encountered while processing @a path.
   * Wrap or squelch @a err as desired, and return an @c svn_error_t
   * *, or @c SVN_NO_ERROR.

</member>
        <member name="F:svn_wc_entry_callbacks2_t.found_entry">
An @a entry was found at @a path. 
</member>
        <member name="T:svn_wc_entry_callbacks2_t">
A callback vtable invoked by the generic entry-walker function.
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_get_ancestry(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Int32!System.Runtime.CompilerServices.IsLong*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *url and @a *rev to the ancestor URL and revision for @a path,
 * allocating in @a pool.  @a adm_access must be an access baton for @a path.
 *
 * If @a url or @a rev is NULL, then ignore it (just don't return the
 * corresponding information).

</member>
        <member name="M:svn_wc_conflicted_p(System.Int32*,System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_entry_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Given a @a dir_path under version control, decide if one of its
 * entries (@a entry) is in state of conflict; return the answers in
 * @a text_conflicted_p and @a prop_conflicted_p.
 *
 * (If the entry mentions that a .rej or .prej exist, but they are
 * both removed, assume the conflict has been resolved by the user.)

</member>
        <member name="M:svn_wc_entry_dup(svn_wc_entry_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return a duplicate of @a entry, allocated in @a pool.  No part of the new
 * entry will be shared with @a entry.

</member>
        <member name="M:svn_wc_entries_read(apr_hash_t**,svn_wc_adm_access_t*,System.Int32,apr_pool_t*)">
Parse the `entries' file for @a adm_access and return a hash @a entries,
 * whose keys are (<tt>const char *</tt>) entry names and values are
 * (<tt>svn_wc_entry_t *</tt>).  The hash @a entries, and its keys and
 * values, are allocated from the pool used to open the @a adm_access
 * baton (that's how the entries caching works).  @a pool is used for
 * transient allocations.
 *
 * Entries that are in a 'deleted' or 'absent' state (and not
 * scheduled for re-addition) are not returned in the hash, unless
 * @a show_hidden is TRUE.
 *
 * @par Important:
 * The @a entries hash is the entries cache in @a adm_access
 * and so usually the hash itself, the keys and the values should be treated
 * as read-only.  If any of these are modified then it is the caller's
 * responsibility to ensure that the entries file on disk is updated.  Treat
 * the hash values as type (<tt>const svn_wc_entry_t *</tt>) if you wish to
 * avoid accidental modification.  Modifying the schedule member is a
 * particularly bad idea, as the entries writing process relies on having
 * access to the original schedule.  Use a duplicate entry to modify the
 * schedule.
 *
 * @par Important:
 * Only the entry structures representing files and
 * @c SVN_WC_ENTRY_THIS_DIR contain complete information.  The entry
 * structures representing subdirs have only the `kind' and `state'
 * fields filled in.  If you want info on a subdir, you must use this
 * routine to open its @a path and read the @c SVN_WC_ENTRY_THIS_DIR
 * structure, or call svn_wc_entry() on its @a path.

</member>
        <member name="M:svn_wc_entry(svn_wc_entry_t!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,System.Int32,apr_pool_t*)">
How an entries file's owner dir is named in the entries file. 
Set @a *entry to an entry for @a path, allocated in the access baton
 * pool.  If @a show_hidden is TRUE, return the entry even if it's in
 * 'deleted' or 'absent' state.  If @a path is not under revision
 * control, or if entry is hidden, not scheduled for re-addition,
 * and @a show_hidden is @c FALSE, then set @a *entry to @c NULL.
 *
 * @a *entry should not be modified, since doing so modifies the entries
 * cache in @a adm_access without changing the entries file on disk.
 *
 * If @a path is not a directory then @a adm_access must be an access baton
 * for the parent directory of @a path.  To avoid needing to know whether
 * @a path is a directory or not, if @a path is a directory @a adm_access
 * can still be an access baton for the parent of @a path so long as the
 * access baton for @a path itself is in the same access baton set.
 *
 * @a path can be relative or absolute but must share the same base used
 * to open @a adm_access.
 *
 * Note that it is possible for @a path to be absent from disk but still
 * under revision control; and conversely, it is possible for @a path to
 * be present, but not under revision control.
 *
 * Use @a pool only for local processing.

</member>
        <member name="F:svn_wc_entry_t.depth">
The depth of this entry.
   *
   * ### It's a bit annoying that we only use this on this_dir
   * ### entries, yet it will exist (with value svn_depth_infinity) on
   * ### all entries.  Maybe some future extensibility would make this
   * ### field meaningful on entries besides this_dir.
   *
   * @since New in 1.5. 
</member>
        <member name="F:svn_wc_entry_t.keep_local">
Whether a local copy of this entry should be kept in the working copy
   * after a deletion has been committed,  Only valid for the this-dir entry
   * when it is scheduled for deletion.
   *
   * @since New in 1.5. 
</member>
        <member name="F:svn_wc_entry_t.working_size">
Size of the file after being translated into local
   * representation, or @c SVN_WC_ENTRY_WORKING_SIZE_UNKNOWN if
   * unknown.
   *
   * @since New in 1.5.

</member>
        <member name="F:svn_wc_entry_t.changelist">
which changelist this item is part of, or NULL if not part of any.
   * @since New in 1.5.

</member>
        <member name="F:svn_wc_entry_t.present_props">
Cached property existence for this entry.
   * This is a space-separated list of property names.  If a name exists in
   * @c cachable_props but not in this list, this entry does not have that
   * property.  If a name exists in both lists, the property is present on this
   * entry.
   *
   * @since New in 1.4. 
</member>
        <member name="F:svn_wc_entry_t.cachable_props">
A space-separated list of all properties whose presence/absence is cached
   * in this entry.
   *
   * @see @c present_props.
   *
   * @since New in 1.4. 
</member>
        <member name="F:svn_wc_entry_t.has_prop_mods">
Whether this entry has property modifications.
   *
   * @note For working copies in older formats, this flag is not valid.
   *
   * @see svn_wc_props_modified_p().
   *
   * @since New in 1.4. 
</member>
        <member name="F:svn_wc_entry_t.has_props">
Whether this entry has any working properties.
   * False if this information is not stored in the entry.
   *
   * @since New in 1.4. 
</member>
        <member name="F:svn_wc_entry_t.lock_creation_date">
Lock creation date or 0 if not locked in this WC
   * @since New in 1.2.

</member>
        <member name="F:svn_wc_entry_t.lock_comment">
lock comment or NULL if not locked in this WC or no comment
   * @since New in 1.2.

</member>
        <member name="F:svn_wc_entry_t.lock_owner">
lock owner, or NULL if not locked in this WC
   * @since New in 1.2.

</member>
        <member name="F:svn_wc_entry_t.lock_token">
lock token or NULL if path not locked in this WC
   * @since New in 1.2.

</member>
        <member name="F:svn_wc_entry_t.cmt_author">
last commit author of this item 
</member>
        <member name="F:svn_wc_entry_t.cmt_date">
last date this was changed 
</member>
        <member name="F:svn_wc_entry_t.cmt_rev">
last revision this was changed 
</member>
        <member name="F:svn_wc_entry_t.checksum">
Hex MD5 checksum for the untranslated text base file,
   * can be @c NULL for backwards compatibility.

</member>
        <member name="F:svn_wc_entry_t.prop_time">
last up-to-date time for properties (0 means no information available) 
</member>
        <member name="F:svn_wc_entry_t.text_time">
last up-to-date time for text contents (0 means no information available)

</member>
        <member name="F:svn_wc_entry_t.prejfile">
property reject file 
</member>
        <member name="F:svn_wc_entry_t.conflict_wrk">
working version of conflicted file 
</member>
        <member name="F:svn_wc_entry_t.conflict_new">
new version of conflicted file 
</member>
        <member name="F:svn_wc_entry_t.conflict_old">
old version of conflicted file 
</member>
        <member name="F:svn_wc_entry_t.copyfrom_rev">
copyfrom revision 
</member>
        <member name="F:svn_wc_entry_t.copyfrom_url">
copyfrom location 
</member>
        <member name="F:svn_wc_entry_t.incomplete">
for THIS_DIR entry, implies whole entries file is incomplete 
</member>
        <member name="F:svn_wc_entry_t.absent">
absent -- we know an entry of this name exists, but that's all
      (usually this happens because of authz restrictions)  
</member>
        <member name="F:svn_wc_entry_t.deleted">
deleted, but parent rev lags behind 
</member>
        <member name="F:svn_wc_entry_t.copied">
in a copied state (possibly because the entry is a child of a
      path that is @c svn_wc_schedule_add or @c svn_wc_schedule_replace,
      when the entry itself is @c svn_wc_schedule_normal) 
</member>
        <member name="F:svn_wc_entry_t.schedule">
scheduling (add, delete, replace ...) 
</member>
        <member name="F:svn_wc_entry_t.kind">
node kind (file, dir, ...) 
</member>
        <member name="F:svn_wc_entry_t.uuid">
repository uuid 
</member>
        <member name="F:svn_wc_entry_t.repos">
canonical repository URL or NULL if not known 
</member>
        <member name="F:svn_wc_entry_t.url">
url in repository 
</member>
        <member name="F:svn_wc_entry_t.revision">
base revision 
</member>
        <member name="F:svn_wc_entry_t.name">
entry's name 
</member>
        <member name="T:svn_wc_entry_t">
 Values for the working_size field in svn_wc_entry_t
 when it isn't set to the actual size value of the unchanged
 working file.

 @defgroup svn_wc_entry_working_size_constants Working size constants

 @{

The value of the working size is unknown (hasn't been
 *  calculated and stored in the past for whatever reason).
 *
 * @since New in 1.5

@} 
A working copy entry -- that is, revision control information about
 * one versioned entity.

</member>
        <member name="T:svn_wc_schedule_t">
Administrative subdir.
 *
 * Ideally, this would be completely private to wc internals (in fact,
 * it used to be that adm_subdir() in adm_files.c was the only function
 * who knew the adm subdir's name).  However, import wants to protect
 * against importing administrative subdirs, so now the name is a
 * matter of public record.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.

The schedule states an entry can be in. 
</member>
        <member name="F:svn_wc_schedule_replace">
Slated for replacement (delete + add) 
</member>
        <member name="F:svn_wc_schedule_delete">
Slated for deletion 
</member>
        <member name="F:svn_wc_schedule_add">
Slated for addition 
</member>
        <member name="F:svn_wc_schedule_normal">
Nothing special here 
</member>
        <member name="M:svn_wc_props_modified_p(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *modified_p to non-zero if @a path's properties are modified
 * with regard to the base revision, else set @a modified_p to zero.
 * @a adm_access must be an access baton for @a path.

</member>
        <member name="M:svn_wc_text_modified_p(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *modified_p to non-zero if @a filename's text is modified
 * with regard to the base revision, else set @a *modified_p to zero.
 * @a filename is a path to the file, not just a basename. @a adm_access
 * must be an access baton for @a filename.
 *
 * If @a force_comparison is @c TRUE, this function will not allow
 * early return mechanisms that avoid actual content comparison.
 * Instead, if there is a text base, a full byte-by-byte comparison
 * will be done, and the entry checksum verified as well.  (This means
 * that if the text base is much longer than the working file, every
 * byte of the text base will still be examined.)
 *
 * If @a filename does not exist, consider it unmodified.  If it exists
 * but is not under revision control (not even scheduled for
 * addition), return the error @c SVN_ERR_ENTRY_NOT_FOUND.
 *
 * If @a filename is unmodified but has a timestamp variation then this
 * function may "repair" @a filename's text-time by setting it to
 * @a filename's last modification time.

</member>
        <member name="M:svn_wc_has_binary_prop(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_adm_access_t*,apr_pool_t*)">
Set @a *has_binary_prop to @c TRUE iff @a path has been marked
 * with a property indicating that it is non-text (in other words, binary).
 * @a adm_access is an access baton set that contains @a path.

</member>
        <member name="M:svn_wc_check_wc(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*,apr_pool_t*)">
Set @a *wc_format to @a path's working copy format version number if
 * @a path is a valid working copy directory, else set it to 0.
 * Return error @c APR_ENOENT if @a path does not exist at all.

</member>
        <member name="F:svn_wc_diff_callbacks_t.props_changed">
Similar to @c dir_props_changed in @c svn_wc_diff_callbacks2_t, but this
   * function is called for files as well as directories. 
</member>
        <member name="F:svn_wc_diff_callbacks_t.dir_deleted">
The same as @c dir_deleted in @c svn_wc_diff_callbacks2_t. 
</member>
        <member name="F:svn_wc_diff_callbacks_t.dir_added">
The same as @c dir_added in @c svn_wc_diff_callbacks2_t. 
</member>
        <member name="F:svn_wc_diff_callbacks_t.file_deleted">
Similar to @c file_deleted in @c svn_wc_diff_callbacks2_t, but without
   * the properties. 
</member>
        <member name="F:svn_wc_diff_callbacks_t.file_added">
Similar to @c file_added in @c svn_wc_diff_callbacks2_t, but without
   * property change information.  @a *state applies to the file contents. 
</member>
        <member name="F:svn_wc_diff_callbacks_t.file_changed">
Similar to @c file_changed in @c svn_wc_diff_callbacks2_t, but without
   * property change information.  @a tmpfile2 is never NULL. @a state applies
   * to the file contents. 
</member>
        <member name="T:svn_wc_diff_callbacks_t">
 Similar to @c svn_wc_diff_callbacks2_t, but with file additions/content
 changes and property changes split into different functions.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="F:svn_wc_diff_callbacks2_t.dir_props_changed">
A list of property changes (@a propchanges) was applied to the
   * directory @a path.
   *
   * The array is a list of (@c svn_prop_t) structures.
   *
   * The original list of properties is provided in @a original_props,
   * which is a hash of @c svn_string_t values, keyed on the property
   * name.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a state is non-NULL, set @a *state to the state of the properties
   * after the operation has been performed.  (In practice, this is only
   * useful with merge, not diff; diff callbacks will probably set @a *state
   * to @c svn_wc_notify_state_unknown, since they do not change the state
   * and therefore do not bother to know the state after the operation.)

</member>
        <member name="F:svn_wc_diff_callbacks2_t.dir_deleted">
A directory @a path was deleted.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a state is non-NULL, set @a *state to the state of the item
   * after the delete operation has been performed.  (In practice,
   * this is only useful with merge, not diff; diff callbacks will
   * probably set @a *state to @c svn_wc_notify_state_unknown, since
   * they do not change the state and therefore do not bother to know
   * the state after the operation.)

</member>
        <member name="F:svn_wc_diff_callbacks2_t.dir_added">
A directory @a path was added.  @a rev is the revision that the
   * directory came from.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.

</member>
        <member name="F:svn_wc_diff_callbacks2_t.file_deleted">
A file @a path was deleted.  The [loss of] contents can be seen by
   * comparing @a tmpfile1 and @a tmpfile2.  @a originalprops provides
   * the properties of the file.
   *
   * If known, the @c svn:mime-type value of each file is passed into
   * @a mimetype1 and @a mimetype2;  either or both of the values can
   * be NULL.  The implementor can use this information to decide if
   * (or how) to generate differences.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a state is non-NULL, set @a *state to the state of the item
   * after the delete operation has been performed.  (In practice,
   * this is only useful with merge, not diff; diff callbacks will
   * probably set @a *state to @c svn_wc_notify_state_unknown, since
   * they do not change the state and therefore do not bother to know
   * the state after the operation.)

</member>
        <member name="F:svn_wc_diff_callbacks2_t.file_added">
A file @a path was added.  The contents can be seen by comparing
   * @a tmpfile1 and @a tmpfile2, which represent @a rev1 and @a rev2
   * of the file, respectively.  (If either file is empty, the rev
   * will be 0.)
   *
   * If known, the @c svn:mime-type value of each file is passed into
   * @a mimetype1 and @a mimetype2;  either or both of the values can
   * be NULL.  The implementor can use this information to decide if
   * (or how) to generate differences.
   *
   * @a propchanges is an array of (@c svn_prop_t) structures.  If it contains
   * any elements, the original list of properties is provided in
   * @a originalprops, which is a hash of @c svn_string_t values, keyed on the
   * property name.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a contentstate is non-NULL, set @a *contentstate to the state of the
   * file contents after the operation has been performed.  The same
   * applies for @a propstate regarding the property changes.  (In practice,
   * this is only useful with merge, not diff; diff callbacks will
   * probably set @a *contentstate and *propstate to
   * @c svn_wc_notify_state_unknown, since they do not change the state
   * and therefore do not bother to know the state after the operation.)
   *

</member>
        <member name="F:svn_wc_diff_callbacks2_t.file_changed">
A file @a path has changed.  If @a tmpfile2 is non-NULL, the
   * contents have changed and those changes can be seen by comparing
   * @a tmpfile1 and @a tmpfile2, which represent @a rev1 and @a rev2 of
   * the file, respectively.
   *
   * If known, the @c svn:mime-type value of each file is passed into
   * @a mimetype1 and @a mimetype2;  either or both of the values can
   * be NULL.  The implementor can use this information to decide if
   * (or how) to generate differences.
   *
   * @a propchanges is an array of (@c svn_prop_t) structures. If it has
   * any elements, the original list of properties is provided in
   * @a originalprops, which is a hash of @c svn_string_t values, keyed on the
   * property name.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a contentstate is non-NULL, set @a *contentstate to the state of
   * the file contents after the operation has been performed.  The same
   * applies for @a propstate regarding the property changes.  (In
   * practice, this is only useful with merge, not diff; diff callbacks
   * will probably set @a *contentstate and @a *propstate to
   * @c svn_wc_notify_state_unknown, since they do not change the state and
   * therefore do not bother to know the state after the operation.)

</member>
        <member name="T:svn_wc_diff_callbacks2_t">
@} 
 A callback vtable invoked by our diff-editors, as they receive
 diffs from the server.  'svn diff' and 'svn merge' both implement
 their own versions of this table.

 @since New in 1.2.

</member>
        <member name="D:svn_wc_conflict_resolver_func_t">
A callback used in svn_client_merge3(), svn_client_update3(), and
 * svn_client_switch2() for resolving conflicts during the application
 * of a tree delta to a working copy.
 *
 * @a description describes the exact nature of the conflict, and
 * provides information to help resolve it.  @a baton is a closure
 * object; it should be provided by the implementation, and passed by
 * the caller.  All allocations should be performed in @a pool.  When
 * finished, the callback signals its resolution by returning a
 * structure in @a *result.  (See @c svn_wc_conflict_result_t.)
 *
 * Implementations of this callback are free to present the conflict
 * using any user interface.  This may include simple contextual
 * conflicts in a file's text or properties, or more complex
 * 'tree'-based conflcts related to obstructed additions, deletions,
 * and edits.  The callback implementation is free to decide which
 * sorts of conflicts to handle; it's also free to decide which types
 * of conflicts are automatically resolvable and which require user
 * interaction.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_create_conflict_result(svn_wc_conflict_choice_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Allocate an @c svn_wc_conflict_result_t structure in @a pool,
 initialize and return it.

 Set the @c choice field of the structure to @a choice, and @c
 merged_file to @a merged_file.  Set all other fields to their @c
 _unknown, @c NULL or invalid value, respectively.

 @since New in 1.5.

</member>
        <member name="F:svn_wc_conflict_result_t.merged_file">
If not NULL, this is a path to a file which contains the client's
      (or more likely, the user's) merging of the three values in
      conflict.  libsvn_wc accepts this file if (and only if) @c choice
      is set to @c svn_wc_conflict_choose_merged.
</member>
        <member name="F:svn_wc_conflict_result_t.choice">
A choice to either delay the conflict resolution or select a
      particular file to resolve the conflict. 
</member>
        <member name="T:svn_wc_conflict_result_t">
The final result returned by @a svn_wc_conflict_resolver_func_t.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.  Instead,
 * construct this structure using @c svn_wc_create_conflict_result()
 * below.
 *
 * @since New in 1.5.

</member>
        <member name="T:svn_wc_conflict_choice_t">
The way in which the conflict callback chooses a course of action.
 *
 * @since New in 1.5.

</member>
        <member name="F:svn_wc_conflict_description_t.merged_file">
merged version; may contain conflict markers 
</member>
        <member name="F:svn_wc_conflict_description_t.my_file">
my locally-edited version of the file 
</member>
        <member name="F:svn_wc_conflict_description_t.their_file">
their version of the file 
</member>
        <member name="F:svn_wc_conflict_description_t.base_file">
If this is text-conflict and involves the merging of two files
   * descended from a common ancestor, here are the paths of up to
   * four fulltext files that can be used to interactively resolve the
   * conflict.  All four files will be in repository-normal form -- LF
   * line endings and contracted keywords.  (If any of these files are
   * not available, they default to NULL.)
   *
   * On the other hand, if this is a property-conflict, then these
   * paths represent temporary files that contain the three different
   * property-values in conflict.  The fourth path (@c merged_file)
   * may or may not be NULL;  if set, it represents libsvn_wc's
   * attempt to merge the property values together.  (Remember that
   * property values are technically binary values, and thus can't
   * always be merged.)

</member>
        <member name="F:svn_wc_conflict_description_t.reason">
The reason for the conflict. 
</member>
        <member name="F:svn_wc_conflict_description_t.action">
The action being attempted on @c path. 
</member>
        <member name="F:svn_wc_conflict_description_t.access">
If not NULL, an open working copy access baton to either the
   *  path itself (if @c path is a directory), or to the parent
   *  directory (if @c path is a file.) 
</member>
        <member name="F:svn_wc_conflict_description_t.mime_type">
mime-type of the object 
</member>
        <member name="F:svn_wc_conflict_description_t.is_binary">
The following only apply to file objects:
   *   - Whether svn thinks the object is a binary file.
   *   - If available (non-NULL), the svn:mime-type property of the path 
</member>
        <member name="F:svn_wc_conflict_description_t.property_name">
Only set if this is a property conflict. 
</member>
        <member name="F:svn_wc_conflict_description_t.kind">
What sort of conflict are we describing? 
</member>
        <member name="F:svn_wc_conflict_description_t.node_kind">
The node type of the path being operated on 
</member>
        <member name="F:svn_wc_conflict_description_t.path">
The path that is being operated on 
</member>
        <member name="T:svn_wc_conflict_description_t">
A struct that describes a conflict that has occurred in the
 * working copy.  Passed to @c svn_wc_conflict_resolver_func_t.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.
 *
 * @since New in 1.5.

</member>
        <member name="T:svn_wc_conflict_kind_t">
The type of conflict being described by an @c
 * svn_wc_conflict_description_t (see below).
 *
 * @since New in 1.5.

</member>
        <member name="T:svn_wc_conflict_reason_t">
The pre-existing condition which is causing a state of conflict.
 *
 * @since New in 1.5.

</member>
        <member name="T:svn_wc_conflict_action_t">
 Interactive conflict handling

 @defgroup svn_wc_conflict Conflict callback functionality

 @{

 This API gives a Subversion client application the opportunity to
 define a callback that allows the user to resolve conflicts
 interactively during updates and merges.

 If a conflict is discovered, libsvn_wc invokes the callback with an
 @c svn_wc_conflict_description_t.  This structure describes the
 path in conflict, whether it's a text or property conflict, and may
 also present up to three files that can be used to resolve the
 conflict (perhaps by launching an editor or 3rd-party merging
 tool).  The structure also provides a possible fourth file (@c
 merged_file) which, if not NULL, represents libsvn_wc's attempt to
 contextually merge the first three files.  (Note that libsvn_wc
 will not attempt to merge a file that it believes is binary, and it
 will only attempt to merge property values it believes to be a
 series of multi-line text.)

 When the callback is finished interacting with the user, it
 responds by returning a @c svn_wc_conflict_result_t.  This
 structure indicates whether the user wants to postpone the conflict
 for later (allowing libsvn_wc to mark the path "conflicted" as
 usual), or whether the user wants libsvn_wc to use one of the four
 files as the "final" state for resolving the conflict immediately.

 Note that the callback is at liberty (and encouraged) to merge the
 three files itself.  If it does so, it signals this to libsvn_wc by
 returning a choice of @c svn_wc_conflict_choose_merged.  To return
 the 'final' merged file to libsvn_wc, the callback has the option of
 either:

    - editing the original @c merged_file in-place

        or, if libsvn_wc never supplied a merged_file in the
        description structure (i.e. passed NULL for that field),

    - return the merged file in the @c svn_wc_conflict_result_t.


The type of action being attempted on an object.
 *
 * @since New in 1.5.

</member>
        <member name="D:svn_wc_get_file_t">
@} 
 A simple callback type to wrap svn_ra_get_file();  see that
 docstring for more information.

 This technique allows libsvn_client to 'wrap' svn_ra_get_file() and
 pass it down into libsvn_wc functions, thus allowing the WC layer
 to legally call the RA function via (blind) callback.

 @since New in 1.5

</member>
        <member name="D:svn_wc_notify_func_t">
 Similar to @c svn_wc_notify_func2_t, but takes the information as arguments
 instead of struct fields.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="D:svn_wc_notify_func2_t">
 Notify the world that @a notify-&gt;action has happened to @a notify-&gt;path.

 Recommendation: callers of @c svn_wc_notify_func2_t should avoid
 invoking it multiple times on the same path within a given
 operation, and implementations should not bother checking for such
 duplicate calls.  For example, in an update, the caller should not
 invoke the notify func on receiving a prop change and then again
 on receiving a text change.  Instead, wait until all changes have
 been received, and then invoke the notify func once (from within
 an @c svn_delta_editor_t's close_file(), for example), passing
 the appropriate @a notify-&gt;content_state and @a notify-&gt;prop_state flags.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_dup_notify(svn_wc_notify_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a deep copy of @a notify, allocated in @a pool.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_create_notify(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_wc_notify_action_t,apr_pool_t*)">
 Allocate an @c svn_wc_notify_t structure in @a pool, initialize and return
 it.

 Set the @c path field of the created struct to @a path, and @c action to
 @a action.  Set all other fields to their @c _unknown, @c NULL or
 invalid value, respectively.

 @since New in 1.2.

</member>
        <member name="F:svn_wc_notify_t.merge_range">
When @c action is @c svn_wc_notify_merge_begin, and both the
      left and right sides of the merge are from the same URL.  In all
      other cases, it is @c NULL.  
</member>
        <member name="F:svn_wc_notify_t.changelist_name">
When @c action is @c svn_wc_notify_changelist_add or name.  In all other
   * cases, it is @c NULL. 
</member>
        <member name="F:svn_wc_notify_t.revision">
When @c action is @c svn_wc_notify_update_completed, target revision
   * of the update, or @c SVN_INVALID_REVNUM if not available; when @c
   * action is @c svn_wc_notify_blame_revision, processed revision.
   * In all other cases, it is @c SVN_INVALID_REVNUM. 
</member>
        <member name="F:svn_wc_notify_t.lock_state">
Reflects the addition or removal of a lock token in the working copy. 
</member>
        <member name="F:svn_wc_notify_t.prop_state">
The type of notification that is occurring about node properties. 
</member>
        <member name="F:svn_wc_notify_t.content_state">
The type of notification that is occurring about node content. 
</member>
        <member name="F:svn_wc_notify_t.err">
Points to an error describing the reason for the failure when @c
   * action is @c svn_wc_notify_failed_lock or @c svn_wc_notify_failed_unlock.
   * Is @c NULL otherwise. 
</member>
        <member name="F:svn_wc_notify_t.lock">
Points to the lock structure received from the repository when
   * @c action is @c svn_wc_notify_locked.  For other actions, it is
   * @c NULL. 
</member>
        <member name="F:svn_wc_notify_t.mime_type">
If non-NULL, indicates the mime-type of @c path.
   * It is always @c NULL for directories. 
</member>
        <member name="F:svn_wc_notify_t.kind">
Node kind of @c path. 
</member>
        <member name="F:svn_wc_notify_t.action">
Action that describes what happened to @c path. 
</member>
        <member name="F:svn_wc_notify_t.path">
Path, either absolute or relative to the current working directory
   * (i.e., not relative to an anchor). 
</member>
        <member name="T:svn_wc_notify_t">
 Structure used in the @c svn_wc_notify_func2_t function.

 @c kind, @c content_state, @c prop_state and @c lock_state are from
 after @c action, not before.

 @note If @c action is @c svn_wc_notify_update, then @c path has
 already been installed, so it is legitimate for an implementation of
 @c svn_wc_notify_func2_t to examine @c path in the working copy.

 @note The purpose of the @c kind, @c mime_type, @c content_state, and
 @c prop_state fields is to provide "for free" information that an
 implementation is likely to want, and which it would otherwise be
 forced to deduce via expensive operations such as reading entries
 and properties.  However, if the caller does not have this
 information, it will simply pass the corresponding `*_unknown'
 values, and it is up to the implementation how to handle that
 (i.e., whether to attempt deduction, or just to punt and
 give a less informative notification).

 @note Callers of notification functions should use svn_wc_create_notify()
 to create structures of this type to allow for extensibility.

 @since New in 1.2.

</member>
        <member name="T:svn_wc_notify_lock_state_t">
 What happened to a lock during an operation.

 @since New in 1.2.

</member>
        <member name="F:svn_wc_notify_lock_state_unlocked">
The item was unlocked. 
</member>
        <member name="F:svn_wc_notify_lock_state_locked">
The item was locked. 
</member>
        <member name="F:svn_wc_notify_lock_state_unchanged">
The lock wasn't changed. 
</member>
        <member name="T:svn_wc_notify_state_t">
The type of notification that is occurring. 
</member>
        <member name="F:svn_wc_notify_state_conflicted">
Modified state got conflicting mods. 
</member>
        <member name="F:svn_wc_notify_state_merged">
Modified state had mods merged in. 
</member>
        <member name="F:svn_wc_notify_state_changed">
Pristine state was modified. 
</member>
        <member name="F:svn_wc_notify_state_obstructed">
An unversioned item obstructed work. 
</member>
        <member name="F:svn_wc_notify_state_missing">
The item wasn't present. 
</member>
        <member name="F:svn_wc_notify_state_unchanged">
The state did not change. 
</member>
        <member name="F:svn_wc_notify_state_unknown">
Notifier doesn't know or isn't saying. 
</member>
        <member name="T:svn_wc_notify_action_t">
 @defgroup svn_wc_notifications Notification callback handling
 @{

 In many cases, the WC library will scan a working copy and make
 changes. The caller usually wants to know when each of these changes
 has been made, so that it can display some kind of notification to
 the user.

 These notifications have a standard callback function type, which
 takes the path of the file that was affected, and a caller-
 supplied baton.

 Note that the callback is a 'void' return -- this is a simple
 reporting mechanism, rather than an opportunity for the caller to
 alter the operation of the WC library.

 Note also that some of the actions are used across several
 different Subversion commands.  For example, the update actions are
 also used for checkouts, switches, and merges.

The type of action occurring. 
</member>
        <member name="F:svn_wc_notify_update_replace">
Replace notification. 
</member>
        <member name="F:svn_wc_notify_merge_begin">
A merge operation (to path) has begun.  See @c merge_range in
      @c svn_wc_notify_t.  @since New in 1.5   
</member>
        <member name="F:svn_wc_notify_changelist_moved">
Warn user that a path has moved from one changelist to another.
      @since New in 1.5. 
</member>
        <member name="F:svn_wc_notify_changelist_failed">
Failed to update a path's changelist association. @since New in 1.5. 
</member>
        <member name="F:svn_wc_notify_changelist_clear">
Changelist name cleared. @since New in 1.5. 
</member>
        <member name="F:svn_wc_notify_changelist_set">
Changelist name set. @since New in 1.5. 
</member>
        <member name="F:svn_wc_notify_exists">
Tried adding a path that already exists. @since New in 1.5. 
</member>
        <member name="F:svn_wc_notify_failed_unlock">
Failed to unlock a path. @since New in 1.2. 
</member>
        <member name="F:svn_wc_notify_failed_lock">
Failed to lock a path. @since New in 1.2. 
</member>
        <member name="F:svn_wc_notify_unlocked">
Unlocking a path. @since New in 1.2. 
</member>
        <member name="F:svn_wc_notify_locked">
Locking a path. @since New in 1.2. 
</member>
        <member name="F:svn_wc_notify_blame_revision">
Processed a single revision's blame. 
</member>
        <member name="F:svn_wc_notify_commit_postfix_txdelta">
Transmitting post-fix text-delta data for a file. 
</member>
        <member name="F:svn_wc_notify_commit_replaced">
Committing a replacement. 
</member>
        <member name="F:svn_wc_notify_commit_deleted">
Committing a deletion. 
</member>
        <member name="F:svn_wc_notify_commit_added">
Committing an addition. 
</member>
        <member name="F:svn_wc_notify_commit_modified">
Committing a modification. 
</member>
        <member name="F:svn_wc_notify_status_external">
Running status on an external module. 
</member>
        <member name="F:svn_wc_notify_status_completed">
The last notification in a status (including status on externals). 
</member>
        <member name="F:svn_wc_notify_update_external">
Updating an external module. 
</member>
        <member name="F:svn_wc_notify_update_completed">
The last notification in an update (including updates of externals). 
</member>
        <member name="F:svn_wc_notify_update_update">
Got any other action in an update. 
</member>
        <member name="F:svn_wc_notify_update_add">
Got an add in an update. 
</member>
        <member name="F:svn_wc_notify_update_delete">
Got a delete in an update. 
</member>
        <member name="F:svn_wc_notify_skip">
Skipping a path. 
</member>
        <member name="F:svn_wc_notify_resolved">
Resolving a conflict. 
</member>
        <member name="F:svn_wc_notify_failed_revert">
A revert operation has failed. 
</member>
        <member name="F:svn_wc_notify_revert">
Reverting a modified path. 
</member>
        <member name="F:svn_wc_notify_restore">
Restoring a missing path from the pristine text-base. 
</member>
        <member name="F:svn_wc_notify_delete">
Deleting a versioned path. 
</member>
        <member name="F:svn_wc_notify_copy">
Copying a versioned path. 
</member>
        <member name="F:svn_wc_notify_add">
Adding a path to revision control. 
</member>
        <member name="M:svn_wc_parse_externals_description(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Similar to svn_wc_parse_externals_description2(), but returns the
 parsed externals in a hash instead of an array.  This function
 should not be used, as storing the externals in a hash causes their
 order of evaluation to be not easily identifiable.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_parse_externals_description2(apr_array_header_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Similar to svn_wc_parse_externals_description3() with @a
 canonicalize_url set to @c TRUE, but returns an array of @c
 svn_wc_external_item_t * objects instead of @c
 svn_wc_external_item2_t * objects

 @since New in 1.1.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_parse_externals_description3(apr_array_header_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
 If @a externals_p is non-NULL, set @a *externals_p to an array of
 @c svn_wc_external_item2_t * objects based on @a desc.  The @a url
 member of the objects will be canonicalized if @a canonicalize_url
 is @c TRUE.

 If the format of @a desc is invalid, don't touch @a *externals_p and
 return @c SVN_ERR_CLIENT_INVALID_EXTERNALS_DESCRIPTION.  Thus, if
 you just want to check the validity of an externals description,
 and don't care about the parsed result, pass NULL for @a externals_p.

 The format of @a desc is the same as for values of the directory
 property @c SVN_PROP_EXTERNALS, which see.

 Allocate the table, keys, and values in @a pool.

 Use @a parent_directory only in constructing error strings.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_external_item_dup(svn_wc_external_item_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a duplicate of @a item, allocated in @a pool.  No part of the new
 item will be shared with @a item.

 @since New in 1.3.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="F:svn_wc_external_item_t.revision">
Same as @c svn_wc_external_item2_t.revision 
</member>
        <member name="F:svn_wc_external_item_t.url">
Same as @c svn_wc_external_item2_t.url 
</member>
        <member name="F:svn_wc_external_item_t.target_dir">
Same as @c svn_wc_external_item2_t.target_dir 
</member>
        <member name="T:svn_wc_external_item_t">
 One external item.  Similar to svn_wc_external_item2_t, except
 @a revision is interpreted as both the operational revision and the
 peg revision.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_wc_external_item2_dup(svn_wc_external_item2_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a duplicate of @a item, allocated in @a pool.  No part of the new
 item will be shared with @a item.

 @since New in 1.5.

</member>
        <member name="M:svn_wc_external_item_create(svn_wc_external_item2_t!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
 Initialize an external item.
 Set @a *item to an external item object, allocated in @a pool.

 In order to avoid backwards compatibility problems, this function
 is used to intialize and allocate the @c svn_wc_external_item2_t
 structure rather than doing so explicitly, as the size of this
 structure may change in the future.

 The current implementation never returns error, but callers should
 still check for error, for compatibility with future versions.

 @since New in 1.5.

</member>
        <member name="F:svn_wc_external_item2_t.peg_revision">
The peg revision to use when checking out.  The only valid kinds are
      svn_opt_revision_number, svn_opt_revision_date, and
      svn_opt_revision_head. 
</member>
        <member name="F:svn_wc_external_item2_t.revision">
What revision to check out.  The only valid kinds for this are
      svn_opt_revision_number, svn_opt_revision_date, and
      svn_opt_revision_head. 
</member>
        <member name="F:svn_wc_external_item2_t.url">
Where to check out from. 
</member>
        <member name="F:svn_wc_external_item2_t.target_dir">
The name of the subdirectory into which this external should be
      checked out.  This is relative to the parent directory that
      holds this external item.  (Note that these structs are often
      stored in hash tables with the target dirs as keys, so this
      field will often be redundant.) 
</member>
        <member name="T:svn_wc_external_item2_t">
One external item.  This usually represents one line from an
 * svn:externals description but with the path and URL
 * canonicalized.
 *
 * In order to avoid backwards compatibility problems clients should use
 * svn_wc_external_item_create() to allocate and intialize this structure
 * instead of doing so themselves.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_traversed_depths(apr_hash_t**,svn_wc_traversal_info_t*)">
Set @a *depths to a hash table mapping <tt>const char *</tt>
 * directory names (directories traversed by @a traversal_info) to
 * <tt>const char *</tt> values (the depths of those directories, as
 * converted by svn_depth_to_word()).
 *
 * @a traversal_info is obtained from svn_wc_init_traversal_info(), but is
 * only useful after it has been passed through another function, such
 * as svn_wc_crawl_revisions(), svn_wc_get_update_editor(),
 * svn_wc_get_switch_editor(), etc.
 *
 * The dir names are full paths -- that is, anchor plus target, not target
 * alone.  The values are not allocated, they are static constant strings.
 * Although the values are never NULL, not all directories traversed
 * are necessarily listed.  For example, directories which did not
 * have an svn:externals property set or modified are not included.
 *
 * The hashes and keys have the same lifetime as @a traversal_info.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_wc_edited_externals(apr_hash_t**,apr_hash_t**,svn_wc_traversal_info_t*)">
Set @a *externals_old and @a *externals_new to hash tables representing
 * changes to values of the svn:externals property on directories
 * traversed by @a traversal_info.
 *
 * @a traversal_info is obtained from svn_wc_init_traversal_info(), but is
 * only useful after it has been passed through another function, such
 * as svn_wc_crawl_revisions(), svn_wc_get_update_editor(),
 * svn_wc_get_switch_editor(), etc.
 *
 * Each hash maps <tt>const char *</tt> directory names onto
 * <tt>const char *</tt> values of the externals property for that directory.
 * The dir names are full paths -- that is, anchor plus target, not target
 * alone. The values are not parsed, they are simply copied raw, and are
 * never NULL: directories that acquired or lost the property are
 * simply omitted from the appropriate table.  Directories whose value
 * of the property did not change show the same value in each hash.
 *
 * The hashes, keys, and values have the same lifetime as @a traversal_info.

</member>
        <member name="M:svn_wc_init_traversal_info(apr_pool_t*)">
Return a new, empty traversal info object, allocated in @a pool. 
</member>
        <member name="T:svn_wc_traversal_info_t">
Traversal information is information gathered by a working copy
 * crawl or update.  For example, the before and after values of the
 * svn:externals property are important after an update, and since
 * we're traversing the working tree anyway (a complete traversal
 * during the initial crawl, and a traversal of changed paths during
 * the checkout/update/switch), it makes sense to gather the
 * property's values then instead of making a second pass.

</member>
        <member name="M:svn_wc_set_adm_dir(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Use @a name for the administrative directory in the working copy.
 Use @a pool for any temporary allocations.

 The list of valid names is limited.  Currently only ".svn" (the
 default) and "_svn" are allowed.

 @note This function changes global (per-process) state and must be
 called in a single-threaded context during the initialization of a
 Subversion client.

 @since New in 1.3.

</member>
        <member name="M:svn_wc_get_adm_dir(apr_pool_t*)">
 Return the name of the administrative directory.
 Use @a pool for any temporary allocations.

 The returned pointer will refer to either a statically allocated
 string, or to a string allocated in @a pool.

 @since New in 1.3.

</member>
        <member name="M:svn_wc_is_adm_dir(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return @c TRUE if @a name is the name of the WC administrative
 directory.  Use @a pool for any temporary allocations.  Only works
 with base directory names, not paths or URIs.

 For compatibility, the default name (.svn) will always be treated
 as an admin dir name, even if the working copy is actually using an
 alternative name.

 @since New in 1.3.

</member>
        <member name="M:svn_wc_locked(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *locked to non-zero if @a path is locked, else set it to zero. 
</member>
        <member name="M:svn_wc_adm_locked(svn_wc_adm_access_t*)">
Return @c TRUE is the access baton @a adm_access has a write lock,
 * @c FALSE otherwise. Compared to svn_wc_locked() this is a cheap, fast
 * function that doesn't access the filesystem.

</member>
        <member name="M:svn_wc_adm_access_pool(svn_wc_adm_access_t*)">
Return the pool used by access baton @a adm_access 
</member>
        <member name="M:svn_wc_adm_access_path(svn_wc_adm_access_t*)">
Return the path used to open the access baton @a adm_access 
</member>
        <member name="M:svn_wc_adm_close(svn_wc_adm_access_t*)">
Give up the access baton @a adm_access, and its lock if any. This will
 * recursively close any batons in the same set that are direct
 * subdirectories of @a adm_access.  Any physical locks will be removed from
 * the working copy.  Lock removal is unconditional, there is no check to
 * determine if cleanup is required.

</member>
        <member name="M:svn_wc_adm_probe_try(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_adm_probe_try2(), but with @a tree_lock instead of
 @a levels_to_lock.  @a levels_to_lock is set to -1 if @a tree_lock
 is @c TRUE, else 0.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_adm_probe_try2(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_adm_probe_try3() without the cancel
 functionality.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_adm_probe_try3(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Try various ways to obtain an access baton for @a path.

 First, try to obtain @a *adm_access via svn_wc_adm_probe_retrieve(),
 but if this fails because @a associated can't give a baton for
 @a path or @a path's parent, then try svn_wc_adm_probe_open3(),
 this time passing @a write_lock and @a levels_to_lock.  If there is
 still no access because @a path is not a versioned directory, then
 just set @a *adm_access to NULL and return success.  But if it is
 because @a path is locked, then return the error @c SVN_ERR_WC_LOCKED,
 and the effect on @a *adm_access is undefined.  (Or if the attempt
 fails for any other reason, return the corresponding error, and the
 effect on @a *adm_access is also undefined.)

 If svn_wc_adm_probe_open3() succeeds, then add @a *adm_access to
 @a associated.

 If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 if the client has cancelled the operation.

 Use @a pool only for local processing, not to allocate @a *adm_access.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_adm_probe_retrieve(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Check the working copy to determine the node type of @a path.  If
 * @a path is a versioned directory then the behaviour is like that of
 * svn_wc_adm_retrieve(), otherwise, if @a path is a file, an unversioned
 * directory, or does not exist, then the behaviour is like that of
 * svn_wc_adm_retrieve() with @a path replaced by the parent directory of
 * @a path.

</member>
        <member name="M:svn_wc_adm_retrieve(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return, in @a *adm_access, a pointer to an existing access baton associated
 * with @a path.  @a path must be a directory that is locked as part of the
 * set containing the @a associated access baton.
 *
 * If the requested access baton is marked as missing in, or is simply
 * absent from, @a associated, return SVN_ERR_WC_NOT_LOCKED.
 *
 * @a pool is used only for local processing, it is not used for the batons.

</member>
        <member name="M:svn_wc_adm_open_anchor(svn_wc_adm_access_t**,svn_wc_adm_access_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Open access batons for @a path and return in @a *anchor_access and
 @a *target the anchor and target required to drive an editor.  Return
 in @a *target_access the access baton for the target, which may be the
 same as @a *anchor_access.  All the access batons will be in the
 @a *anchor_access set.

 @a levels_to_lock determines the levels_to_lock used when opening
 @a path if @a path is a versioned directory, @a levels_to_lock is
 ignored otherwise.  If @a write_lock is  @c TRUE the access batons
 will hold write locks.

 If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 if the client has cancelled the operation.

 This function is essentially a combination of svn_wc_adm_open3() and
 svn_wc_get_actual_target(), with the emphasis on reducing physical IO.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_adm_probe_open(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_adm_probe_open2(), but with @a tree_lock instead of
 @a levels_to_lock.  @a levels_to_lock is set to -1 if @a tree_lock
 is @c TRUE, else 0.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_adm_probe_open2(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_adm_probe_open3() without the cancel
 functionality.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_adm_probe_open3(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Checks the working copy to determine the node type of @a path.  If
 @a path is a versioned directory then the behaviour is like that of
 svn_wc_adm_open3(), otherwise, if @a path is a file or does not
 exist, then the behaviour is like that of svn_wc_adm_open3() with
 @a path replaced by the parent directory of @a path.  If @a path is
 an unversioned directory, the behaviour is also like that of
 svn_wc_adm_open3() on the parent, except that if the open fails,
 then the returned SVN_ERR_WC_NOT_DIRECTORY error refers to @a path,
 not to @a path's parent.

 @since New in 1.2.

</member>
        <member name="M:svn_wc_adm_open(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_adm_open2(), but with @a tree_lock instead of
 @a levels_to_lock.  @a levels_to_lock is set to -1 if @a tree_lock
 is @c TRUE, else 0.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_wc_adm_open2(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Similar to svn_wc_adm_open3(), but without cancellation support.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_wc_adm_open3(svn_wc_adm_access_t**,svn_wc_adm_access_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Return, in @a *adm_access, a pointer to a new access baton for the working
 copy administrative area associated with the directory @a path.  If
 @a write_lock is TRUE the baton will include a write lock, otherwise the
 baton can only be used for read access.  If @a path refers to a directory
 that is already write locked then the error @c SVN_ERR_WC_LOCKED will be
 returned.  The error @c SVN_ERR_WC_NOT_DIRECTORY will be returned if
 @a path is not a versioned directory.

 If @a associated is an open access baton then @a adm_access will be added
 to the set containing @a associated.  @a associated can be @c NULL, in
 which case @a adm_access is the start of a new set.

 @a levels_to_lock specifies how far to lock.  Zero means just the specified
 directory.  Any negative value means to lock the entire working copy
 directory hierarchy under @a path.  A positive value indicates the number of
 levels of directories to lock -- 1 means just immediate subdirectories, 2
 means immediate subdirectories and their subdirectories, etc.  All the
 access batons will become part of the set containing @a adm_access.  This
 is an all-or-nothing option, if it is not possible to lock all the
 requested directories then an error will be returned and @a adm_access will
 be invalid, with the exception that subdirectories of @a path that are
 missing from the physical filesystem will not be locked and will not cause
 an error.  The error @c SVN_ERR_WC_LOCKED will be returned if a
 subdirectory of @a path is already write locked.

 If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 if the client has cancelled the operation.

 @a pool will be used to allocate memory for the baton and any subsequently
 cached items.  If @a adm_access has not been closed when the pool is
 cleared, it will be closed automatically at that point, and removed from
 its set.  A baton closed in this way will not remove physical locks from
 the working copy if cleanup is required.

 The first baton in a set, with @a associated passed as @c NULL, must have
 the longest lifetime of all the batons in the set.  This implies it must be
 the root of the hierarchy.

 @since New in 1.2.

</member>
        <member name="T:svn_wc_adm_access_t">
@defgroup svn_wc  Working copy management
@{

Flags for use with svn_wc_translated_file2
 *
 * @defgroup translate_flags Translation flags
 *
 * @{

Translate from Normal Form.
   *
   * The working copy text bases and repository files are stored
   * in normal form.  Some files' contents - or ever representation -
   * differs between the working copy and the normal form.  This flag
   * specifies to take the latter form as input and transform it
   * to the former.
   *
   * Either this flag or @c SVN_WC_TRANSLATE_TO_NF should be specified,
   * but not both.

Translate to Normal Form.
   *
   * Either this flag or @c SVN_WC_TRANSLATE_FROM_NF should be specified,
   * but not both.

Force repair of eol styles, making sure the output file consistently
   * contains the one eol style as specified by the svn:eol-style
   * property and the required translation direction.
   *

Don't register a pool cleanup to delete the output file 
Guarantee a new file is created on successful return.
   * The default shortcuts translation by returning the path
   * of the untranslated file when no translation is required.

Use a non-wc-local tmp directory for creating output files,
   * instead of in the working copy admin tmp area which is the default.
   *
   * @since New in 1.4.

@} 
Baton for access to a working copy administrative area.
 *
 * One day all such access will require a baton, we're not there yet.
 *
 * Access batons can be grouped into sets, by passing an existing open
 * baton when opening a new baton.  Given one baton in a set, other batons
 * may be retrieved.  This allows an entire hierarchy to be locked, and
 * then the set of batons can be passed around by passing a single baton.

</member>
        <member name="M:svn_wc_version">
 Get libsvn_wc version information.

 @since New in 1.1.

</member>
        <member name="M:svn_ra_get_ra_library(svn_ra_plugin_t**,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return an RA vtable-@a library which can handle URL.  A number of
 svn_client_* routines will call this internally, but client apps might
 use it too.  $a ra_baton is a baton obtained by a call to
 svn_ra_init_ra_libs().

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_ra_init_ra_libs(System.Void**,apr_pool_t*)">
 Initialize the compatibility wrapper, using @a pool for any allocations.
 The caller must hold on to @a ra_baton as long as the RA library is used.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_ra_serf_init(System.Int32,apr_pool_t*,apr_hash_t*)">
Initialize libsvn_ra_serf.
 *
 * @since New in 1.4.
 * @deprecated Provided for backward compatibility with the 1.1 API. 
</member>
        <member name="M:svn_ra_svn_init(System.Int32,apr_pool_t*,apr_hash_t*)">
Initialize libsvn_ra_svn.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API. 
</member>
        <member name="M:svn_ra_local_init(System.Int32,apr_pool_t*,apr_hash_t*)">
Initialize libsvn_ra_local.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API. 
</member>
        <member name="M:svn_ra_dav_init(System.Int32,apr_pool_t*,apr_hash_t*)">
 The current ABI (Application Binary Interface) version for the
 RA plugin model. This version number will change when the ABI
 between the SVN core (e.g. libsvn_client) and the RA plugin changes.

 An RA plugin should verify that the passed version number is acceptable
 before accessing the rest of the parameters, and before returning any
 information.

 It is entirely acceptable for an RA plugin to accept multiple ABI
 versions. It can simply interpret the parameters based on the version,
 and it can return different plugin structures.


 <pre>
 VSN  DATE        REASON FOR CHANGE
 ---  ----------  ------------------------------------------------
   1  2001-02-17  Initial revision.
   2  2004-06-29  Preparing for svn 1.1, which adds new RA vtable funcs.
      2005-01-19  Rework the plugin interface and don't provide the vtable
                  to the client.  Separate ABI versions are no longer used.
 </pre>

 @deprecated Provided for backward compatibility with the 1.0 API.

Initialize libsvn_ra_neon.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API. 
</member>
        <member name="D:svn_ra_init_func_t">
 All "ra_FOO" implementations *must* export a function named
 svn_ra_FOO_init() of type @c svn_ra_init_func_t.

 When called by libsvn_client, this routine adds an entry (or
 entries) to the hash table for any URL schemes it handles.  The hash
 value must be of type (<tt>@c svn_ra_plugin_t *</tt>).  @a pool is a
 pool for allocating configuration / one-time data.

 This type is defined to use the "C Calling Conventions" to ensure that
 abi_version is the first parameter. The RA plugin must check that value
 before accessing the other parameters.

 ### need to force this to be __cdecl on Windows... how??

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="F:svn_ra_plugin_t.get_version">
 Return the plugin's version information.

 @since New in 1.1.

</member>
        <member name="F:svn_ra_plugin_t.get_file_revs">
 Call svn_ra_get_file_revs() with the session associated with
 @a session_baton and all other arguments.

 @since New in 1.1.

</member>
        <member name="F:svn_ra_plugin_t.get_locations">
 Call svn_ra_get_locations() with the session associated with
 @a session_baton and all other arguments.

 @since New in 1.1.

</member>
        <member name="F:svn_ra_plugin_t.get_repos_root">
Call svn_ra_get_repos_root() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_uuid">
Call svn_ra_get_uuid() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.check_path">
Call svn_ra_check_path() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_log">
Call svn_ra_get_log() with the session associated with
   * @a session_baton and all other arguments.  @a limit is set to 0.

</member>
        <member name="F:svn_ra_plugin_t.do_diff">
Call svn_ra_do_diff() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.do_status">
Call svn_ra_do_status() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.do_switch">
Call svn_ra_do_switch() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.do_update">
Call svn_ra_do_update() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_dir">
Call svn_ra_get_dir() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_file">
Call svn_ra_get_file() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_commit_editor">
Call svn_ra_get_commit_editor() with the session associated with
   * @a session_baton and all other arguments plus @a lock_tokens set to
   * @c NULL and @a keep_locks set to @c TRUE.

</member>
        <member name="F:svn_ra_plugin_t.rev_prop">
Call svn_ra_rev_prop() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.rev_proplist">
Call svn_ra_rev_proplist() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.change_rev_prop">
Call svn_ra_change_rev_prop() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_dated_revision">
Call svn_ra_get_dated_revision() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.get_latest_revnum">
Call svn_ra_get_latest_revnum() with the session associated with
   * @a session_baton and all other arguments.

</member>
        <member name="F:svn_ra_plugin_t.open">
Call svn_ra_open() and set @a session_baton to an object representing
   * the new session.  All other arguments are passed to svn_ra_open().

</member>
        <member name="F:svn_ra_plugin_t.description">
Short doc string printed out by `svn --version` 
</member>
        <member name="F:svn_ra_plugin_t.name">
The proper name of the RA library, (like "ra_neon" or "ra_local") 
</member>
        <member name="T:svn_ra_plugin_t">
 Using this callback struct is similar to calling the newer public
 interface that is based on @c svn_ra_session_t.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_ra_print_ra_libraries(svn_stringbuf_t**,System.Void*,apr_pool_t*)">
 Similar to svn_ra_print_modules().
 @a ra_baton is ignored.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_ra_print_modules(svn_stringbuf_t*,apr_pool_t*)">
 The capability of understanding @c svn_depth_t (e.g., the server
 understands what the client means when the client describes the
 depth of a working copy to the server.)

 @since New in 1.5.

 The capability of doing the right thing with merge-tracking
 information.  This capability should be reported bidirectionally,
 because some repositories may want to reject clients that do not
 self-report as knowing how to handle merge-tracking.

 @since New in 1.5.

 The capability of retrieving arbitrary revprops in svn_ra_get_log2.

 @since New in 1.5.

 The capability of replaying a directory in the repository (partial replay).

 @since New in 1.5.

 Append a textual list of all available RA modules to the stringbuf
 @a output.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_has_capability(svn_ra_session_t*,System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Set @a *has to TRUE if the server represented by @a session has
 @a capability (one of the capabilities beginning with
 @c "SVN_RA_CAPABILITY_"), else set @a *has to FALSE.

 If @a capability isn't recognized, throw @c SVN_ERR_UNKNOWN_CAPABILITY,
 with the effect on @a *has undefined.

 Use @a pool for all allocation.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_replay(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Replay the changes from @a revision through @a editor and @a edit_baton.

 Changes will be limited to those that occur under @a session's URL, and
 the server will assume that the client has no knowledge of revisions
 prior to @a low_water_mark.  These two limiting factors define the portion
 of the tree that the server will assume the client already has knowledge of,
 and thus any copies of data from outside that part of the tree will be
 sent in their entirety, not as simple copies or deltas against a previous
 version.

 If @a send_deltas is @c TRUE, the actual text and property changes in
 the revision will be sent, otherwise dummy text deltas and null property
 changes will be sent instead.

 @a pool is used for all allocation.

 @since New in 1.4.

</member>
        <member name="M:svn_ra_replay_range(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,=FUNC:svn_error_t*(System.Int32!System.Runtime.CompilerServices.IsLong,System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_hash_t*,apr_pool_t*),=FUNC:svn_error_t*(System.Int32!System.Runtime.CompilerServices.IsLong,System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_hash_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Replay the changes from a range of revisions between @a start_revision 
 and @a end_revision.

 When receiving information for one revision, a callback @a revstart_func is
 called; this callback will provide an editor and baton through which the
 revision will be replayed.
 When replaying the revision is finished, callback @a fevfinish_func will be 
 called so the editor can be closed.
 
 Changes will be limited to those that occur under @a session's URL, and
 the server will assume that the client has no knowledge of revisions
 prior to @a low_water_mark.  These two limiting factors define the portion
 of the tree that the server will assume the client already has knowledge of,
 and thus any copies of data from outside that part of the tree will be
 sent in their entirety, not as simple copies or deltas against a previous
 version.

 If @a send_deltas is @c TRUE, the actual text and property changes in
 the revision will be sent, otherwise dummy text deltas and NULL property
 changes will be sent instead.

 @a pool is used for all allocation.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_get_locks(svn_ra_session_t*,apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Set @a *locks to a hashtable which represents all locks on or
 below @a path.

 The hashtable maps (const char *) absolute fs paths to (const
 svn_lock_t *) structures.  The hashtable -- and all keys and
 values -- are allocated in @a pool.

 @note It is not considered an error for @a path to not exist in HEAD.
 Such a search will simply return no locks.

 @note This functionality is not available in pre-1.2 servers.  If the
 server doesn't implement it, an @c SVN_ERR_RA_NOT_IMPLEMENTED error is
 returned.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_lock(svn_ra_session_t*,svn_lock_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 If @a path is locked, set @a *lock to an svn_lock_t which
 represents the lock, allocated in @a pool.  If @a path is not
 locked, set @a *lock to NULL.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_unlock(svn_ra_session_t*,apr_hash_t*,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_lock_t!System.Runtime.CompilerServices.IsConst*,svn_error_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Remove the repository lock for each path in @a path_tokens.
 @a path_tokens is a hash whose keys are the paths to be locked, and
 whose values are the corresponding lock tokens for each path.  If
 the path has no corresponding lock token, or if @a break_lock is TRUE,
 then the corresponding value shall be "".

 Note that unlocking is never anonymous, so any server
 implementing this function will have to "pull" a username from
 the client, if it hasn't done so already.

 If @a token points to a lock, but the RA username doesn't match the
 lock's owner, call @a lock_func/@a lock_baton with an error.  If @a
 break_lock is TRUE, however, instead allow the lock to be "broken"
 by the RA user.

 After successfully unlocking a path, @a lock_func is called with
 the @a lock_baton.

 Use @a pool for temporary allocations.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_lock(svn_ra_session_t*,apr_hash_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_lock_t!System.Runtime.CompilerServices.IsConst*,svn_error_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Lock each path in @a path_revs, which is a hash whose keys are the
 paths to be locked, and whose values are the corresponding base
 revisions for each path.

 Note that locking is never anonymous, so any server implementing
 this function will have to "pull" a username from the client, if
 it hasn't done so already.

 @a comment is optional: it's either an xml-escapable string
 which describes the lock, or it is NULL.

 If any path is already locked by a different user, then call @a
 lock_func/@a lock_baton with an error.  If @a steal_lock is TRUE,
 then "steal" the existing lock(s) anyway, even if the RA username
 does not match the current lock's owner.  Delete any lock on the
 path, and unconditionally create a new lock.

 For each path, if its base revision (in @a path_revs) is a valid
 revnum, then do an out-of-dateness check.  If the revnum is less
 than the last-changed-revision of any path (or if a path doesn't
 exist in HEAD), call @a lock_func/@a lock_baton with an
 SVN_ERR_RA_OUT_OF_DATE error.

 After successfully locking a file, @a lock_func is called with the
 @a lock_baton.

 Use @a pool for temporary allocations.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_file_revs(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_hash_t*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**,apr_array_header_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Similiar to svn_ra_get_file_revs2(), but with @a include_merged_revisions
 set to FALSE.

 @since New in 1.2.
 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_get_file_revs2(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_hash_t*,System.Int32,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**,apr_array_header_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Retrieve a subset of the interesting revisions of a file @a path
 as seen in revision @a end (see svn_fs_history_prev() for a
 definition of "interesting revisions").  Invoke @a handler with
 @a handler_baton as its first argument for each such revision.
 @a session is an open RA session.  Use @a pool for all allocations.

 If there is an interesting revision of the file that is less than or
 equal to @a start, the iteration will begin at that revision.
 Else, the iteration will begin at the first revision of the file in
 the repository, which has to be less than or equal to @a end.  Note
 that if the function succeeds, @a handler will have been called at
 least once.

 In a series of calls to @a handler, the file contents for the first
 interesting revision will be provided as a text delta against the
 empty file.  In the following calls, the delta will be against the
 fulltext contents for the previous call.

 If @a include_merged_revisions is TRUE, revisions which a included as a
 result of a merge between @a start and @a end will be included.

 @note This functionality is not available in pre-1.1 servers.  If the
 server doesn't implement it, an @c SVN_ERR_RA_NOT_IMPLEMENTED error is
 returned.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_get_location_segments(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,=FUNC:svn_error_t*(svn_location_segment_t*,System.Void*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Call @a receiver (with @a receiver_baton) for each segment in the
 location history of @a path in @a peg_revision, working backwards in
 time from @a start_rev to @a end_rev.

 @a end_rev may be @c SVN_INVALID_REVNUM to indicate that you want
 to trace the history of the object to its origin.

 @a start_rev may be @c SVN_INVALID_REVNUM to indicate "the HEAD
 revision".  Otherwise, @a start_rev must be younger than @a end_rev
 (unless @a end_rev is @c SVN_INVALID_REVNUM).

 @a peg_revision may be @c SVN_INVALID_REVNUM to indicate "the HEAD
 revision", and must evaluate to be at least as young as @a start_rev.

 Use @a pool for all allocations.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_get_locations(svn_ra_session_t*,apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_array_header_t*,apr_pool_t*)">
 Set @a *locations to the locations (at the repository revisions
 @a location_revisions) of the file identified by @a path in
 @a peg_revision.  @a path is relative to the URL to which
 @a session was opened.  @a location_revisions is an array of
 @c svn_revnum_t's.  @a *locations will be a mapping from the revisions to
 their appropriate absolute paths.  If the file doesn't exist in a
 location_revision, that revision will be ignored.

 Use @a pool for all allocations.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_repos_root(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
 Set @a *url to the repository's root URL.  The value will not include
 a trailing '/'.  The returned URL is guaranteed to be a prefix of the
 @a session's URL.

 @note The URL has the same lifetime as the @a session.

 Use @a pool for temporary memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_uuid(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
 Set @a *uuid to the repository's UUID.

 @note The UUID has the same lifetime as the @a session.

 Use @a pool for temporary memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_stat(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_dirent_t**,apr_pool_t*)">
 Set @a *dirent to an @c svn_dirent_t associated with @a path at @a
 revision.  @a path is relative to the @a session's parent's URL.
 If @a path does not exist in @a revision, set @a *dirent to NULL.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_check_path(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_node_kind_t*,apr_pool_t*)">
 Set @a *kind to the node kind associated with @a path at @a revision.
 If @a path does not exist under @a revision, set @a *kind to
 @c svn_node_none.  @a path is relative to the @a session's parent URL.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_log(svn_ra_session_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Int32,System.Int32,=FUNC:svn_error_t*(System.Void*,apr_hash_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Similar to svn_ra_get_log2(), but uses @c svn_log_message_receiver_t
 instead of @c svn_log_entry_receiver_t.  Also, @a
 include_merged_revisions is set to @c FALSE and @a revprops is
 svn:author, svn:date, and svn:log.

 @since New in 1.2.
 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_get_log2(svn_ra_session_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Int32,System.Int32,System.Int32,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Void*,svn_log_entry_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
 Invoke @a receiver with @a receiver_baton on each log message from
 @a start to @a end.  @a start may be greater or less than @a end;
 this just controls whether the log messages are processed in descending
 or ascending revision number order.

 If @a start or @a end is @c SVN_INVALID_REVNUM, it defaults to youngest.

 If @a paths is non-NULL and has one or more elements, then only show
 revisions in which at least one of @a paths was changed (i.e., if
 file, text or props changed; if dir, props changed or an entry
 was added or deleted).  Each path is an <tt>const char *</tt>, relative
 to the @a session's common parent.

 If @a limit is non-zero only invoke @a receiver on the first @a limit
 logs.

 If @a discover_changed_paths, then each call to receiver passes a
 <tt>const apr_hash_t *</tt> for the receiver's @a changed_paths argument;
 the hash's keys are all the paths committed in that revision.
 Otherwise, each call to receiver passes NULL for @a changed_paths.

 If @a strict_node_history is set, copy history will not be traversed
 (if any exists) when harvesting the revision logs for each path.

 If @a include_merged_revisions is set, log information for revisions
 which have been merged to @a targets will also be returned.

 If @a revprops is NULL, retrieve all revprops; else, retrieve only the
 revprops named in the array (i.e. retrieve none if the array is empty).

 If any invocation of @a receiver returns error, return that error
 immediately and without wrapping it.

 If @a start or @a end is a non-existent revision, return the error
 @c SVN_ERR_FS_NO_SUCH_REVISION, without ever invoking @a receiver.

 See also the documentation for @c svn_log_message_receiver_t.

 The caller may not invoke any RA operations using @a session from
 within @a receiver.

 Use @a pool for memory allocation.

 @note Pre-1.5 servers do not support custom revprop retrieval; if @a
 revprops is NULL or contains a revprop other than svn:author, svn:date,
 or svn:log, an @c SVN_ERR_RA_NOT_IMPLEMENTED error is returned.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_do_diff(svn_ra_session_t*,svn_ra_reporter2_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Similar to svn_ra_do_diff2(), but with @a text_deltas set to @c TRUE.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_ra_do_diff2(svn_ra_session_t*,svn_ra_reporter2_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Similar to svn_ra_do_diff3(), but taking @c svn_ra_reporter2_t
 instead of @c svn_ra_reporter3_t, and therefore only able to report
 @c svn_depth_infinity for depths.  Perform the diff according to
 @a recurse: if TRUE, then @a depth is @c svn_depth_infinity, else
 it is @c svn_depth_files.

 @deprecated Provided for compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_do_diff3(svn_ra_session_t*,svn_ra_reporter3_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_depth_t,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Ask the RA layer to 'diff' a working copy against @a versus_url;
 it's another form of svn_ra_do_update2().

 @note This function cannot be used to diff a single file, only a
 working copy directory.  See the svn_ra_do_switch2() function
 for more details.

 The client initially provides a @a diff_editor/@a diff_baton to the RA
 layer; this editor contains knowledge of where the common diff
 root is in the working copy (when open_root() is called).

 In return, the client receives a @a reporter/@a report_baton. The
 client then describes its working copy by making calls into the
 @a reporter.

 When finished, the client calls @a reporter-&gt;finish_report().  The
 RA layer then does a complete drive of @a diff_editor, ending with
 close_edit(), to transmit the diff.

 @a diff_target is an optional single path component will restrict
 the scope of the diff to an entry in the directory represented by
 the @a session's URL, or empty if the entire directory is meant to be
 one of the diff paths.

 The working copy will be diffed against @a versus_url as it exists
 in revision @a revision, or as it is in head if @a revision is
 @c SVN_INVALID_REVNUM.

 Use @a ignore_ancestry to control whether or not items being
 diffed will be checked for relatedness first.  Unrelated items
 are typically transmitted to the editor as a deletion of one thing
 and the addition of another, but if this flag is @c TRUE,
 unrelated items will be diffed as if they were related.

 Diff only as deeply as @a depth indicates.

 The caller may not perform any RA operations using @a session before
 finishing the report, and may not perform any RA operations using
 @a session from within the editing operations of @a diff_editor.

 @a text_deltas instructs the driver of the @a diff_editor to enable
 the generation of text deltas. If @a text_deltas is FALSE the window
 handler returned by apply_textdelta will be called once with a NULL
 @c svn_txdelta_window_t pointer.

 Use @a pool for memory allocation.

 @note The reporter provided by this function does NOT supply copy-
 from information to the diff editor callbacks.

 @note In order to prevent pre-1.5 servers from doing more work than
 needed, and sending too much data back, a pre-1.5 'recurse'
 directive may be sent to the server, based on @a depth.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_do_status(svn_ra_session_t*,svn_ra_reporter2_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Similar to svn_ra_do_status2(), but taking @c svn_ra_reporter2_t
 instead of @c svn_ra_reporter3_t, and therefore only able to report
 @c svn_depth_infinity for depths.  The status operation itself is
 performed according to @a recurse: if TRUE, then @a depth is
 @c svn_depth_infinity, else it is @c svn_depth_immediates.

 @deprecated Provided for compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_do_status2(svn_ra_session_t*,svn_ra_reporter3_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_depth_t,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Ask the RA layer to describe the status of a working copy with respect
 to @a revision of the repository (or HEAD, if @a revision is invalid).

 The client initially provides a @a status_editor/@a status_baton to the RA
 layer; this editor contains knowledge of where the change will
 begin in the working copy (when open_root() is called).

 In return, the client receives a @a reporter/@a report_baton. The
 client then describes its working copy by making calls into the
 @a reporter.

 When finished, the client calls @a reporter-&gt;finish_report(). The RA
 layer then does a complete drive of @a status_editor, ending with
 close_edit(), to report, essentially, what would be modified in
 the working copy were the client to call do_update().
 @a status_target is an optional single path component will restrict
 the scope of the status report to an entry in the directory
 represented by the @a session's URL, or empty if the entire directory
 is meant to be examined.

 Get status only as deeply as @a depth indicates.

 The caller may not perform any RA operations using @a session
 before finishing the report, and may not perform any RA operations
 using @a session from within the editing operations of @a status_editor.

 Use @a pool for memory allocation.

 @note The reporter provided by this function does NOT supply copy-
 from information to the diff editor callbacks.

 @note In order to prevent pre-1.5 servers from doing more work than
 needed, and sending too much data back, a pre-1.5 'recurse'
 directive may be sent to the server, based on @a depth.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_do_switch(svn_ra_session_t*,svn_ra_reporter2_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Similar to svn_ra_do_switch2(), but taking @c svn_ra_reporter2_t
 instead of @c svn_ra_reporter3_t, and therefore only able to report
 @c svn_depth_infinity for depths.  The switch itself is performed
 according to @a recurse: if TRUE, then use @c svn_depth_infinity
 for @a depth, else use @c svn_depth_files.

 @deprecated Provided for compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_do_switch2(svn_ra_session_t*,svn_ra_reporter3_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_depth_t,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Ask the RA layer to 'switch' a working copy to a new
 @a switch_url;  it's another form of svn_ra_do_update().

 The client initially provides a @a switch_editor/@a switch_baton to the RA
 layer; this editor contains knowledge of where the change will
 begin in the working copy (when open_root() is called).

 In return, the client receives a @a reporter/@a report_baton.  The
 client then describes its working copy by making calls into the
 @a reporter.

 When finished, the client calls @a reporter-&gt;finish_report().  The
 RA layer then does a complete drive of @a switch_editor, ending with
 close_edit(), to switch the working copy.

 @a switch_target is an optional single path component will restrict
 the scope of things affected by the switch to an entry in the
 directory represented by the @a session's URL, or empty if the
 entire directory is meant to be switched.

 Switch the target only as deeply as @a depth indicates.

 The working copy will be switched to @a revision_to_switch_to, or the
 "latest" revision if this arg is invalid.

 The caller may not perform any RA operations using
 @a session before finishing the report, and may not perform
 any RA operations using @a session from within the editing
 operations of @a switch_editor.

 Use @a pool for memory allocation.

 @note The reporter provided by this function does NOT supply copy-
 from information to the diff editor callbacks.

 @note In order to prevent pre-1.5 servers from doing more work than
 needed, and sending too much data back, a pre-1.5 'recurse'
 directive may be sent to the server, based on @a depth.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_do_update(svn_ra_session_t*,svn_ra_reporter2_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Similar to svn_ra_do_update2(), but taking @c svn_ra_reporter2_t
 instead of @c svn_ra_reporter3_t.  If @a recurse is TRUE, pass
 @c svn_depth_infinity for @a depth, else pass @c svn_depth_files.

 @deprecated Provided for compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_do_update2(svn_ra_session_t*,svn_ra_reporter3_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_depth_t,System.Int32,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)">
 Ask the RA layer to update a working copy.

 The client initially provides an @a update_editor/@a update_baton to the
 RA layer; this editor contains knowledge of where the change will
 begin in the working copy (when @c open_root() is called).

 In return, the client receives a @a reporter/@a report_baton.  The
 client then describes its working copy by making calls into the
 @a reporter.

 When finished, the client calls @a reporter-&gt;finish_report().  The
 RA layer then does a complete drive of @a update_editor, ending with
 @a update_editor-&gt;close_edit(), to update the working copy.

 @a update_target is an optional single path component to restrict
 the scope of the update to just that entry (in the directory
 represented by the @a session's URL).  If @a update_target is the
 empty string, the entire directory is updated.

 Update the target only as deeply as @a depth indicates.

 If @a send_copyfrom_args is TRUE, then ask the server to send
 copyfrom arguments to add_file() and add_directory() when possible.
 (Note: this means that any subsequent txdeltas coming from the
 server are presumed to apply against the copied file!)

 The working copy will be updated to @a revision_to_update_to, or the
 "latest" revision if this arg is invalid.

 The caller may not perform any RA operations using @a session before
 finishing the report, and may not perform any RA operations using
 @a session from within the editing operations of @a update_editor.

 Use @a pool for memory allocation.

 @note The reporter provided by this function does NOT supply copy-
 from information to the diff editor callbacks.

 @note In order to prevent pre-1.5 servers from doing more work than
 needed, and sending too much data back, a pre-1.5 'recurse'
 directive may be sent to the server, based on @a depth.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_get_mergeinfo(svn_ra_session_t*,apr_hash_t**,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_mergeinfo_inheritance_t,System.Int32,apr_pool_t*)">
 Set @a *mergeoutput to a hash mapping <tt>const char *</tt> target
 paths (taken from @a paths) to mergeinfo hashes (which themselves
 map <tt>const char *</tt> merged-from paths to
 <tt>apr_array_header_t *</tt> revision range lists of
 <tt>svn_merge_range_t *</tt> elements).  If no mergeinfo is
 available, set @a *mergeoutput to @c NULL.  The requested mergeinfo
 hashes are for @a paths (which are relative to @a session's URL) in
 @a revision.

 @a inherit indicates whether explicit, explicit or inherited, or
 only inherited mergeinfo for @a paths is retrieved.

 If @a include_descendants is TRUE, then additionally return the
 mergeinfo for any descendant of any element of @a paths which has
 the @c SVN_PROP_MERGEINFO property explicitly set on it.  (Note
 that inheritance is only taken into account for the elements in @a
 paths; descendants of the elements in @a paths which get their
 mergeinfo via inheritance are not included in @a *mergeoutput.)

 Allocate the returned values in @a pool.

 If @a revision is @c SVN_INVALID_REVNUM, it defaults to youngest.

 If the server doesn't support retrieval of mergeinfo (which will
 never happen for file:// URLs), return an @c
 SVN_ERR_UNSUPPORTED_FEATURE error.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_get_dir(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_hash_t**,System.Int32!System.Runtime.CompilerServices.IsLong*,apr_hash_t**,apr_pool_t*)">
 Similar to @c svn_ra_get_dir2, but with @c SVN_DIRENT_ALL for the
 @a dirent_fields parameter.

 @since New in 1.2.

 @deprecated Provided for compatibility with the 1.3 API.

</member>
        <member name="M:svn_ra_get_dir2(svn_ra_session_t*,apr_hash_t**,System.Int32!System.Runtime.CompilerServices.IsLong*,apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32,apr_pool_t*)">
 If @a dirents is non @c NULL, set @a *dirents to contain all the entries
 of directory @a path at @a revision.  The keys of @a dirents will be
 entry names (<tt>const char *</tt>), and the values dirents
 (<tt>@c svn_dirent_t *</tt>).  Use @a pool for all allocations.

 @a dirent_fields controls which portions of the <tt>@c svn_dirent_t</tt>
 objects are filled in.  To have them completely filled in just pass
 @c SVN_DIRENT_ALL, otherwise pass the bitwise OR of all the @c SVN_DIRENT_
 fields you would like to have returned to you.

 @a path is interpreted relative to the URL in @a session.

 If @a revision is @c SVN_INVALID_REVNUM (meaning 'head') and
 @a *fetched_rev is not @c NULL, then this function will set
 @a *fetched_rev to the actual revision that was retrieved.  (Some
 callers want to know, and some don't.)

 If @a props is non @c NULL, set @a *props to contain the properties of
 the directory.  This means @em all properties: not just ones controlled by
 the user and stored in the repository fs, but non-tweakable ones
 generated by the SCM system itself (e.g. 'wcprops', 'entryprops',
 etc.)  The keys are <tt>const char *</tt>, values are
 <tt>@c svn_string_t *</tt>.

 @since New in 1.4.

</member>
        <member name="M:svn_ra_get_file(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,svn_stream_t*,System.Int32!System.Runtime.CompilerServices.IsLong*,apr_hash_t**,apr_pool_t*)">
 Fetch the contents and properties of file @a path at @a revision.
 @a revision may be SVN_INVALID_REVNUM, indicating that the HEAD
 revision should be used.  Interpret @a path relative to the URL in
 @a session.  Use @a pool for all allocations.

 If @a revision is @c SVN_INVALID_REVNUM and @a fetched_rev is not
 @c NULL, then set @a *fetched_rev to the actual revision that was
 retrieved.

 If @a stream is non @c NULL, push the contents of the file at @a
 stream, do not call svn_stream_close() when finished.

 If @a props is non @c NULL, set @a *props to contain the properties of
 the file.  This means @em all properties: not just ones controlled by
 the user and stored in the repository fs, but non-tweakable ones
 generated by the SCM system itself (e.g. 'wcprops', 'entryprops',
 etc.)  The keys are <tt>const char *</tt>, values are
 <tt>@c svn_string_t *</tt>.

 The stream handlers for @a stream may not perform any RA
 operations using @a session.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_commit_editor(svn_ra_session_t*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*,apr_hash_t*,System.Int32,apr_pool_t*)">
 Same as svn_ra_get_commit_editor2(), but uses @c svn_commit_callback_t.

 @since New in 1.2.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_ra_get_commit_editor2(svn_ra_session_t*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(svn_commit_info_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,apr_hash_t*,System.Int32,apr_pool_t*)">
 Same as svn_ra_get_commit_editor3(), but with @c revprop_table set
 to a hash containing the @c SVN_PROP_REVISION_LOG property set
 to the value of @a log_msg.

 @since New in 1.4.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_ra_get_commit_editor3(svn_ra_session_t*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_hash_t*,=FUNC:svn_error_t*(svn_commit_info_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*),System.Void*,apr_hash_t*,System.Int32,apr_pool_t*)">
 Set @a *editor and @a *edit_baton to an editor for committing
 changes to the repository of @a session, setting the revision
 properties from @a revprop_table.  The revisions being committed
 against are passed to the editor functions, starting with the rev
 argument to @c open_root.  The path root of the commit is the @a
 session's URL.

 @a revprop_table is a hash mapping <tt>const char *</tt> property
 names to @c svn_string_t property values.  The commit log message
 is expected to be in the @c SVN_PROP_REVISION_LOG element.  @a
 revprop_table can not contain either of @c SVN_PROP_REVISION_DATE
 or @c SVN_PROP_REVISION_AUTHOR.

 Before @c close_edit returns, but after the commit has succeeded,
 it will invoke @a callback with the new revision number, the
 commit date (as a <tt>const char *</tt>), commit author (as a
 <tt>const char *</tt>), and @a callback_baton as arguments.  If
 @a callback returns an error, that error will be returned from @c
 close_edit, otherwise @c close_edit will return successfully
 (unless it encountered an error before invoking @a callback).

 The callback will not be called if the commit was a no-op
 (i.e. nothing was committed);

 @a lock_tokens, if non-NULL, is a hash mapping <tt>const char
 *</tt> paths (relative to the URL of @a session) to <tt>
 const char *</tt> lock tokens.  The server checks that the
 correct token is provided for each committed, locked path.  @a lock_tokens
 must live during the whole commit operation.

 If @a keep_locks is @c TRUE, then do not release locks on
 committed objects.  Else, automatically release such locks.

 The caller may not perform any RA operations using @a session before
 finishing the edit.

 Use @a pool for memory allocation.

 @since New in 1.5.

</member>
        <member name="M:svn_ra_rev_prop(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t**,apr_pool_t*)">
 Set @a *value to the value of unversioned property @a name attached to
 revision @a rev in the repository of @a session.  If @a rev has no
 property by that name, set @a *value to @c NULL.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_rev_proplist(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_hash_t**,apr_pool_t*)">
 Set @a *props to the list of unversioned properties attached to revision
 @a rev in the repository of @a session.  The hash maps
 (<tt>const char *</tt>) names to (<tt>@c svn_string_t *</tt>) values.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_change_rev_prop(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Set the property @a name to @a value on revision @a rev in the repository
 of @a session.

 If @a value is @c NULL, delete the named revision property.

 Please note that properties attached to revisions are @em unversioned.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_dated_revision(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int64,apr_pool_t*)">
 Get the latest revision number at time @a tm in the repository of
 @a session.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_latest_revnum(svn_ra_session_t*,System.Int32!System.Runtime.CompilerServices.IsLong*,apr_pool_t*)">
 Get the latest revision number from the repository of @a session.

 Use @a pool for memory allocation.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_get_session_url(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Set @a *url to the repository URL to which @a ra_session was
 * opened or most recently reparented.

</member>
        <member name="M:svn_ra_reparent(svn_ra_session_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Change the root URL of an open @a ra_session to point to a new path in the
 * same repository.  @a url is the new root URL.  Use @a pool for
 * temporary allocations.
 *
 * If @a url has a different repository root than the current session
 * URL, return @c SVN_ERR_RA_ILLEGAL_URL.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_ra_open(svn_ra_session_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_ra_callbacks_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_hash_t*,apr_pool_t*)">
@see svn_ra_open2().
@since New in 1.2.
@deprecated Provided for backward compatibility with the 1.2 API.

</member>
        <member name="M:svn_ra_open2(svn_ra_session_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_ra_callbacks2_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_hash_t*,apr_pool_t*)">
 Open a repository session to @a repos_URL.  Return an opaque object
 representing this session in @a *session_p, allocated in @a pool.

 @a callbacks/@a callback_baton is a table of callbacks provided by the
 client; see @c svn_ra_callbacks2_t.

 @a config is a hash mapping <tt>const char *</tt> keys to
 @c svn_config_t * values.  For example, the @c svn_config_t for the
 "~/.subversion/config" file is under the key "config".

 All RA requests require a session; they will continue to
 use @a pool for memory allocation.

 @see svn_client_open_ra_session().

 @since New in 1.3.

</member>
        <member name="T:svn_ra_session_t">
 A repository access session.  This object is used to perform requests
 to a repository, identified by an URL.

 @since New in 1.2.

</member>
        <member name="M:svn_ra_create_callbacks(svn_ra_callbacks2_t**,apr_pool_t*)">
Initialize a callback structure.
* Set @a *callbacks to a ra callbacks object, allocated in @a pool.
*
* Clients must use this function to allocate and initialize @c
* svn_ra_callbacks2_t structures.
*
* @since New in 1.3.

</member>
        <member name="M:svn_ra_initialize(apr_pool_t*)">
 Initialize the RA library.  This function must be called before using
 any function in this header, except the deprecated APIs based on
 @c svn_ra_plugin_t, or svn_ra_version().  This function must not be called
 simultaneously in multiple threads.  @a pool must live
 longer than any open RA sessions.

 @since New in 1.2.

</member>
        <member name="T:svn_ra_callbacks_t">
Similar to svn_ra_callbacks2_t, except that the progress
 * notification function and baton is missing.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.

</member>
        <member name="F:svn_ra_callbacks2_t.get_client_string">
Client string customization callback function
   * @since New in 1.5

</member>
        <member name="F:svn_ra_callbacks2_t.cancel_func">
Cancelation function
   *
   * As its baton, the general callback baton is used
   *
   * @since New in 1.5

</member>
        <member name="F:svn_ra_callbacks2_t.progress_baton">
Notification callback baton, used with progress_func. 
</member>
        <member name="F:svn_ra_callbacks2_t.progress_func">
Notification callback used for progress information.
   * May be NULL if not used.

</member>
        <member name="F:svn_ra_callbacks2_t.invalidate_wc_props">
Invalidate working copy properties. 
</member>
        <member name="F:svn_ra_callbacks2_t.push_wc_prop">
Schedule new values for working copy properties. 
</member>
        <member name="F:svn_ra_callbacks2_t.set_wc_prop">
Immediately set new values for working copy properties. 
</member>
        <member name="F:svn_ra_callbacks2_t.get_wc_prop">
Fetch working copy properties.
   *
   *<pre> ### we might have a problem if the RA layer ever wants a property
   * ### that corresponds to a different revision of the file than
   * ### what is in the WC. we'll cross that bridge one day...</pre></member>
        <member name="F:svn_ra_callbacks2_t.auth_baton">
An authentication baton, created by the application, which is
   * capable of retrieving all known types of credentials.

</member>
        <member name="F:svn_ra_callbacks2_t.open_tmp_file">
Open a unique temporary file for writing in the working copy.
   * This file will be automatically deleted when @a fp is closed.

</member>
        <member name="T:svn_ra_callbacks2_t">
A collection of callbacks implemented by libsvn_client which allows
 * an RA layer to "pull" information from the client application, or
 * possibly store information.  libsvn_client passes this vtable to
 * svn_ra_open2().
 *
 * Each routine takes a @a callback_baton originally provided with the
 * vtable.
 *
 * Clients must use svn_ra_create_callbacks() to allocate and
 * initialize this structure.
 *
 * @since New in 1.3.

</member>
        <member name="F:svn_ra_reporter_t.abort_report">
Same as the corresponding field in @c svn_ra_reporter2_t. 
</member>
        <member name="F:svn_ra_reporter_t.finish_report">
Same as the corresponding field in @c svn_ra_reporter2_t. 
</member>
        <member name="F:svn_ra_reporter_t.link_path">
Similar to the corresponding field in @c svn_ra_reporter2_t, but
   * with @a lock_token always set to NULL. 
</member>
        <member name="F:svn_ra_reporter_t.delete_path">
Same as the corresponding field in @c svn_ra_reporter2_t. 
</member>
        <member name="F:svn_ra_reporter_t.set_path">
Similar to the corresponding field in @c svn_ra_reporter2_t, but
   * with @a lock_token always set to NULL. 
</member>
        <member name="T:svn_ra_reporter_t">
 Similar to @c svn_ra_reporter2_t, but without support for lock tokens.

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="F:svn_ra_reporter2_t.abort_report">
Same as the corresponding field in @c svn_ra_reporter3_t. 
</member>
        <member name="F:svn_ra_reporter2_t.finish_report">
Same as the corresponding field in @c svn_ra_reporter3_t. 
</member>
        <member name="F:svn_ra_reporter2_t.link_path">
Similar to the corresponding field in @c svn_ra_reporter3_t, but
   * with @a depth always set to @c svn_depth_infinity. 
</member>
        <member name="F:svn_ra_reporter2_t.delete_path">
Same as the corresponding field in @c svn_ra_reporter3_t. 
</member>
        <member name="F:svn_ra_reporter2_t.set_path">
Similar to the corresponding field in @c svn_ra_reporter3_t, but
   * with @a depth always set to @c svn_depth_infinity. 
</member>
        <member name="T:svn_ra_reporter2_t">
 Similar to @c svn_ra_reporter3_t, but without support for depths.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="F:svn_ra_reporter3_t.finish_report">
WC calls this when the state report is finished; any directories
   * or files not explicitly `set' are assumed to be at the
   * baseline revision originally passed into do_update().  No other
   * reporting functions, including abort_report, should be called after
   * calling this function.

</member>
        <member name="F:svn_ra_reporter3_t.link_path">
Like set_path(), but differs in that @a path in the working copy
   * (relative to the root of the report driver) isn't a reflection of
   * @a path in the repository (relative to the URL specified when
   * opening the RA layer), but is instead a reflection of a different
   * repository @a url at @a revision, and has depth @a depth.
   *
   * @a path may not be underneath a path on which set_path() was
   * previously called with @c svn_depth_exclude in this report.
   *
   * If @a start_empty is set and @a path is a directory,
   * the implementor should assume the directory has no entries or props.
   *
   * If @a lock_token is non-NULL, it is the lock token for @a path in the WC.
   *
   * All temporary allocations are done in @a pool.

</member>
        <member name="F:svn_ra_reporter3_t.delete_path">
Describing a working copy @a path as missing.
   *
   * @a path may not be underneath a path on which set_path() was
   * previously called with @c svn_depth_exclude in this report.
   *
   * All temporary allocations are done in @a pool.

</member>
        <member name="F:svn_ra_reporter3_t.set_path">
Describe a working copy @a path as being at a particular
   * @a revision and having depth @a depth.
   *
   * @a revision may be SVN_INVALID_REVNUM if (for example) @a path
   * represents a locally-added path with no revision number, or @a
   * depth is @c svn_depth_exclude.  
   *
   * @a path may not be underneath a path on which set_path() was
   * previously called with @c svn_depth_exclude in this report.
   *
   * If @a start_empty is set and @a path is a directory, the
   * implementor should assume the directory has no entries or props.
   *
   * This will *override* any previous set_path() calls made on parent
   * paths.  @a path is relative to the URL specified in svn_ra_open2().
   *
   * If @a lock_token is non-NULL, it is the lock token for @a path in the WC.
   *
   * All temporary allocations are done in @a pool.

</member>
        <member name="T:svn_ra_reporter3_t">
 The update Reporter.

 A vtable structure which allows a working copy to describe a subset
 (or possibly all) of its working-copy to an RA layer, for the
 purposes of an update, switch, status, or diff operation.

 Paths for report calls are relative to the target (not the anchor)
 of the operation.  Report calls must be made in depth-first order:
 parents before children, all children of a parent before any
 siblings of the parent.  The first report call must be a set_path
 with a @a path argument of "" and a valid revision.  (If the target
 of the operation is locally deleted or missing, use the anchor's
 revision.)  If the target of the operation is deleted or switched
 relative to the anchor, follow up the initial set_path call with a
 link_path or delete_path call with a @a path argument of "" to
 indicate that.  In no other case may there be two report
 descriptions for the same path.  If the target of the operation is
 a locally added file or directory (which previously did not exist),
 it may be reported as having revision 0 or as having the parent
 directory's revision.

 @since New in 1.5.

</member>
        <member name="D:svn_ra_replay_revfinish_callback_t">
 Callback function type for replay_range actions.
 
 This callback function should close the editor.
 
 @a revision is the target revision number of the received replay report.
 
 @a editor and @a edit_baton should provided by the callback implementation.

 @a replay_baton is the baton as originally passed to replay_range.

 @a revprops contains key/value pairs for each revision properties for this
 revision.

 @since New in 1.5.

</member>
        <member name="D:svn_ra_replay_revstart_callback_t">
 Callback function type for replay_range actions.
 
 This callback function should provide replay_range with an editor which 
 will be driven with the received replay reports from the master repository.

 @a revision is the target revision number of the received replay report.
 
 @a editor and @a edit_baton should provided by the callback implementation.

 @a replay_baton is the baton as originally passed to replay_range.

 @a revprops contains key/value pairs for each revision properties for this
 revision.

 @since New in 1.5.

</member>
        <member name="D:svn_ra_progress_notify_func_t">
 Callback function type for progress notification.

 @a progress is the number of bytes already transferred, @a total is
 the total number of bytes to transfer or -1 if it's not known, @a
 baton is the callback baton.

 @since New in 1.3.

</member>
        <member name="D:svn_ra_lock_callback_t">
 Callback function type for locking and unlocking actions.

 @since New in 1.2.

 @a do_lock is TRUE when locking @a path, and FALSE
 otherwise.

 @a lock is a lock for @a path or NULL if @a do_lock is FALSE or @a ra_err is
 non-NULL.

 @a ra_err is NULL unless the ra layer encounters a locking related
 error which it passes back for notification purposes.  The caller
 is responsible for clearing @a ra_err after the callback is run.

 @a baton is a closure object; it should be provided by the
 implementation, and passed by the caller.  @a pool may be used for
 temporary allocation.

</member>
        <member name="D:svn_ra_file_rev_handler_t">
 A callback function type for use in @c get_file_revs.
 @a baton is provided by the caller, @a path is the pathname of the file
 in revision @a rev and @a rev_props are the revision properties.
 If @a delta_handler and @a delta_baton are non-NULL, they may be set to a
 handler/baton which will be called with the delta between the previous
 revision and this one after the return of this callback.  They may be
 left as NULL/NULL.
 @a prop_diffs is an array of svn_prop_t elements indicating the property
 delta for this and the previous revision.
 @a pool may be used for temporary allocations, but you can't rely
 on objects allocated to live outside of this particular call and the
 immediately following calls to @a *delta_handler, if any.

 @since New in 1.1.

</member>
        <member name="D:svn_ra_get_client_string_func_t">
A function type which allows the RA layer to ask about any
 * customizations to the client name string.  This is primarily used
 * by HTTP-based RA layers wishing to extend the string reported to
 * Apache/mod_dav_svn via the User-agent HTTP header.

</member>
        <member name="D:svn_ra_get_latest_revnum_func_t">
A function type for retrieving the youngest revision from a repos. 
</member>
        <member name="D:svn_ra_invalidate_wc_props_func_t">
This is a function type which allows the RA layer to invalidate
 * (i.e., remove) wcprops recursively.  See the documentation for
 * @c svn_ra_get_wc_prop_func_t for @a baton, @a path, and @a name.
 *
 * Unlike @c svn_ra_push_wc_prop_func_t, this has immediate effect.  If
 * it returns success, the wcprops have been removed.

</member>
        <member name="D:svn_ra_push_wc_prop_func_t">
This is a function type which allows the RA layer to store new
 * working copy properties as part of a commit.  See the comments for
 * @c svn_ra_get_wc_prop_func_t for @a baton, @a path, and @a name.
 * The @a value is the value that will be stored for the property; a
 * @c NULL @a value means the property will be deleted.
 *
 * Note that this might not actually store the new property before
 * returning, but instead schedule it to be changed as part of
 * post-commit processing (in which case a successful commit means the
 * properties got written).  Thus, during the commit, it is possible
 * to invoke this function to set a new value for a wc prop, then read
 * the wc prop back from the working copy and get the *old* value.
 * Callers beware.

</member>
        <member name="D:svn_ra_set_wc_prop_func_t">
This is a function type which allows the RA layer to store new
 * working copy properties during update-like operations.  See the
 * comments for @c svn_ra_get_wc_prop_func_t for @a baton, @a path, and
 * @a name. The @a value is the value that will be stored for the property;
 * a NULL @a value means the property will be deleted.

</member>
        <member name="D:svn_ra_get_wc_prop_func_t">
This is a function type which allows the RA layer to fetch working
 * copy (WC) properties.
 *
 * The @a baton is provided along with the function pointer and should
 * be passed back in. This will be the @a callback_baton or the
 * @a close_baton as appropriate.
 *
 * @a path is relative to the "root" of the session, defined by the
 * @a repos_url passed to svn_ra_open2() vtable call.
 *
 * @a name is the name of the property to fetch. If the property is present,
 * then it is returned in @a value. Otherwise, @a *value is set to @c NULL.

</member>
        <member name="M:svn_ra_version">
 Get libsvn_ra version information.

 @since New in 1.1.

</member>
        <member name="M:svn_inheritance_from_word(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return the appropriate @c svn_mergeinfo_inheritance_t for @a word.
 * @a word is as returned from svn_inheritance_to_word().  Defaults to
 * @c svn_mergeinfo_explicit.
 *
 * @since New in 1.5.

</member>
        <member name="F:svn_mergeinfo_nearest_ancestor">
Mergeinfo on target's nearest (path-wise, not history-wise)
      ancestor, regardless of whether target has explict mergeinfo. 
</member>
        <member name="F:svn_mergeinfo_inherited">
Explicit mergeinfo, or if that doesn't exist, the inherited
      mergeinfo from a target's nearest (path-wise, not history-wise)
      ancestor. 
</member>
        <member name="F:svn_mergeinfo_explicit">
Explicit mergeinfo only. 
</member>
        <member name="M:svn_rangelist_dup(apr_array_header_t*,apr_pool_t*)">
Return a deep copy of @a rangelist, allocated in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_dup(apr_hash_t*,apr_pool_t*)">
Return a deep copy of @a mergeinfo, allocated in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_sort(apr_hash_t*,apr_pool_t*)">
Take a hash of mergeinfo in @a mergeinfo, and sort the rangelists
 * associated with each key (in place).
 * Note: This does not sort the hash, only the rangelists in the
 * hash.
 * @since New in 1.5

</member>
        <member name="M:svn_mergeinfo_to_stringbuf(svn_stringbuf_t**,apr_hash_t*,apr_pool_t*)">
Take a hash of mergeinfo in @a mergeinfo, and convert it back to
 * a text format mergeinfo in @a output.  If @a input contains no
 * elements, return the empty string.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_inheritable(apr_hash_t**,apr_hash_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Return a deep copy of @a mergeinfo, a mapping from paths to
 * @c apr_array_header_t *'s of @c svn_merge_range_t *, excluding all
 * non-inheritable @c svn_merge_range_t.  If @a start and @a end are valid
 * revisions and @a start is less than or equal to @a end, then exclude only the
 * non-inheritable revisions that intersect inclusively with the range
 * defined by @a start and @a end.  If @a path is not NULL remove
 * non-inheritable ranges only for @a path.  If @a mergeinfo is an empty hash,
 * return an empty hash.  Allocate the copy in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_range_compact(svn_merge_range_t**,svn_merge_range_t**)">
Remove redundancies between @a *range_1 and @a *range_2.  @a
 * *range_1 and/or @a *range_2 may be additive or subtractive ranges.
 * The ranges should be sorted such that the minimum of @c
 * *range_1-&gt;start and @c *range_1-&gt;end is less than or equal to the
 * minimum of @c *range_2-&gt;start and @c *range_2-&gt;end.
 *
 * If either @a *range_1 or @a *range_2 is NULL, either range contains
 * invalid svn_revnum_t's, or the two ranges do not intersect, then do
 * nothing and return @c FALSE.
 *
 * If the two ranges can be reduced to one range, set @a *range_1 to
 * represent that range, set @a *range_2 to @c NULL, and return @c
 * TRUE.
 *
 * If the two ranges cancel each other out set both @a *range_1 and @a
 * *range_2 to @c NULL and return @c TRUE.
 *
 * If the two ranges intersect but cannot be represented by one range
 * (because one range is additive and the other subtractive) then
 * modify @a *range_1 and @a *range_2 to remove the intersecting
 * ranges and return @c TRUE.
 *
 * The inheritability of @a *range_1 or @a *range_2 is not taken into
 * account.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_inheritable(apr_array_header_t**,apr_array_header_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,apr_pool_t*)">
Return a deep copy of @c svn_merge_range_t *'s in @a rangelist excluding
 * all non-inheritable @c svn_merge_range_t.  If @a start and @a end are valid
 * revisions and @a start is less than or equal to @a end, then exclude only the
 * non-inheritable revision ranges that intersect inclusively with the range
 * defined by @a start and @a end.  If @a rangelist contains no elements, return
 * an empty array.  Allocate the copy in @a pool.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_to_revs(apr_array_header_t**,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Take an array of @c svn_merge_range_t *'s in @a rangelist, and convert it
 * to an array of @c svn_revnum_t's in @a revs.  If @a rangelist contains
 * no elements, return an empty array.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_count_revs(apr_array_header_t*)">
Take an array of svn_merge_range_t *'s in @a rangelist, and return the
 * number of distint revisions included in it.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_to_stringbuf(svn_stringbuf_t**,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Take an array of svn_merge_range_t *'s in @a rangelist, and convert it
 * back to a text format rangelist in @a output.  If @a rangelist contains
 * no elements, sets @a output with empty string.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_reverse(apr_array_header_t*,apr_pool_t*)">
Reverse @a rangelist, and the @c start and @c end fields of each
 * range in @a rangelist, in place.
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_intersect(apr_array_header_t**,apr_array_header_t*,apr_array_header_t*,apr_pool_t*)">
Find the intersection of two rangelists consisting of @c
 * svn_merge_range_t * elements, @a rangelist1 and @a rangelist2, and
 * place the result in @a *rangelist (which is never @c NULL).
 *
 * Note: @a rangelist1 and @a rangelist2 must be sorted as said by @c
 * svn_sort_compare_ranges(). @a *rangelist is guaranteed to be in sorted
 * order.
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_intersect(apr_hash_t**,apr_hash_t*,apr_hash_t*,apr_pool_t*)">
Find the intersection of two mergeinfo hashes (consisting of @c
 * const char * paths mapped to @c apr_array_header_t *'s of @c
 * svn_merge_range_t * elements), @a mergeinfo1 and @a mergeinfo2, and
 * place the result in @a mergeinfo, which is (deeply) allocated in @a
 * pool.
 *
 * Note: The rangelists of @a mergeinfo1 and @a mergeinfo2 must be
 * sorted as said by @c svn_sort_compare_ranges(). @a output is
 * guaranteed to be in sorted order.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_remove(apr_array_header_t**,apr_array_header_t*,apr_array_header_t*,System.Int32,apr_pool_t*)">
Removes @a eraser (the subtrahend) from @a whiteboard (the
 * minuend), and places the resulting difference in @a output.
 *
 * Note: @a eraser and @a whiteboard must be sorted as said by @c
 * svn_sort_compare_ranges().  @a output is guaranteed to be in sorted
 * order.
 *
 * @a consider_inheritance determines how to account for the
 * @c svn_merge_range_t inheritable field when comparing @a whiteboard's
 * and @a *eraser's rangelists for equality.  @See svn_mergeinfo_diff().
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_merge(apr_array_header_t**,apr_array_header_t*,apr_pool_t*)">
Merge two rangelists consisting of @c svn_merge_range_t *
 * elements, @a *rangelist and @a changes, placing the results in
 * @a *rangelist.
 *
 * When intersecting rangelists are merged, the inheritability of
 * the resulting svn_merge_range_t depends on the inheritability of the
 * operands, @see svn_mergeinfo_merge().
 *
 * Note: @a *rangelist and @a changes must be sorted as said by @c
 * svn_sort_compare_ranges().  @a *rangelist is guaranteed to remain
 * in sorted order.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_rangelist_diff(apr_array_header_t**,apr_array_header_t**,apr_array_header_t*,apr_array_header_t*,System.Int32,apr_pool_t*)">
Calculate the delta between two rangelists consisting of @c
 * svn_merge_range_t * elements (sorted in ascending order), @a from
 * and @a to, and place the result in @a deleted and @a added (neither
 * output argument will ever be @c NULL).
 *
 * @a consider_inheritance determines how to account for the inheritability
 * of the two rangelist's ranges when calculating the diff,
 * @see svn_mergeinfo_diff().
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_remove(apr_hash_t**,apr_hash_t*,apr_hash_t*,apr_pool_t*)">
Removes @a eraser (the subtrahend) from @a whiteboard (the
 * minuend), and places the resulting difference in @a *mergeinfo.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_merge(apr_hash_t*,apr_hash_t*,apr_pool_t*)">
Merge hash of mergeinfo, @a changes, into existing hash @a
 * mergeinfo.
 *
 * When intersecting rangelists for a path are merged, the inheritability of
 * the resulting svn_merge_range_t depends on the inheritability of the
 * operands.  If two non-inheritable ranges are merged the result is always
 * non-inheritable, in all other cases the resulting range is inheritable.
 *
 *  e.g. '/A: 1,3-4'  merged with '/A: 1,3,4*,5' --&gt; '/A: 1,3-5'
 *       '/A: 1,3-4*' merged with '/A: 1,3,4*,5' --&gt; '/A: 1,3,4*,5'
 *
 * Note: @a mergeinfo and @a changes must have rangelists that are
 * sorted as said by @c svn_sort_compare_ranges().  After the merge @a
 * mergeinfo will have rangelists that are guaranteed to be in sorted
 * order.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_diff(apr_hash_t**,apr_hash_t**,apr_hash_t*,apr_hash_t*,System.Int32,apr_pool_t*)">
Calculate the delta between two hashes of mergeinfo (with
 * rangelists sorted in ascending order), @a mergefrom and @a mergeto
 * (which may be @c NULL), and place the result in @a deleted and @a
 * added (neither output argument will ever be @c NULL), stored as the
 * usual mapping of paths to lists of @c svn_merge_range_t *'s.
 *
 * @a consider_inheritance determines how the rangelists in the two
 * hashes are compared for equality.  If @a consider_inheritance is FALSE,
 * then the start and end revisions of the @c svn_merge_range_t's being
 * compared are the only factors considered when determining equality.
 * 
 *  e.g. '/trunk: 1,3-4*,5' == '/trunk: 1,3-5'
 *
 * If @a consider_inheritance is TRUE, then the inheritability of the
 * @c svn_merge_range_t's is also considered and must be the same for two
 * otherwise identical ranges to be judged equal.
 *
 *  e.g. '/trunk: 1,3-4*,5' != '/trunk: 1,3-5'
 *       '/trunk: 1,3-4*,5' == '/trunk: 1,3-4*,5'
 *       '/trunk: 1,3-4,5'  == '/trunk: 1,3-4,5'
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_mergeinfo_parse(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 @copyright
 ====================================================================
 Copyright (c) 2006-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_mergeinfo.h
 @brief mergeinfo handling and processing

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

Overview of the @c SVN_PROP_MERGEINFO property.
 *
 * Merge history is stored in the @c SVN_PROP_MERGEINFO property of files
 * and directories.  The @c SVN_PROP_MERGEINFO property on a path stores the
 * complete list of changes merged to that path, either directly or via the
 * path's parent, grand-parent, etc..
 *
 * Every path in a tree may have @c SVN_PROP_MERGEINFO set, but if the
 * @c SVN_PROP_MERGEINFO for a path is equivalent to the
 * @c SVN_PROP_MERGEINFO for its parent, then the @c SVN_PROP_MERGEINFO on
 * the path will 'elide' (be removed) from the path as a post step to any
 * merge, switch, or update.  If a path's parent does not have any
 * @c SVN_PROP_MERGEINFO set, the path's mergeinfo can elide to its nearest
 * grand-parent, great-grand-parent, etc. that has equivalent
 * @c SVN_PROP_MERGEINFO set on it.  
 *
 * If a path has no @c SVN_PROP_MERGEINFO of its own, it inherits mergeinfo
 * from its nearest parent that has @c SVN_PROP_MERGEINFO set.  The
 * exception to this is @c SVN_PROP_MERGEINFO with non-ineritable revision
 * ranges.  These non-inheritable ranges apply only to the path which they
 * are set on.
 *
 * Due to Subversion's allowance for mixed revision working copies, both
 * elision and inheritance within the working copy presume the path
 * between a path and its nearest parent with mergeinfo is at the same
 * working revision.  If this is not the case then neither inheritance nor
 * elision can occur.
 *
 * The value of the @c SVN_PROP_MERGEINFO property is a string consisting of
 * a path, a colon, and comma separated revision list, containing one or more
 * revision or revision ranges. Revision range start and end points are
 * separated by "-".  Revisions and revision ranges may have the optional
 * @c SVN_MERGEINFO_NONINHERITABLE_STR suffix to signify a non-inheritable
 * revision/revision range.
 *
 * @c SVN_PROP_MERGEINFO Value Grammar:
 *
 *   Token             Definition
 *   -----             ----------
 *   revisionrange     REVISION1 "-" REVISION2
 *   revisioneelement  (revisionrange | REVISION)"*"?
 *   rangelist         revisioneelement (COMMA revisioneelement)*
 *   revisionline      PATHNAME COLON rangelist
 *   top               revisionline (NEWLINE revisionline)*
 *
 * The PATHNAME is the source of a merge and the rangelist the revision(s)
 * merged to the path @c SVN_PROP_MERGEINFO is set on directly or indirectly
 * via inheritance.  PATHNAME must always exist at the specified rangelist
 * and thus multiple revisionlines are required to account for renames of
 * the source pathname.
 *
 * Rangelists must be sorted from lowest to highest revision and cannot
 * contain overlapping revisionlistelements.  REVISION1 must be less than
 * REVISION2.  Consecutive single revisions that can be represented by a
 * revisionrange are allowed (e.g. '5,6,7,8,9-12' or '5-12' are both
 * acceptable).

Parse the mergeinfo from @a input into @a *mergeinfo, mapping from
 * paths to @c apr_array_header_t *'s of @c svn_merge_range_t *
 * elements.  If no mergeinfo is available, return an empty hash
 * (never @c NULL).  Perform temporary allocations in @a pool.
 *
 * If @a input is not a grammatically correct @c SVN_PROP_MERGEINFO
 * property, contains overlapping or unordered revision ranges, or revision
 * ranges with a start revision greater than or equal to its end revision,
 * or contains paths mapped to empty revision ranges, then return
 * @c SVN_ERR_MERGEINFO_PARSE_ERROR.
 *
 * Note: @a *mergeinfo will contain rangelists that are guaranteed to
 * be sorted (ordered by smallest revision ranges to largest).
 * @since New in 1.5.

</member>
        <member name="M:svn_auth_get_ssl_client_cert_pw_prompt_provider(svn_auth_provider_object_t**,=FUNC:svn_error_t*(svn_auth_cred_ssl_client_cert_pw_t**,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*),System.Void*,System.Int32,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_ssl_client_cert_pw_t, allocated in @a pool.
 *
 * @a *provider retrieves its credentials by using the @a prompt_func
 * and @a prompt_baton.  The returned credential is used when a loaded
 * client certificate is protected by a passphrase.  The prompt will
 * be retried @a retry_limit times.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_ssl_client_cert_prompt_provider(svn_auth_provider_object_t**,=FUNC:svn_error_t*(svn_auth_cred_ssl_client_cert_t**,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*),System.Void*,System.Int32,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_ssl_client_cert_t, allocated in @a pool.
 *
 * @a *provider retrieves its credentials by using the @a prompt_func
 * and @a prompt_baton.  The returned credential is used to load the
 * appropriate client certificate for authentication when requested by
 * a server.  The prompt will be retried @a retry_limit times.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_ssl_server_trust_prompt_provider(svn_auth_provider_object_t**,=FUNC:svn_error_t*(svn_auth_cred_ssl_server_trust_t**,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,svn_auth_ssl_server_cert_info_t!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*),System.Void*,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_ssl_server_trust_t, allocated in @a pool.
 *
 * @a *provider retrieves its credentials by using the @a prompt_func
 * and @a prompt_baton.  The returned credential is used to override
 * SSL security on an error.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_ssl_client_cert_pw_file_provider(svn_auth_provider_object_t**,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_ssl_client_cert_pw_t, allocated in @a pool.
 *
 * @a *provider retrieves its credentials from the configuration
 * mechanism.  The returned credential is used when a loaded client
 * certificate is protected by a passphrase.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_ssl_client_cert_file_provider(svn_auth_provider_object_t**,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_ssl_client_cert_t, allocated in @a pool.
 *
 * @a *provider retrieves its credentials from the configuration
 * mechanism.  The returned credential is used to load the appropriate
 * client certificate for authentication when requested by a server.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_windows_ssl_server_trust_provider(svn_auth_provider_object_t**,apr_pool_t*)">
 Create and return @a *provider, an authentication provider of type @c
 svn_auth_cred_ssl_server_trust_t, allocated in @a pool.

 This provider automatically validates ssl server certificates with
 the CryptoApi, like Internet Explorer and the Windows network API do.
 This allows the rollout of root certificates via Windows Domain
 policies, instead of Subversion specific configuration.

 @since New in 1.5.
 @note This function is only available on Windows.

</member>
        <member name="M:svn_auth_get_ssl_server_trust_file_provider(svn_auth_provider_object_t**,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_ssl_server_trust_t, allocated in @a pool.
 *
 * @a *provider retrieves its credentials from the configuration
 * mechanism.  The returned credential is used to override SSL
 * security on an error.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_username_provider(svn_auth_provider_object_t**,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_username_t that gets/sets information from a user's
 * ~/.subversion configuration directory.  Allocate @a *provider in
 * @a pool.
 *
 * If a default username is available, @a *provider will honor it,
 * and return it when svn_auth_first_credentials() is called.  (See
 * @c SVN_AUTH_PARAM_DEFAULT_USERNAME.)
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_windows_simple_provider(svn_auth_provider_object_t**,apr_pool_t*)">
 Create and return @a *provider, an authentication provider of type @c
 svn_auth_cred_simple_t that gets/sets information from the user's
 ~/.subversion configuration directory.  Allocate @a *provider in
 @a pool.

 This is like svn_client_get_simple_provider(), except that, when
 running on Window 2000 or newer (or any other Windows version that
 includes the CryptoAPI), the provider encrypts the password before
 storing it to disk. On earlier versions of Windows, the provider
 does nothing.

 @since New in 1.4.
 @note This function is only available on Windows.

 @note An administrative password reset may invalidate the account's
 secret key. This function will detect that situation and behave as
 if the password were not cached at all.

</member>
        <member name="M:svn_auth_get_simple_provider(svn_auth_provider_object_t**,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_simple_t that gets/sets information from the user's
 * ~/.subversion configuration directory.  Allocate @a *provider in
 * @a pool.
 *
 * If a default username or password is available, @a *provider will
 * honor them as well, and return them when
 * svn_auth_first_credentials() is called.  (see @c
 * SVN_AUTH_PARAM_DEFAULT_USERNAME and @c
 * SVN_AUTH_PARAM_DEFAULT_PASSWORD).
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_username_prompt_provider(svn_auth_provider_object_t**,=FUNC:svn_error_t*(svn_auth_cred_username_t**,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*),System.Void*,System.Int32,apr_pool_t*)">
Create and return @a *provider, an authentication provider of type @c
 * svn_auth_cred_username_t that gets information by prompting the
 * user with @a prompt_func and @a prompt_baton.  Allocate @a *provider
 * in @a pool.
 *
 * If @c SVN_AUTH_PARAM_DEFAULT_USERNAME is defined as a runtime
 * parameter in the @c auth_baton, then @a *provider will return the
 * default argument when svn_auth_first_credentials() is called.  If
 * svn_auth_first_credentials() fails, then @a *provider will
 * re-prompt @a retry_limit times (via svn_auth_next_credentials()).
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_get_simple_prompt_provider(svn_auth_provider_object_t**,=FUNC:svn_error_t*(svn_auth_cred_simple_t**,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*),System.Void*,System.Int32,apr_pool_t*)">
@} 
Create and return @a *provider, an authentication provider of type
 * svn_auth_cred_simple_t that gets information by prompting the user
 * with @a prompt_func and @a prompt_baton.  Allocate @a *provider in
 * @a pool.
 *
 * If both @c SVN_AUTH_PARAM_DEFAULT_USERNAME and
 * @c SVN_AUTH_PARAM_DEFAULT_PASSWORD are defined as runtime
 * parameters in the @c auth_baton, then @a *provider will return the
 * default arguments when svn_auth_first_credentials() is called.  If
 * svn_auth_first_credentials() fails, then @a *provider will
 * re-prompt @a retry_limit times (via svn_auth_next_credentials()).
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_auth_save_credentials(svn_auth_iterstate_t*,apr_pool_t*)">
Save a set of credentials.
 *
 * Ask @a state to store the most recently returned credentials,
 * presumably because they successfully authenticated.  Use @a pool
 * for temporary allocation.  If no credentials were ever returned, do
 * nothing.

</member>
        <member name="M:svn_auth_next_credentials(System.Void**,svn_auth_iterstate_t*,apr_pool_t*)">
Get another set of credentials, assuming previous ones failed to
 * authenticate.
 *
 * Use @a state to fetch a different set of @a *credentials, as a
 * follow-up to svn_auth_first_credentials() or
 * svn_auth_next_credentials().  If no more credentials are available,
 * set @a *credentials to NULL.
 *
 * Note that @a *credentials will be allocated in @c auth_baton's pool.

</member>
        <member name="M:svn_auth_first_credentials(System.Void**,svn_auth_iterstate_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_auth_baton_t*,apr_pool_t*)">
Universal run-time parameters, made available to all providers.

    If you are writing a new provider, then to be a "good citizen",
    you should notice these global parameters!  Note that these
    run-time params should be treated as read-only by providers; the
    application is responsible for placing them into the auth_baton
    hash. 
The auth-hash prefix indicating that the parameter is global. 
@name Default credentials defines
Any 'default' credentials that came in through the application itself,
(e.g. --username and --password options). Property values are
const char *.
@{ 
@} 
@brief The application doesn't want any providers to prompt
 * users. Property value is irrelevant; only property's existence
 * matters. 
@brief The application doesn't want any providers to save passwords
 * to disk. Property value is irrelevant; only property's existence
 * matters. 
@brief The application doesn't want any providers to save credentials
 * to disk. Property value is irrelevant; only property's existence
 * matters. 
@brief The following property is for SSL server cert providers. This
 * provides a pointer to an @c apr_uint32_t containing the failures
 * detected by the certificate validator. 
@brief The following property is for SSL server cert providers. This
 * provides the cert info (svn_auth_ssl_server_cert_info_t). 
Some providers need access to the @c svn_config_t configuration. 
The current server group. 
@brief A configuration directory that overrides the default
 * ~/.subversion. 
Get an initial set of credentials.
 *
 * Ask @a auth_baton to set @a *credentials to a set of credentials
 * defined by @a cred_kind and valid within @a realmstring, or NULL if
 * no credentials are available.  Otherwise, return an iteration state
 * in @a *state, so that the caller can call
 * svn_auth_next_credentials(), in case the first set of credentials
 * fails to authenticate.
 *
 * Use @a pool to allocate @a *state, and for temporary allocation.
 * Note that @a *credentials will be allocated in @a auth_baton's pool.

</member>
        <member name="M:svn_auth_get_parameter(svn_auth_baton_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get an authentication run-time parameter.
 *
 * Return a value for run-time parameter @a name from @a auth_baton.
 * Return NULL if the parameter doesn't exist.

</member>
        <member name="M:svn_auth_set_parameter(svn_auth_baton_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*)">
Set an authentication run-time parameter.
 *
 * Store @a name / @a value pair as a run-time parameter in @a
 * auth_baton, making the data accessible to all providers.  @a name
 * and @a value will NOT be duplicated into the auth_baton's pool.
 * To delete a run-time parameter, pass NULL for @a value.

</member>
        <member name="M:svn_auth_open(svn_auth_baton_t**,apr_array_header_t*,apr_pool_t*)">
Initialize an authentication system.
 *
 * Return an authentication object in @a *auth_baton (allocated in @a
 * pool) that represents a particular instance of the svn
 * authentication system.  @a providers is an array of @c
 * svn_auth_provider_object_t pointers, already allocated in @a pool
 * and intentionally ordered.  These pointers will be stored within @a
 * *auth_baton, grouped by credential type, and searched in this exact
 * order.

</member>
        <member name="D:svn_auth_ssl_client_cert_pw_prompt_func_t">
Set @a *cred by prompting the user, allocating @a *cred in @a pool.
 * @a baton is an implementation-specific closure.  @a realm is a string
 * identifying the certificate, and can be used in the prompt string.
 *
 * If @a may_save is FALSE, the auth system does not allow the credentials
 * to be saved (to disk). A prompt function shall not ask the user if the
 * credentials shall be saved if @a may_save is FALSE. For example, a GUI
 * client with a remember password checkbox would grey out the checkbox if
 * @a may_save is FALSE.

</member>
        <member name="D:svn_auth_ssl_client_cert_prompt_func_t">
Set @a *cred by prompting the user, allocating @a *cred in @a pool.
 * @a baton is an implementation-specific closure.  @a realm is a string
 * that can be used in the prompt string.
 *
 * If @a may_save is FALSE, the auth system does not allow the credentials
 * to be saved (to disk). A prompt function shall not ask the user if the
 * credentials shall be saved if @a may_save is FALSE. For example, a GUI
 * client with a remember certificate checkbox would grey out the checkbox
 * if @a may_save is FALSE.

</member>
        <member name="D:svn_auth_ssl_server_trust_prompt_func_t">
@name SSL server certificate failure bits
 *
 * @note These values are stored in the on disk auth cache by the SSL
 * server certificate auth provider, so the meaning of these bits must
 * not be changed.
 * @{

Certificate is not yet valid. 
Certificate has expired. 
Certificate's CN (hostname) does not match the remote hostname. 
@brief Certificate authority is unknown (i.e. not trusted) 
@brief Other failure. This can happen if neon has introduced a new
 * failure bit that we do not handle yet. 
@} 
Set @a *cred by prompting the user, allocating @a *cred in @a pool.
 * @a baton is an implementation-specific closure.
 *
 * @a cert_info is a structure describing the server cert that was
 * presented to the client, and @a failures is a bitmask that
 * describes exactly why the cert could not be automatically validated,
 * composed from the constants SVN_AUTH_SSL_* (@c SVN_AUTH_SSL_NOTYETVALID
 * etc.).  @a realm is a string that can be used in the prompt string.
 *
 * If @a may_save is FALSE, the auth system does not allow the credentials
 * to be saved (to disk). A prompt function shall not ask the user if the
 * credentials shall be saved if @a may_save is FALSE. For example, a GUI
 * client with a trust permanently checkbox would grey out the checkbox if
 * @a may_save is FALSE.

</member>
        <member name="D:svn_auth_username_prompt_func_t">
Set @a *cred by prompting the user, allocating @a *cred in @a pool.
 * @a baton is an implementation-specific closure.
 *
 * If @a realm is non-NULL, maybe use it in the prompt string.
 *
 * If @a may_save is FALSE, the auth system does not allow the credentials
 * to be saved (to disk). A prompt function shall not ask the user if the
 * credentials shall be saved if @a may_save is FALSE. For example, a GUI
 * client with a remember username checkbox would grey out the checkbox if
 * @a may_save is FALSE.

</member>
        <member name="D:svn_auth_simple_prompt_func_t">
Credential-constructing prompt functions. *
These exist so that different client applications can use
 * different prompt mechanisms to supply the same credentials.  For
 * example, if authentication requires a username and password, a
 * command-line client's prompting function might prompt first for the
 * username and then for the password, whereas a GUI client's would
 * present a single dialog box asking for both, and a telepathic
 * client's would read all the information directly from the user's
 * mind.  All these prompting functions return the same type of
 * credential, but the information used to construct the credential is
 * gathered in an interface-specific way in each case.

Set @a *cred by prompting the user, allocating @a *cred in @a pool.
 * @a baton is an implementation-specific closure.
 *
 * If @a realm is non-NULL, maybe use it in the prompt string.
 *
 * If @a username is non-NULL, then the user might be prompted only
 * for a password, but @a *cred would still be filled with both
 * username and password.  For example, a typical usage would be to
 * pass @a username on the first call, but then leave it NULL for
 * subsequent calls, on the theory that if credentials failed, it's
 * as likely to be due to incorrect username as incorrect password.
 *
 * If @a may_save is FALSE, the auth system does not allow the credentials
 * to be saved (to disk). A prompt function shall not ask the user if the
 * credentials shall be saved if @a may_save is FALSE. For example, a GUI
 * client with a remember password checkbox would grey out the checkbox if
 * @a may_save is FALSE.

</member>
        <member name="F:svn_auth_cred_ssl_server_trust_t.accepted_failures">
Bit mask of the accepted failures 
</member>
        <member name="F:svn_auth_cred_ssl_server_trust_t.may_save">
Indicates if the credentials may be saved (to disk). For example, a
   * GUI prompt implementation with a checkbox to accept the certificate
   * permanently shall set @a may_save to TRUE if the checkbox is checked.

</member>
        <member name="T:svn_auth_cred_ssl_server_trust_t">
@c SVN_AUTH_CRED_SSL_SERVER_TRUST credentials. 
</member>
        <member name="M:svn_auth_ssl_server_cert_info_dup(svn_auth_ssl_server_cert_info_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a deep copy of @a info, allocated in @a pool.

 @since New in 1.3.

</member>
        <member name="F:svn_auth_ssl_server_cert_info_t.ascii_cert">
Base-64 encoded DER certificate representation 
</member>
        <member name="F:svn_auth_ssl_server_cert_info_t.issuer_dname">
DN of the certificate issuer 
</member>
        <member name="F:svn_auth_ssl_server_cert_info_t.valid_until">
ASCII date until which the certificate is valid 
</member>
        <member name="F:svn_auth_ssl_server_cert_info_t.valid_from">
ASCII date from which the certificate is valid 
</member>
        <member name="F:svn_auth_ssl_server_cert_info_t.fingerprint">
ASCII fingerprint 
</member>
        <member name="F:svn_auth_ssl_server_cert_info_t.hostname">
Primary CN 
</member>
        <member name="T:svn_auth_ssl_server_cert_info_t">
SSL server verification credential type.
 *
 * The following auth parameters are available to the providers:
 *
 * - @c SVN_AUTH_PARAM_CONFIG (@c svn_config_t*)
 * - @c SVN_AUTH_PARAM_SERVER_GROUP (@c char*)
 * - @c SVN_AUTH_PARAM_SSL_SERVER_FAILURES (@c apr_uint32_t*)
 * - @c SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO
 *      (@c svn_auth_ssl_server_cert_info_t*)
 *
 * The following optional auth parameters are relevant to the providers:
 *
 * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)

SSL server certificate information used by @c
 * SVN_AUTH_CRED_SSL_SERVER_TRUST providers.

</member>
        <member name="F:svn_auth_cred_ssl_client_cert_pw_t.may_save">
Indicates if the credentials may be saved (to disk). For example, a
   * GUI prompt implementation with a remember password checkbox shall set
   * @a may_save to TRUE if the checkbox is checked.

</member>
        <member name="F:svn_auth_cred_ssl_client_cert_pw_t.password">
Certificate password 
</member>
        <member name="T:svn_auth_cred_ssl_client_cert_pw_t">
SSL client certificate passphrase credential type.
 *
 * @note The realmstring used with this credential type must be a name that
 * makes it possible for the user to identify the certificate.
 *
 * The following auth parameters are available to the providers:
 *
 * - @c SVN_AUTH_PARAM_CONFIG (@c svn_config_t*)
 * - @c SVN_AUTH_PARAM_SERVER_GROUP (@c char*)
 *
 * The following optional auth parameters are relevant to the providers:
 *
 * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)

@c SVN_AUTH_CRED_SSL_CLIENT_CERT_PW credentials. 
</member>
        <member name="F:svn_auth_cred_ssl_client_cert_t.may_save">
Indicates if the credentials may be saved (to disk). For example, a
   * GUI prompt implementation with a remember certificate checkbox shall
   * set @a may_save to TRUE if the checkbox is checked.

</member>
        <member name="F:svn_auth_cred_ssl_client_cert_t.cert_file">
Full paths to the certificate file 
</member>
        <member name="T:svn_auth_cred_ssl_client_cert_t">
SSL client certificate credential type.
 *
 * The following auth parameters are available to the providers:
 *
 * - @c SVN_AUTH_PARAM_CONFIG (@c svn_config_t*)
 * - @c SVN_AUTH_PARAM_SERVER_GROUP (@c char*)
 *
 * The following optional auth parameters are relevant to the providers:
 *
 * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)

@c SVN_AUTH_CRED_SSL_CLIENT_CERT credentials. 
</member>
        <member name="F:svn_auth_cred_username_t.may_save">
Indicates if the credentials may be saved (to disk). For example, a
   * GUI prompt implementation with a remember username checkbox shall set
   * @a may_save to TRUE if the checkbox is checked.

</member>
        <member name="F:svn_auth_cred_username_t.username">
Username 
</member>
        <member name="T:svn_auth_cred_username_t">
Username credential kind.
 *
 * The following optional auth parameters are relevant to the providers:
 *
 * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)
 * - @c SVN_AUTH_PARAM_DEFAULT_USERNAME (@c char*)

@c SVN_AUTH_CRED_USERNAME credentials. 
</member>
        <member name="F:svn_auth_cred_simple_t.may_save">
Indicates if the credentials may be saved (to disk). For example, a
   * GUI prompt implementation with a remember password checkbox shall set
   * @a may_save to TRUE if the checkbox is checked.

</member>
        <member name="F:svn_auth_cred_simple_t.password">
Password 
</member>
        <member name="F:svn_auth_cred_simple_t.username">
Username 
</member>
        <member name="T:svn_auth_cred_simple_t">
Specific types of credentials *
Simple username/password pair credential kind.
 *
 * The following auth parameters may be available to the providers:
 *
 * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)
 * - @c SVN_AUTH_PARAM_DEFAULT_USERNAME (@c char*)
 * - @c SVN_AUTH_PARAM_DEFAULT_PASSWORD (@c char*)

@c SVN_AUTH_CRED_SIMPLE credentials. 
</member>
        <member name="T:svn_auth_provider_object_t">
A provider object, ready to be put into an array and given to
    svn_auth_open(). 
</member>
        <member name="F:svn_auth_provider_t.save_credentials">
Save credentials.
   *
   * Store @a credentials for future use.  @a provider_baton is
   * general context for the vtable, and @a parameters contains any
   * run-time data the provider may need.  Set @a *saved to TRUE if
   * the save happened, or FALSE if not.  The provider is not required
   * to save; if it refuses or is unable to save for non-fatal
   * reasons, return FALSE.  If the provider never saves data, then
   * this function pointer should simply be NULL. @a realmstring comes
   * from the svn_auth_first_credentials() call.

</member>
        <member name="F:svn_auth_provider_t.next_credentials">
Get a different set of credentials.
   *
   * Set @a *credentials to another set of valid credentials (using @a
   * iter_baton as the context from previous call to first_credentials
   * or next_credentials).  If no more credentials are available, set
   * @a *credentials to NULL.  If the provider only has one set of
   * credentials, this function pointer should simply be NULL. @a
   * provider_baton is general context for the vtable, @a parameters
   * contains any run-time data that the provider may need, and @a
   * realmstring comes from the svn_auth_first_credentials() call.

</member>
        <member name="F:svn_auth_provider_t.first_credentials">
Get an initial set of credentials.
   *
   * Set @a *credentials to a set of valid credentials within @a
   * realmstring, or NULL if no credentials are available.  Set @a
   * *iter_baton to context that allows a subsequent call to @c
   * next_credentials, in case the first credentials fail to
   * authenticate.  @a provider_baton is general context for the
   * vtable, @a parameters contains any run-time data that the
   * provider may need, and @a realmstring comes from the
   * svn_auth_first_credentials() call.

</member>
        <member name="F:svn_auth_provider_t.cred_kind">
The kind of credentials this provider knows how to retrieve. 
</member>
        <member name="T:svn_auth_provider_t">
The main authentication "provider" vtable. 
</member>
        <member name="T:svn_auth_iterstate_t">
The type of a Subversion authentication-iteration object 
</member>
        <member name="T:svn_auth_baton_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_ra.h
 @brief Repository Access

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_delta.h
 @brief Delta-parsing

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_auth.h
 @brief Subversion's authentication system

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

Overview of the svn authentication system.
 *
 * We define an authentication "provider" as a module that is able to
 * return a specific set of credentials. (e.g. username/password,
 * certificate, etc.)  Each provider implements a vtable that
 *
 * - can fetch initial credentials
 * - can retry the fetch (or try to fetch something different)
 * - can store the credentials for future use
 *
 * For any given type of credentials, there can exist any number of
 * separate providers -- each provider has a different method of
 * fetching. (i.e. from a disk store, by prompting the user, etc.)
 *
 * The application begins by creating an auth baton object, and
 * "registers" some number of providers with the auth baton, in a
 * specific order.  (For example, it may first register a
 * username/password provider that looks in disk store, then register
 * a username/password provider that prompts the user.)
 *
 * Later on, when any svn library is challenged, it asks the auth
 * baton for the specific credentials.  If the initial credentials
 * fail to authenticate, the caller keeps requesting new credentials.
 * Under the hood, libsvn_auth effectively "walks" over each provider
 * (in order of registry), one at a time, until all the providers have
 * exhausted all their retry options.
 *
 * This system allows an application to flexibly define authentication
 * behaviors (by changing registration order), and very easily write
 * new authentication providers.
 *
 * An auth_baton also contains an internal hashtable of run-time
 * parameters; any provider or library layer can set these run-time
 * parameters at any time, so that the provider has access to the
 * data.  (For example, certain run-time data may not be available
 * until an authentication challenge is made.)  Each credential type
 * must document the run-time parameters that are made available to
 * its providers.
 *
 * @defgroup auth_fns Authentication functions
 * @{

The type of a Subversion authentication object 
</member>
        <member name="M:svn_opt_print_help(apr_getopt_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Same as svn_opt_print_help2(), but acts on #svn_opt_subcommand_desc_t.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_opt_print_help2(apr_getopt_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Same as svn_opt_print_help3(), but with @a global_options always @c
 NULL.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_opt_print_help3(apr_getopt_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Central dispatcher function for various kinds of help message.
 Prints one of:
   * subcommand-specific help (svn_opt_subcommand_help)
   * generic help (svn_opt_print_generic_help)
   * version info
   * simple usage complaint: "Type '@a pgm_name help' for usage."

 If @a os is not @c NULL and it contains arguments, then try
 printing help for them as though they are subcommands, using @a
 cmd_table and @a option_table for option information.  If not @c
 NULL, @a global_options is a zero-terminated array of options taken
 by all subcommands.

 Else, if @a print_version is TRUE, then print version info, in
 brief form if @a quiet is also TRUE; if @a quiet is FALSE, then if
 @a version_footer is non-NULL, print it following the version
 information.

 Else, if @a os is not @c NULL and does not contain arguments, print
 generic help, via svn_opt_print_generic_help2() with the @a header,
 @a cmd_table, @a option_table, and @a footer arguments.

 Else, when @a os is @c NULL, print the simple usage complaint.

 Use @a pool for temporary allocations.

 Notes: The reason this function handles both version printing and
 general usage help is that a confused user might put both the
 --version flag *and* subcommand arguments on a help command line.
 The logic for handling such a situation should be in one place.

 @since New in 1.5.

</member>
        <member name="M:svn_opt_parse_path(svn_opt_revision_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Parse a working-copy or URL in @a path, extracting any trailing
 revision specifier of the form "@rev" from the last component of
 the path.

 Some examples would be:

    "foo/bar"                      -&gt; "foo/bar",       (unspecified)
    "foo/bar@13"                   -&gt; "foo/bar",       (number, 13)
    "foo/bar@HEAD"                 -&gt; "foo/bar",       (head)
    "foo/bar@{1999-12-31}"         -&gt; "foo/bar",       (date, 1999-12-31)
    "http://a/b@27"                -&gt; "http://a/b",    (number, 27)
    "http://a/b@COMMITTED"         -&gt; "http://a/b",    (committed) [*]
    "http://a/b@{1999-12-31}       -&gt; "http://a/b",    (date, 1999-12-31)
    "http://a/b@%7B1999-12-31%7D   -&gt; "http://a/b",    (date, 1999-12-31)
    "foo/bar@1:2"                  -&gt; error
    "foo/bar@baz"                  -&gt; error
    "foo/bar@"                     -&gt; "foo/bar",       (base)
    "foo/bar/@13"                  -&gt; "foo/bar/",      (number, 13)
    "foo/bar@@13"                  -&gt; "foo/bar@",      (number, 13)
    "foo/@bar@HEAD"                -&gt; "foo/@bar",      (head)
    "foo@/bar"                     -&gt; "foo@/bar",      (unspecified)
    "foo@HEAD/bar"                 -&gt; "foo@HEAD/bar",  (unspecified)

   [*] Syntactically valid but probably not semantically useful.

 If a trailing revision specifier is found, parse it into @a *rev and
 put the rest of the path into @a *truepath, allocating from @a pool;
 or return an @c SVN_ERR_CL_ARG_PARSING_ERROR if the revision
 specifier is invalid.  If no trailing revision specifier is found,
 set @a *truepath to @a path and @a rev-&gt;kind to @c
 svn_opt_revision_unspecified.

 This function does not require that @a path be in canonical form.
 No canonicalization is done and @a *truepath will only be in
 canonical form if @a path is in canonical form.

 @since New in 1.1.

</member>
        <member name="M:svn_opt_parse_all_args(apr_array_header_t**,apr_getopt_t*,apr_pool_t*)">
Parse all remaining arguments from @a os-&gt;argv, return them as
<tt>const char *</tt> in @a *args_p, without doing any UTF-8 conversion.
Allocate @a *args_p and its values in @a pool.

</member>
        <member name="M:svn_opt_parse_num_args(apr_array_header_t**,apr_getopt_t*,System.Int32,apr_pool_t*)">
Parse @a num_args non-target arguments from the list of arguments in
@a os-&gt;argv, return them as <tt>const char *</tt> in @a *args_p, without
doing any UTF-8 conversion.  Allocate @a *args_p and its values in @a pool.

</member>
        <member name="M:svn_opt_push_implicit_dot_target(apr_array_header_t*,apr_pool_t*)">
 If no targets exist in @a *targets, add `.' as the lone target.

 (Some commands take an implicit "." string argument when invoked
 with no arguments. Those commands make use of this function to
 add "." to the target array if the user passes no args.)

</member>
        <member name="M:svn_opt_args_to_target_array(apr_array_header_t**,apr_getopt_t*,apr_array_header_t*,svn_opt_revision_t*,svn_opt_revision_t*,System.Int32,apr_pool_t*)">
 The same as svn_opt_args_to_target_array2() except that, in
 addition, if @a extract_revisions is set, then look for trailing
 "@rev" syntax on the first two paths.  If the first target in @a
 *targets_p ends in "@rev", replace it with a canonicalized version of
 the part before "@rev" and replace @a *start_revision with the value
 of "rev".  If the second target in @a *targets_p ends in "@rev",
 replace it with a canonicalized version of the part before "@rev"
 and replace @a *end_revision with the value of "rev".  Ignore
 revision specifiers on any further paths.  "rev" can be any form of
 single revision specifier, as accepted by svn_opt_parse_revision().

 @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_opt_args_to_target_array2(apr_array_header_t**,apr_getopt_t*,apr_array_header_t*,apr_pool_t*)">
 This is the same as svn_opt_args_to_target_array3() except that it
 silently ignores paths that have the same name as a working copy
 administrative directory.

 @since New in 1.2.

</member>
        <member name="M:svn_opt_args_to_target_array3(apr_array_header_t**,apr_getopt_t*,apr_array_header_t*,apr_pool_t*)">
 Pull remaining target arguments from @a os into @a *targets_p,
 converting them to UTF-8, followed by targets from @a known_targets
 (which might come from, for example, the "--targets" command line
 option), which are already in UTF-8.

 On each URL target, do some IRI-to-URI encoding and some
 auto-escaping.  On each local path, canonicalize case and path
 separators.

 Allocate @a *targets_p and its elements in @a pool.

 If a path has the same name as a Subversion working copy
 administrative directory, return SVN_ERR_RESERVED_FILENAME_SPECIFIED;
 if multiple reserved paths are encountered, return a chain of
 errors, all of which are SVN_ERR_RESERVED_FILENAME_SPECIFIED.  Do
 not return this type of error in a chain with any other type of
 error, and if this is the only type of error encountered, complete
 the operation before returning the error(s).

 @since New in 1.5.

</member>
        <member name="M:svn_opt_resolve_revisions(svn_opt_revision_t*,svn_opt_revision_t*,System.Int32,System.Int32,apr_pool_t*)">
 Resolve peg revisions and operational revisions in the following way:

    - If @a is_url is set and @a peg_rev-&gt;kind is
      @c svn_opt_revision_unspecified, @a peg_rev-&gt;kind defaults to
      @c svn_opt_revision_head.

    - If @a is_url is not set, and @a peg_rev-&gt;kind is
      @c svn_opt_revision_unspecified, @a peg_rev-&gt;kind defaults to
      @c svn_opt_revision_base.

    - If @a op_rev-&gt;kind is @c svn_opt_revision_unspecified, @a op_rev
      defaults to @a peg_rev.

 Both @a peg_rev and @a op_rev may be modified as a result of this
 function.  @a is_url should be set if the path the revisions refer to is
 a url, and unset otherwise.

 If @a notice_local_mods is set, @c svn_opt_revision_working is used,
 instead of @c svn_opt_revision_base.

 Use @a pool for allocations.

 @since New in 1.5.

</member>
        <member name="M:svn_opt_parse_revision_to_range(apr_array_header_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Parse @a arg, where @a arg is "N" or "N:M", into a
 @c svn_opt_revision_range_t and push that onto @a opt_ranges.

    - If @a arg is "N", set the @c start field of the
      @c svn_opt_revision_range_t to represent N and the @c end field
      to @c svn_opt_revision_unspecified.

    - If @a arg is "N:M", set the @c start field of the
      @c svn_opt_revision_range_t to represent N and the @c end field
      to represent M.

 If @a arg is invalid, return -1; else return 0.  It is invalid to omit
 a revision (as in, ":", "N:" or ":M").

 Use @a pool to allocate @c svn_opt_revision_range_t pushed to the array.

 @since New in 1.5.

</member>
        <member name="M:svn_opt_parse_revision(svn_opt_revision_t*,svn_opt_revision_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Set @a *start_revision and/or @a *end_revision according to @a arg,
 where @a arg is "N" or "N:M", like so:

    - If @a arg is "N", set @a *start_revision to represent N, and
      leave @a *end_revision untouched.

    - If @a arg is "N:M", set @a *start_revision and @a *end_revision
      to represent N and M respectively.

 N and/or M may be one of the special revision descriptors
 recognized by revision_from_word(), or a date in curly braces.

 If @a arg is invalid, return -1; else return 0.
 It is invalid to omit a revision (as in, ":", "N:" or ":M").

 @note It is typical, though not required, for @a *start_revision and
 @a *end_revision to be @c svn_opt_revision_unspecified kind on entry.

 Use @a pool for temporary allocations.

</member>
        <member name="F:svn_opt_revision_range_t.end">
The last revision in the range 
</member>
        <member name="F:svn_opt_revision_range_t.start">
The first revision in the range 
</member>
        <member name="T:svn_opt_revision_range_t">
A revision range, specified in one of @c svn_opt_revision_kind ways. 
</member>
        <member name="T:svn_opt_revision_t">
A revision, specified in one of @c svn_opt_revision_kind ways. 
</member>
        <member name="F:svn_opt_revision_value_t.date">
the date of the revision 
</member>
        <member name="F:svn_opt_revision_value_t.number">
The revision number 
</member>
        <member name="T:svn_opt_revision_value_t">
 A revision value, which can be specified as a number or a date.

 @note This union was formerly an anonymous inline type in
 @c svn_opt_revision_t, and was converted to a named type just to
 make things easier for SWIG.

 @since New in 1.3.

</member>
        <member name="T:svn_opt_revision_kind">
 Various ways of specifying revisions.

 @note
 In contexts where local mods are relevant, the `working' kind
 refers to the uncommitted "working" revision, which may be modified
 with respect to its base revision.  In other contexts, `working'
 should behave the same as `committed' or `current'.

</member>
        <member name="F:svn_opt_revision_head">
repository youngest 
</member>
        <member name="F:svn_opt_revision_working">
current, plus local mods 
</member>
        <member name="F:svn_opt_revision_base">
.svn/entries current revision 
</member>
        <member name="F:svn_opt_revision_previous">
(rev of most recent change) - 1 
</member>
        <member name="F:svn_opt_revision_committed">
rev of most recent change 
</member>
        <member name="F:svn_opt_revision_date">
revision given as date 
</member>
        <member name="F:svn_opt_revision_number">
revision given as number 
</member>
        <member name="F:svn_opt_revision_unspecified">
No revision information given. 
</member>
        <member name="M:svn_opt_subcommand_help(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Same as svn_opt_subcommand_help2(), but acts on
 #svn_opt_subcommand_desc_t.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_opt_subcommand_help2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Same as svn_opt_subcommand_help3(), but with @a global_options
 always NULL.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_opt_subcommand_help3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Get @a subcommand's usage from @a table, and print it to @c stdout.
 Obtain option usage from @a options_table.  If not @c NULL, @a
 global_options is a zero-terminated list of global options.  Use @a
 pool for temporary allocation.  @a subcommand may be a canonical
 command name or an alias.  ### @todo Why does this only print to
 @c stdout, whereas svn_opt_print_generic_help() gives us a choice?

 @since New in 1.5.

</member>
        <member name="M:svn_opt_format_option(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Print an option @a opt nicely into a @a string allocated in @a pool.
If @a doc is set, include the generic documentation string of @a opt,
localized to the current locale if a translation is available.

</member>
        <member name="M:svn_opt_print_generic_help(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*,_iobuf*)">
 Same as svn_opt_print_generic_help2(), but acts on
 #svn_opt_subcommand_desc_t.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_opt_print_generic_help2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*,_iobuf*)">
 Print a generic (not command-specific) usage message to @a stream.

 ### @todo Why is @a stream a stdio file instead of an svn stream?

 If @a header is non-NULL, print @a header followed by a newline.  Then
 loop over @a cmd_table printing the usage for each command (getting
 option usages from @a opt_table).  Then if @a footer is non-NULL, print
 @a footer followed by a newline.

 Use @a pool for temporary allocation.

 @since New in 1.4.

</member>
        <member name="M:svn_opt_subcommand_takes_option(svn_opt_subcommand_desc_t!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Return @c TRUE iff subcommand @a command supports option @a option_code,
 else return @c FALSE.

 Same as svn_opt_subcommand_takes_option2(), but acts on
 #svn_opt_subcommand_desc_t.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_opt_subcommand_takes_option2(svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Same as svn_opt_subcommand_takes_option3(), but with @c NULL for @a
 global_options.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_opt_subcommand_takes_option3(svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst*)">
 Return @c TRUE iff subcommand @a command supports option @a
 option_code, else return @c FALSE.  If @a global_options is
 non-NULL, it is a zero-terminated array, and all subcommands take
 the options listed in it.

 @since New in 1.5.

</member>
        <member name="M:svn_opt_get_option_from_code(System.Int32,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*)">
 Return the first entry from @a option_table whose option code is @a code,
 or @c NULL if no match.  @a option_table must end with an element whose
 every field is zero.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_opt_get_option_from_code2(System.Int32,apr_getopt_option_t!System.Runtime.CompilerServices.IsConst*,svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return pointer to an @c apr_getopt_option_t for the option whose
 option code is @a code, or @c NULL if no match.  @a option_table must end
 with an element whose every field is zero.  If @c command is non-NULL,
 then return the subcommand-specific option description instead of the
 generic one, if a specific description is defined.

 The returned value may be statically allocated, or allocated in @a pool.

 @since New in 1.4.

</member>
        <member name="M:svn_opt_get_canonical_subcommand(svn_opt_subcommand_desc_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return the entry in @a table whose name matches @a cmd_name, or @c NULL if
 none.  @a cmd_name may be an alias.

 Same as svn_opt_get_canonical_subcommand2(), but acts on
 #svn_opt_subcommand_desc_t.

 @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_opt_get_canonical_subcommand2(svn_opt_subcommand_desc2_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return the entry in @a table whose name matches @a cmd_name, or @c NULL if
 none.  @a cmd_name may be an alias.

 @since New in 1.4.

</member>
        <member name="F:svn_opt_subcommand_desc_t.valid_options">
A list of options accepted by this command.  Each value in the
   * array is a unique enum (the 2nd field in apr_getopt_option_t)

</member>
        <member name="F:svn_opt_subcommand_desc_t.help">
A brief string describing this command, for usage messages. 
</member>
        <member name="F:svn_opt_subcommand_desc_t.aliases">
A list of alias names for this command (e.g., 'up' for 'update'). 
</member>
        <member name="F:svn_opt_subcommand_desc_t.cmd_func">
The function this command invokes. 
</member>
        <member name="F:svn_opt_subcommand_desc_t.name">
The full name of this command. 
</member>
        <member name="T:svn_opt_subcommand_desc_t">
One element of a subcommand dispatch table.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 *
 * Like #svn_opt_subcommand_desc2_t but lacking the @c desc_overrides
 * member.

</member>
        <member name="F:svn_opt_subcommand_desc2_t.valid_options">
A list of options accepted by this command.  Each value in the
   * array is a unique enum (the 2nd field in apr_getopt_option_t)

</member>
        <member name="F:svn_opt_subcommand_desc2_t.help">
A brief string describing this command, for usage messages. 
</member>
        <member name="F:svn_opt_subcommand_desc2_t.aliases">
A list of alias names for this command (e.g., 'up' for 'update'). 
</member>
        <member name="F:svn_opt_subcommand_desc2_t.cmd_func">
The function this command invokes. 
</member>
        <member name="F:svn_opt_subcommand_desc2_t.name">
The full name of this command. 
</member>
        <member name="T:svn_opt_subcommand_desc2_t">
The maximum number of aliases a subcommand can have. 
The maximum number of options that can be accepted by a subcommand. 
Options that have no short option char should use an identifying
 * integer equal to or greater than this.

One element of a subcommand dispatch table.
 *
 * @since New in 1.4.

</member>
        <member name="D:apr_getopt_err_fn_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_opt.h
 @brief Option and argument parsing for Subversion command lines

</member>
        <member name="M:svn_compat_wrap_file_rev_handler(=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_hash_t*,System.Int32,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**,apr_array_header_t*,apr_pool_t*)*,System.Void**,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_hash_t*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**,apr_array_header_t*,apr_pool_t*),System.Void*,apr_pool_t*)">
Return, in @a *handler2 and @a *handler2_baton a function/baton that
 * will call @a handler/@a handler_baton, allocating the @a *handler2_baton
 * in @a pool.
 *
 * @note This is used by compatibility wrappers, which exist in more than
 * Subversion core library.
 *
 * @note @c svn_file_rev_handler_old_t is a placeholder type for both
 * @c svn_repos_file_rev_handler_t and @c svn_ra_file_rev_handler_t.  It is
 * reproduced here for dependency reasons.
 *
 * @since New in 1.5.

</member>
        <member name="D:svn_file_rev_handler_old_t">
 The old file rev handler interface.

 @note @c svn_file_rev_handler_old_t is a placeholder type for both
 @c svn_repos_file_rev_handler_t and @c svn_ra_file_rev_handler_t.  It is
 reproduced here for dependency reasons.

 @deprecated This type is provided for the svn_compat_wrap_file_rev_handler()
 compatibilty wrapper, and should not be used for new development.
 @since New in 1.5.

</member>
        <member name="D:svn_file_rev_handler_t">
@} 
 The callback invoked by file rev loopers, such as
 svn_ra_plugin_t.get_file_revs2() and svn_repos_get_file_revs2().

 @a baton is provided by the caller, @a path is the pathname of the file
 in revision @a rev and @a rev_props are the revision properties.

 If @a delta_handler and @a delta_baton are non-NULL, they may be set to a
 handler/baton which will be called with the delta between the previous
 revision and this one after the return of this callback.  They may be
 left as NULL/NULL.

 @a result_of_merge will be @c TRUE if the revision being returned was
 included as the result of a merge.

 @a prop_diffs is an array of svn_prop_t elements indicating the property
 delta for this and the previous revision.

 @a pool may be used for temporary allocations, but you can't rely
 on objects allocated to live outside of this particular call and
 the immediately following calls to @a *delta_handler if any.  (Pass
 in a pool via @a baton if need be.)

 @since New in 1.5.

</member>
        <member name="M:svn_delta_path_driver(svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32!System.Runtime.CompilerServices.IsLong,apr_array_header_t*,=FUNC:svn_error_t*(System.Void**,System.Void*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
Drive @a editor (with its @a edit_baton) in such a way that
 * each path in @a paths is traversed in a depth-first fashion.  As
 * each path is hit as part of the editor drive, use @a
 * callback_func and @a callback_baton to allow the caller to handle
 * the portion of the editor drive related to that path.
 *
 * Use @a revision as the revision number passed to intermediate
 * directory openings.
 *
 * Use @a pool for all necessary allocations.

</member>
        <member name="D:svn_delta_path_driver_cb_func_t">
@} 
Path-based editor drives.
 *
 * @defgroup svn_delta_path_delta_drivers Path-based delta drivers
 * @{

Callback function type for svn_delta_path_driver().
 *
 * The handler of this callback is given the callback baton @a
 * callback_baton, @a path, and the @a parent_baton which represents
 * path's parent directory as created by the editor passed to
 * svn_delta_path_driver().
 *
 * If @a path represents a directory, the handler must return a @a
 * *dir_baton for @a path, generated from the same editor (so that the
 * driver can later close that directory).
 *
 * If, however, @a path represents a file, the handler should NOT
 * return any file batons.  It can close any opened or added files
 * immediately, or delay that close until the end of the edit when
 * svn_delta_path_driver() returns.
 *
 * Finally, if @a parent_baton is @c NULL, then the root of the edit
 * is also one of the paths passed to svn_delta_path_driver().  The
 * handler of this callback must call the editor's open_root()
 * function and return the top-level root dir baton in @a *dir_baton.

</member>
        <member name="M:svn_delta_depth_filter_editor(svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,svn_depth_t,System.Int32,apr_pool_t*)">
Set @a *editor and @a *edit_baton to an depth-based filtering
 * editor that wraps @a wrapped_editor and @a wrapped_baton.
 *
 * The @a editor will track the depth of this drive against the @a
 * requested_depth, taking into account whether not the edit drive is
 * making use of a target (via @a has_target), and forward editor
 * calls which operate "within" the request depth range through to @a
 * wrapped_editor.
 *
 * @a requested_depth must be one of the following depth values:
 * @c svn_depth_infinity, @c svn_depth_empty, @c svn_depth_files,
 * @c svn_depth_immediates, or @c svn_depth_unknown.
 *
 * If filtering is deemed unncessary (or if @a requested_depth is @c
 * svn_depth_unknown), @a *editor and @a *edit_baton will be set to @a
 * wrapped_editor and @a wrapped_baton, respectively; otherwise,
 * they'll be set to new objects allocated from @a pool.
 *
 * @note Because the svn_delta_editor_t interface's @c delete_entry()
 * function doesn't carry node kind information, a depth-based
 * filtering editor being asked to filter for @c svn_depth_files but
 * receiving a @c delete_entry() call on an immediate child of the
 * editor's target is unable to know if that deletion should be
 * allowed or filtered out -- a delete of a top-level file is okay in
 * this case, a delete of a top-level subdirectory is not.  As such,
 * this filtering editor takes a conservative approach, and ignores
 * top-level deletion requests when filtering for @c svn_depth_files.
 * Fortunately, most non-depth-aware (pre-1.5) Subversion editor
 * drivers can be told to drive non-recursively (where non-recursive
 * means essentially @c svn_depth_files), which means they won't
 * transmit out-of-scope editor commands anyway.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_delta_get_cancellation_editor(=FUNC:svn_error_t*(System.Void*),System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst*,System.Void*,svn_delta_editor_t!System.Runtime.CompilerServices.IsConst**,System.Void**,apr_pool_t*)">
Set @a *editor and @a *edit_baton to a cancellation editor that
 * wraps @a wrapped_editor and @a wrapped_baton.
 *
 * The @a editor will call @a cancel_func with @a cancel_baton when each of
 * its functions is called, continuing on to call the corresponding wrapped
 * function if @a cancel_func returns @c SVN_NO_ERROR.
 *
 * If @a cancel_func is @c NULL, set @a *editor to @a wrapped_editor and
 * @a *edit_baton to @a wrapped_baton.

</member>
        <member name="M:svn_delta_noop_window_handler(svn_txdelta_window_t*,System.Void*)">
A text-delta window handler which does nothing.
 *
 * Editors can return this handler from @c apply_textdelta if they don't
 * care about text delta windows.

</member>
        <member name="M:svn_delta_default_editor(apr_pool_t*)">
Return a default delta editor template, allocated in @a pool.
 *
 * The editor functions in the template do only the most basic
 * baton-swapping: each editor function that produces a baton does so
 * by copying its incoming baton into the outgoing baton reference.
 *
 * This editor is not intended to be useful by itself, but is meant to
 * be the basis for a useful editor.  After getting a default editor,
 * you substitute in your own implementations for the editor functions
 * you care about.  The ones you don't care about, you don't have to
 * implement -- you can rely on the template's implementation to
 * safely do nothing of consequence.

</member>
        <member name="F:svn_delta_editor_t.abort_edit">
The editor-driver has decided to bail out.  Allow the editor to
   * gracefully clean up things if it needs to.

</member>
        <member name="F:svn_delta_editor_t.close_edit">
All delta processing is done.  Call this, with the @a edit_baton for
   * the entire edit.

</member>
        <member name="F:svn_delta_editor_t.absent_file">
In the directory represented by @a parent_baton, indicate that
   * @a path is present as a file in the edit source, but cannot be
   * conveyed to the edit consumer (perhaps because of authorization
   * restrictions).

</member>
        <member name="F:svn_delta_editor_t.close_file">
We are done processing a file, whose baton is @a file_baton (set by
   * @c add_file or @c open_file).  We won't be using the baton any
   * more, so whatever resources it refers to may now be freed.
   *
   * @a text_checksum is the hex MD5 digest for the fulltext that
   * resulted from a delta application, see @c apply_textdelta.  The
   * checksum is ignored if NULL.  If not null, it is compared to the
   * checksum of the new fulltext, and the error
   * SVN_ERR_CHECKSUM_MISMATCH is returned if they do not match.  If
   * there is no new fulltext, @a text_checksum is ignored.

</member>
        <member name="F:svn_delta_editor_t.change_file_prop">
Change the value of a file's property.
   * - @a file_baton specifies the file whose property should change.
   * - @a name is the name of the property to change.
   * - @a value is the new (final) value of the property, or @c NULL if the
   *   property should be removed altogether.
   *
   * The callback is guaranteed to be called exactly once for each property
   * whose value differs between the start and the end of the edit.
   *
   * All allocations should be performed in @a pool.

</member>
        <member name="F:svn_delta_editor_t.apply_textdelta">
Apply a text delta, yielding the new revision of a file.
   *
   * @a file_baton indicates the file we're creating or updating, and the
   * ancestor file on which it is based; it is the baton set by some
   * prior @c add_file or @c open_file callback.
   *
   * The callback should set @a *handler to a text delta window
   * handler; we will then call @a *handler on successive text
   * delta windows as we receive them.  The callback should set
   * @a *handler_baton to the value we should pass as the @a baton
   * argument to @a *handler.
   *
   * @a base_checksum is the hex MD5 digest for the base text against
   * which the delta is being applied; it is ignored if NULL, and may
   * be ignored even if not NULL.  If it is not ignored, it must match
   * the checksum of the base text against which svndiff data is being
   * applied; if it does not, @c apply_textdelta or the @a *handler call
   * which detects the mismatch will return the error
   * SVN_ERR_CHECKSUM_MISMATCH (if there is no base text, there may
   * still be an error if @a base_checksum is neither NULL nor the hex
   * MD5 checksum of the empty string).

</member>
        <member name="F:svn_delta_editor_t.open_file">
We are going to make change to a file named @a path, which resides
   * in the directory identified by @a parent_baton.
   *
   * The callback can store a baton for this new file in @a **file_baton;
   * whatever value it stores there should be passed through to
   * @c apply_textdelta.  If a valid revnum, @a base_revision is the
   * current revision of the file.
   *
   * Allocations for the returned @a file_baton should be performed in
   * @a file_pool. It is also typical to save this pool for later usage
   * by @c apply_textdelta and possibly @c close_file.

</member>
        <member name="F:svn_delta_editor_t.add_file">
We are going to add a new file named @a path.  The callback can
   * store a baton for this new file in @a **file_baton; whatever value
   * it stores there should be passed through to @c apply_textdelta.
   *
   * If @a copyfrom_path is non-@c NULL, this add has history (i.e., is a
   * copy), and the origin of the copy may be recorded as
   * @a copyfrom_path under @a copyfrom_revision.
   *
   * Allocations for the returned @a file_baton should be performed in
   * @a file_pool. It is also typical to save this pool for later usage
   * by @c apply_textdelta and possibly @c close_file.

</member>
        <member name="F:svn_delta_editor_t.absent_directory">
In the directory represented by @a parent_baton, indicate that
   * @a path is present as a subdirectory in the edit source, but
   * cannot be conveyed to the edit consumer (perhaps because of
   * authorization restrictions).

</member>
        <member name="F:svn_delta_editor_t.close_directory">
We are done processing a subdirectory, whose baton is @a dir_baton
   * (set by @c add_directory or @c open_directory).  We won't be using
   * the baton any more, so whatever resources it refers to may now be
   * freed.

</member>
        <member name="F:svn_delta_editor_t.change_dir_prop">
Change the value of a directory's property.
   * - @a dir_baton specifies the directory whose property should change.
   * - @a name is the name of the property to change.
   * - @a value is the new (final) value of the property, or @c NULL if the
   *   property should be removed altogether.
   *
   * The callback is guaranteed to be called exactly once for each property
   * whose value differs between the start and the end of the edit.
   *
   * All allocations should be performed in @a pool.

</member>
        <member name="F:svn_delta_editor_t.open_directory">
We are going to make changes in a subdirectory (of the directory
   * identified by @a parent_baton). The subdirectory is specified by
   * @a path. The callback must store a value in @a *child_baton that
   * should be used as the @a parent_baton for subsequent changes in this
   * subdirectory.  If a valid revnum, @a base_revision is the current
   * revision of the subdirectory.
   *
   * Allocations for the returned @a child_baton should be performed in
   * @a dir_pool. It is also typical to (possibly) save this pool for later
   * usage by @c close_directory.

</member>
        <member name="F:svn_delta_editor_t.add_directory">
We are going to add a new subdirectory named @a path.  We will use
   * the value this callback stores in @a *child_baton as the
   * @a parent_baton for further changes in the new subdirectory.
   *
   * If @a copyfrom_path is non-@c NULL, this add has history (i.e., is a
   * copy), and the origin of the copy may be recorded as
   * @a copyfrom_path under @a copyfrom_revision.
   *
   * Allocations for the returned @a child_baton should be performed in
   * @a dir_pool. It is also typical to (possibly) save this pool for later
   * usage by @c close_directory.

</member>
        <member name="F:svn_delta_editor_t.delete_entry">
Remove the directory entry named @a path, a child of the directory
   * represented by @a parent_baton.  If @a revision is a valid
   * revision number, it is used as a sanity check to ensure that you
   * are really removing the revision of @a path that you think you are.
   *
   * All allocations should be performed in @a pool.

</member>
        <member name="F:svn_delta_editor_t.open_root">
Set @a *root_baton to a baton for the top directory of the change.
   * (This is the top of the subtree being changed, not necessarily
   * the root of the filesystem.)  As with any other directory baton, the
   * producer should call @c close_directory on @a root_baton when done.
   * And as with other @c open_* calls, the @a base_revision here is the
   * current revision of the directory (before getting bumped up to the
   * new target revision set with @c set_target_revision).
   *
   * Allocations for the returned @a root_baton should be performed in
   * @a dir_pool. It is also typical to (possibly) save this pool for later
   * usage by @c close_directory.

</member>
        <member name="F:svn_delta_editor_t.set_target_revision">
Set the target revision for this edit to @a target_revision.  This
   * call, if used, should precede all other editor calls.

</member>
        <member name="T:svn_delta_editor_t">
@} 
Traversing tree deltas.
 *
 * In Subversion, we've got various producers and consumers of tree
 * deltas.
 *
 * In processing a `commit' command:
 * - The client examines its working copy data, and produces a tree
 *   delta describing the changes to be committed.
 * - The client networking library consumes that delta, and sends them
 *   across the wire as an equivalent series of network requests (for
 *   example, to svnserve as an ra_svn protocol stream, or to an
 *   Apache httpd server as WebDAV commands)
 * - The server receives those requests and produces a tree delta ---
 *   hopefully equivalent to the one the client produced above.
 * - The Subversion server module consumes that delta and commits an
 *   appropriate transaction to the filesystem.
 *
 * In processing an `update' command, the process is reversed:
 * - The Subversion server module talks to the filesystem and produces
 *   a tree delta describing the changes necessary to bring the
 *   client's working copy up to date.
 * - The server consumes this delta, and assembles a reply
 *   representing the appropriate changes.
 * - The client networking library receives that reply, and produces a
 *   tree delta --- hopefully equivalent to the one the Subversion
 *   server produced above.
 * - The working copy library consumes that delta, and makes the
 *   appropriate changes to the working copy.
 *
 * The simplest approach would be to represent tree deltas using the
 * obvious data structure.  To do an update, the server would
 * construct a delta structure, and the working copy library would
 * apply that structure to the working copy; the network layer's job
 * would simply be to get the structure across the net intact.
 *
 * However, we expect that these deltas will occasionally be too large
 * to fit in a typical workstation's swap area.  For example, in
 * checking out a 200Mb source tree, the entire source tree is
 * represented by a single tree delta.  So it's important to handle
 * deltas that are too large to fit in swap all at once.
 *
 * So instead of representing the tree delta explicitly, we define a
 * standard way for a consumer to process each piece of a tree delta
 * as soon as the producer creates it.  The @c svn_delta_editor_t
 * structure is a set of callback functions to be defined by a delta
 * consumer, and invoked by a delta producer.  Each invocation of a
 * callback function describes a piece of the delta --- a file's
 * contents changing, something being renamed, etc.
 *
 * @defgroup svn_delta_tree_deltas Tree deltas
 * @{

A structure full of callback functions the delta source will invoke
 * as it produces the delta.
 *
 * <h3>Function Usage</h3>
 *
 * Here's how to use these functions to express a tree delta.
 *
 * The delta consumer implements the callback functions described in
 * this structure, and the delta producer invokes them.  So the
 * caller (producer) is pushing tree delta data at the callee
 * (consumer).
 *
 * At the start of traversal, the consumer provides @a edit_baton, a
 * baton global to the entire delta edit.  If there is a target
 * revision that needs to be set for this operation, the producer
 * should call the @c set_target_revision function at this point.
 *
 * Next, if there are any tree deltas to express, the producer should
 * pass the @a edit_baton to the @c open_root function, to get a baton
 * representing root of the tree being edited.
 *
 * Most of the callbacks work in the obvious way:
 *
 *     @c delete_entry
 *     @c add_file
 *     @c add_directory
 *     @c open_file
 *     @c open_directory
 *
 * Each of these takes a directory baton, indicating the directory
 * in which the change takes place, and a @a path argument, giving the
 * path (relative to the root of the edit) of the file,
 * subdirectory, or directory entry to change. Editors will usually
 * want to join this relative path with some base stored in the edit
 * baton (e.g. a URL, a location in the OS filesystem).
 *
 * Since every call requires a parent directory baton, including
 * @c add_directory and @c open_directory, where do we ever get our
 * initial directory baton, to get things started?  The @c open_root
 * function returns a baton for the top directory of the change.  In
 * general, the producer needs to invoke the editor's @c open_root
 * function before it can get anything of interest done.
 *
 * While @c open_root provides a directory baton for the root of
 * the tree being changed, the @c add_directory and @c open_directory
 * callbacks provide batons for other directories.  Like the
 * callbacks above, they take a @a parent_baton and a relative path
 * @a path, and then return a new baton for the subdirectory being
 * created / modified --- @a child_baton.  The producer can then use
 * @a child_baton to make further changes in that subdirectory.
 *
 * So, if we already have subdirectories named `foo' and `foo/bar',
 * then the producer can create a new file named `foo/bar/baz.c' by
 * calling:
 *
 *    - @c open_root () --- yielding a baton @a root for the top directory
 *
 *    - @c open_directory (@a root, "foo") --- yielding a baton @a f for `foo'
 *
 *    - @c open_directory (@a f, "foo/bar") --- yielding a baton @a b for
 *      `foo/bar'
 *
 *    - @c add_file (@a b, "foo/bar/baz.c")
 *
 * When the producer is finished making changes to a directory, it
 * should call @c close_directory.  This lets the consumer do any
 * necessary cleanup, and free the baton's storage.
 *
 * The @c add_file and @c open_file callbacks each return a baton
 * for the file being created or changed.  This baton can then be
 * passed to @c apply_textdelta to change the file's contents, or
 * @c change_file_prop to change the file's properties.  When the
 * producer is finished making changes to a file, it should call
 * @c close_file, to let the consumer clean up and free the baton.
 *
 * The @c add_file and @c add_directory functions each take arguments
 * @a copyfrom_path and @a copyfrom_revision.  If @a copyfrom_path is
 * non-@c NULL, then @a copyfrom_path and @a copyfrom_revision indicate where
 * the file or directory should be copied from (to create the file
 * or directory being added).  In that case, @a copyfrom_path must be
 * either a path relative to the root of the edit, or a URI from the
 * repository being edited.  If @a copyfrom_path is @c NULL, then @a
 * copyfrom_revision must be @c SVN_INVALID_REVNUM; it is invalid to
 * pass a mix of valid and invalid copyfrom arguments.
 *
 *
 * <h3>Function Call Ordering</h3>
 *
 * There are six restrictions on the order in which the producer
 * may use the batons:
 *
 * 1. The producer may call @c open_directory, @c add_directory,
 *    @c open_file, @c add_file at most once on any given directory
 *    entry.  @c delete_entry may be called at most once on any given
 *    directory entry and may later be followed by @c add_directory or
 *    @c add_file on the same directory entry.  @c delete_entry may
 *    not be called on any directory entry after @c open_directory,
 *    @c add_directory, @c open_file or @c add_file has been called on
 *    that directory entry.
 *
 * 2. The producer may not close a directory baton until it has
 *    closed all batons for its subdirectories.
 *
 * 3. When a producer calls @c open_directory or @c add_directory,
 *    it must specify the most recently opened of the currently open
 *    directory batons.  Put another way, the producer cannot have
 *    two sibling directory batons open at the same time.
 *
 * 4. A producer must call @c change_dir_prop on a directory either
 *    before opening any of the directory's subdirs or after closing
 *    them, but not in the middle.
 *
 * 5. When the producer calls @c open_file or @c add_file, either:
 *
 *    (a) The producer must follow with any changes to the file
 *    (@c change_file_prop and/or @c apply_textdelta, as applicable),
 *    followed by a @c close_file call, before issuing any other file
 *    or directory calls, or
 *
 *    (b) The producer must follow with a @c change_file_prop call if
 *    it is applicable, before issuing any other file or directory
 *    calls; later, after all directory batons including the root
 *    have been closed, the producer must issue @c apply_textdelta
 *    and @c close_file calls.
 *
 * 6. When the producer calls @c apply_textdelta, it must make all of
 *    the window handler calls (including the @c NULL window at the
 *    end) before issuing any other @c svn_delta_editor_t calls.
 *
 * So, the producer needs to use directory and file batons as if it
 * is doing a single depth-first traversal of the tree, with the
 * exception that the producer may keep file batons open in order to
 * make @c apply_textdelta calls at the end.
 *
 *
 * <h3>Pool Usage</h3>
 *
 * Many editor functions are invoked multiple times, in a sequence
 * determined by the editor "driver". The driver is responsible for
 * creating a pool for use on each iteration of the editor function,
 * and clearing that pool between each iteration. The driver passes
 * the appropriate pool on each function invocation.
 *
 * Based on the requirement of calling the editor functions in a
 * depth-first style, it is usually customary for the driver to similarly
 * nest the pools. However, this is only a safety feature to ensure
 * that pools associated with deeper items are always cleared when the
 * top-level items are also cleared. The interface does not assume, nor
 * require, any particular organization of the pools passed to these
 * functions. In fact, if "postfix deltas" are used for files, the file
 * pools definitely need to live outside the scope of their parent
 * directories' pools.
 *
 * Note that close_directory can be called *before* a file in that
 * directory has been closed. That is, the directory's baton is
 * closed before the file's baton. The implication is that
 * @c apply_textdelta and @c close_file should not refer to a parent
 * directory baton UNLESS the editor has taken precautions to
 * allocate it in a pool of the appropriate lifetime (the @a dir_pool
 * passed to @c open_directory and @c add_directory definitely does not
 * have the proper lifetime). In general, it is recommended to simply
 * avoid keeping a parent directory baton in a file baton.
 *
 *
 * <h3>Errors</h3>
 *
 * At least one implementation of the editor interface is
 * asynchronous; an error from one operation may be detected some
 * number of operations later.  As a result, an editor driver must not
 * assume that an error from an editing function resulted from the
 * particular operation being detected.  Moreover, once an editing
 * function returns an error, the edit is dead; the only further
 * operation which may be called on the editor is abort_edit.

</member>
        <member name="M:svn_txdelta_parse_svndiff(=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*),System.Void*,System.Int32,apr_pool_t*)">
Return a writable generic stream which will parse svndiff-format
 * data into a text delta, invoking @a handler with @a handler_baton
 * whenever a new window is ready.  If @a error_on_early_close is @c
 * TRUE, attempting to close this stream before it has handled the entire
 * svndiff data set will result in @c SVN_ERR_SVNDIFF_UNEXPECTED_END,
 * else this error condition will be ignored.

</member>
        <member name="M:svn_txdelta_to_svndiff(svn_stream_t*,apr_pool_t*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**)">
Similar to svn_txdelta_to_svndiff2, but always using svndiff
 * version 0.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_txdelta_to_svndiff2(=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**,svn_stream_t*,System.Int32,apr_pool_t*)">
Prepare to produce an svndiff-format diff from text delta windows.
 * @a output is a writable generic stream to write the svndiff data to.
 * Allocation takes place in a sub-pool of @a pool.  On return, @a *handler
 * is set to a window handler function and @a *handler_baton is set to
 * the value to pass as the @a baton argument to @a *handler. The svndiff
 * version is @a svndiff_version.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_txdelta_apply(svn_stream_t*,svn_stream_t*,System.Byte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*)*,System.Void**)">
Prepare to apply a text delta.  @a source is a readable generic stream
 * yielding the source data, @a target is a writable generic stream to
 * write target data to, and allocation takes place in a sub-pool of
 * @a pool.  On return, @a *handler is set to a window handler function and
 * @a *handler_baton is set to the value to pass as the @a baton argument to
 * @a *handler.
 *
 * If @a result_digest is non-NULL, it points to APR_MD5_DIGESTSIZE bytes
 * of storage, and the final call to @a handler populates it with the
 * MD5 digest of the resulting fulltext.
 *
 * If @a error_info is non-NULL, it is inserted parenthetically into
 * the error string for any error returned by svn_txdelta_apply() or
 * @a *handler.  (It is normally used to provide path information,
 * since there's nothing else in the delta application's context to
 * supply a path for error messages.)
 *
 * @note To avoid lifetime issues, @a error_info is copied into
 * @a pool or a subpool thereof.

</member>
        <member name="M:svn_txdelta_send_txstream(svn_txdelta_stream_t*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*),System.Void*,apr_pool_t*)">
Send the contents of @a txstream to window-handler @a handler/@a baton.
 * Windows will be extracted from the stream and delivered to the handler.
 *
 * All temporary allocation is performed in @a pool.

</member>
        <member name="M:svn_txdelta_send_stream(svn_stream_t*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*),System.Void*,System.Byte*,apr_pool_t*)">
Send the contents of @a stream to window-handler @a handler/@a baton.
 * This is effectively a 'copy' operation, resulting in delta windows that
 * make the target equivalent to the stream.
 *
 * If @a digest is non-NULL, populate it with the md5 checksum for the
 * fulltext that was deltified (@a digest must be at least
 * @c APR_MD5_DIGESTSIZE bytes long).
 *
 * All temporary allocation is performed in @a pool.

</member>
        <member name="M:svn_txdelta_send_string(svn_string_t!System.Runtime.CompilerServices.IsConst*,=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*),System.Void*,apr_pool_t*)">
Send the contents of @a string to window-handler @a handler/@a baton.
 * This is effectively a 'copy' operation, resulting in delta windows that
 * make the target equivalent to the value of @a string.
 *
 * All temporary allocation is performed in @a pool.

</member>
        <member name="M:svn_txdelta_target_push(=FUNC:svn_error_t*(svn_txdelta_window_t*,System.Void*),System.Void*,svn_stream_t*,apr_pool_t*)">
 Return a writable stream which, when fed target data, will send
 delta windows to @a handler/@a handler_baton which transform the
 data in @a source to the target data.  As usual, the window handler
 will receive a NULL window to signify the end of the window stream.
 The stream handler functions will read data from @a source as
 necessary.

 @since New in 1.1.

</member>
        <member name="M:svn_txdelta(svn_txdelta_stream_t**,svn_stream_t*,svn_stream_t*,apr_pool_t*)">
Set @a *stream to a pointer to a delta stream that will turn the byte
 * string from @a source into the byte stream from @a target.
 *
 * @a source and @a target are both readable generic streams.  When we call
 * svn_txdelta_next_window() on @a *stream, it will read from @a source and
 * @a target to gather as much data as it needs.
 *
 * Do any necessary allocation in a sub-pool of @a pool.

</member>
        <member name="M:svn_txdelta_md5_digest(svn_txdelta_stream_t*)">
Return the md5 digest for the complete fulltext deltified by
 * @a stream, or @c NULL if @a stream has not yet returned its final
 * @c NULL window.  The digest is allocated in the same memory as @a
 * STREAM.

</member>
        <member name="M:svn_txdelta_next_window(svn_txdelta_window_t**,svn_txdelta_stream_t*,apr_pool_t*)">
Set @a *window to a pointer to the next window from the delta stream
 * @a stream.  When we have completely reconstructed the target string,
 * set @a *window to zero.
 *
 * The window will be allocated in @a pool.

</member>
        <member name="M:svn_txdelta_stream_create(System.Void*,=FUNC:svn_error_t*(svn_txdelta_window_t**,System.Void*,apr_pool_t*),=FUNC:System.Byte!System.Runtime.CompilerServices.IsConst*(System.Void*),apr_pool_t*)">
Create and return a generic text delta stream with @a baton, @a
 * next_window and @a md5_digest.  Allocate the new stream in @a
 * pool.
 *
 * @since New in 1.4.

</member>
        <member name="D:svn_txdelta_md5_digest_fn_t">
A typedef for a function that will return the md5 checksum of the
 * fulltext deltified by a @c svn_txdelta_stream_t object.  Will
 * return NULL if the final null window hasn't yet been returned by
 * the stream.  The returned value will be allocated in the same pool
 * as the stream.  @a baton is the baton specified when the stream was
 * created.
 *
 * @since New in 1.4.

</member>
        <member name="D:svn_txdelta_next_window_fn_t">
A typedef for a function that will set @a *window to the next
 * window from a @c svn_txdelta_stream_t object.  If there are no more
 * delta windows, NULL will be used.  The returned window, if any,
 * will be allocated in @a pool.  @a baton is the baton specified
 * when the stream was created.
 *
 * @since New in 1.4.

</member>
        <member name="T:svn_txdelta_stream_t">
A delta stream --- this is the hat from which we pull a series of
 * svn_txdelta_window_t objects, which, taken in order, describe the
 * entire target string.  This type is defined within libsvn_delta, and
 * opaque outside that library.

</member>
        <member name="D:svn_txdelta_window_handler_t">
A typedef for functions that consume a series of delta windows, for
 * use in caller-pushes interfaces.  Such functions will typically
 * apply the delta windows to produce some file, or save the windows
 * somewhere.  At the end of the delta window stream, you must call
 * this function passing zero for the @a window argument.

</member>
        <member name="M:svn_txdelta_apply_instructions(svn_txdelta_window_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*)">
 Apply the instructions from @a window to a source view @a sbuf to
  produce a target view @a tbuf.

 @a sbuf is assumed to have @a window-&gt;sview_len bytes of data and
 @a tbuf is assumed to have room for @a tlen bytes of output.  @a
 tlen may be more than @a window-&gt;tview_len, so return the actual
 number of bytes written.  @a sbuf is not touched and may be NULL if
 @a window contains no source-copy operations. This is purely a
 memory operation; nothing can go wrong as long as we have a valid
 window.

 @since New in 1.4


</member>
        <member name="M:svn_txdelta_compose_windows(svn_txdelta_window_t!System.Runtime.CompilerServices.IsConst*,svn_txdelta_window_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Compose two delta windows, yielding a third, allocated in @a pool.

 @since New in 1.4


</member>
        <member name="M:svn_txdelta_window_dup(svn_txdelta_window_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a deep copy of @a window, allocated in @a pool.

 @since New in 1.3.

</member>
        <member name="F:svn_txdelta_window_t.new_data">
New data, for use by any `svn_txdelta_new' instructions.  
</member>
        <member name="F:svn_txdelta_window_t.ops">
The instructions for this window.  
</member>
        <member name="F:svn_txdelta_window_t.src_ops">
The number of svn_txdelta_source instructions in this window. If
   * this number is 0, we don't need to read the source in order to
   * reconstruct the target view.

</member>
        <member name="F:svn_txdelta_window_t.num_ops">
The number of instructions in this window.  
</member>
        <member name="F:svn_txdelta_window_t.tview_len">
The length of the target view for this window, i.e. the number of
   * bytes which will be reconstructed by the instruction stream.  
</member>
        <member name="F:svn_txdelta_window_t.sview_len">
The length of the source view for this window.  
</member>
        <member name="F:svn_txdelta_window_t.sview_offset">
The offset of the source view for this window.  
</member>
        <member name="T:svn_txdelta_window_t">
An @c svn_txdelta_window_t object describes how to reconstruct a
 * contiguous section of the target string (the "target view") using a
 * specified contiguous region of the source string (the "source
 * view").  It contains a series of instructions which assemble the
 * new target string text by pulling together substrings from:
 *
 *   - the source view,
 *
 *   - the previously constructed portion of the target view,
 *
 *   - a string of new data contained within the window structure
 *
 * The source view must always slide forward from one window to the
 * next; that is, neither the beginning nor the end of the source view
 * may move to the left as we read from a window stream.  This
 * property allows us to apply deltas to non-seekable source streams
 * without making a full copy of the source stream.

</member>
        <member name="F:svn_txdelta_op_t.length">
Number of bytes of delta, see #svn_delta_action for more details. 
</member>
        <member name="F:svn_txdelta_op_t.offset">
Offset of delta, see #svn_delta_action for more details. 
</member>
        <member name="T:svn_txdelta_op_t">
A single text delta instruction.  
</member>
        <member name="T:svn_delta_action">
 @defgroup delta_support Delta generation and handling

 @{

Text deltas.
*
* A text delta represents the difference between two strings of
* bytes, the `source' string and the `target' string.  Given a source
* string and a target string, we can compute a text delta; given a
* source string and a delta, we can reconstruct the target string.
* However, note that deltas are not reversible: you cannot always
* reconstruct the source string given the target string and delta.
*
* Since text deltas can be very large, the interface here allows us
* to produce and consume them in pieces.  Each piece, represented by
* an @c svn_txdelta_window_t structure, describes how to produce the
* next section of the target string.
*
* To compute a new text delta:
*
* - We call svn_txdelta() on the streams we want to compare.  That
*   returns us an @c svn_txdelta_stream_t object.
*
* - We then call svn_txdelta_next_window() on the stream object
*   repeatedly.  Each call returns a new @c svn_txdelta_window_t
*   object, which describes the next portion of the target string.
*   When svn_txdelta_next_window() returns zero, we are done building
*   the target string.
*
* @defgroup svn_delta_txt_delta Text deltas
* @{

Action codes for text delta instructions. 

Action code of delta instruction 
</member>
        <member name="M:svn_delta_version">
 Get libsvn_delta version information.

 @since New in 1.1.

</member>
        <member name="M:svn_subr_version">
 Get libsvn_subr version information.

 @since New in 1.1.

</member>
        <member name="M:svn_ver_check_list(svn_version_t!System.Runtime.CompilerServices.IsConst*,svn_version_checklist_t!System.Runtime.CompilerServices.IsConst*)">
 Perform a series of version compatibility checks. Checks if @a
 my_version is compatible with each entry in @a checklist. @a
 checklist must end with an entry whose label is @c NULL.

 @see svn_ver_compatible()

 @since New in 1.1.

</member>
        <member name="F:svn_version_checklist_t.version_query">
Version query function for this entry 
</member>
        <member name="T:svn_version_checklist_t">
 An entry in the compatibility checklist.
 @see svn_ver_check_list()

 @since New in 1.1.

</member>
        <member name="M:svn_ver_equal(svn_version_t!System.Runtime.CompilerServices.IsConst*,svn_version_t!System.Runtime.CompilerServices.IsConst*)">
 Check if @a my_version and @a lib_version encode the same version number.

 @since New in 1.2.

</member>
        <member name="M:svn_ver_compatible(svn_version_t!System.Runtime.CompilerServices.IsConst*,svn_version_t!System.Runtime.CompilerServices.IsConst*)">
 Define a static svn_version_t object.

 @since New in 1.1.

 Generate the implementation of a version query function.

 @since New in 1.1.

 Check library version compatibility. Return #TRUE if the client's
 version, given in @a my_version, is compatible with the library
 version, provided in @a lib_version.

 This function checks for version compatibility as per our
 guarantees, but requires an exact match when linking to an
 unreleased library. A development client is always compatible with
 a previous released library.

 @since New in 1.1.

</member>
        <member name="F:svn_version_t.tag">
The version tag (#SVN_VER_NUMTAG).\ Must always point to a
statically allocated string.

</member>
        <member name="T:svn_version_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_version.h
 @brief Version information.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

Major version number.
 *
 * Modify when incompatible changes are made to published interfaces.

Minor version number.
 *
 * Modify when new functionality is added or new interfaces are
 * defined, but all changes are backward compatible.

 Patch number.

 Modify for every released patch.

 @since New in 1.1.

@deprecated Provided for backward compatibility with the 1.0 API. 
@deprecated Provided for backward compatibility with the 1.0 API. 
Version tag: a string describing the version.
 *
 * This tag remains " (dev build)" in the repository so that we can
 * always see from "svn --version" that the software has been built
 * from the repository rather than a "blessed" distribution.
 *
 * When rolling a tarball, we automatically replace this text with " (r1234)"
 * (where 1234 is the last revision on the branch prior to the release)
 * for final releases; in prereleases, it becomes " (Alpha 1)",
 * " (Beta 1)", etc., as appropriate.
 *
 * Always change this at the same time as SVN_VER_NUMTAG.

Number tag: a string describing the version.
 *
 * This tag is used to generate a version number string to identify
 * the client and server in HTTP requests, for example. It must not
 * contain any spaces. This value remains "-dev" in the repository.
 *
 * When rolling a tarball, we automatically replace this text with ""
 * for final releases; in prereleases, it becomes "-alpha1, "-beta1",
 * etc., as appropriate.
 *
 * Always change this at the same time as SVN_VER_TAG.

Revision number: The repository revision number of this release.
 *
 * This constant is used to generate the build number part of the Windows
 * file version. Its value remains 0 in the repository.
 *
 * When rolling a tarball, we automatically replace it with what we
 * guess to be the correct revision number.

Version number 
Version number with tag (contains no whitespace) 
Complete version string 
 Version information. Each library contains a function called
 svn_<i>libname</i>_version() that returns a pointer to a statically
 allocated object of this type.

 @since New in 1.1.

</member>
        <member name="M:svn_io_write_version_file(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Create (or overwrite) the file at @a path with new contents,
 * formatted as a non-negative integer @a version followed by a single
 * newline.  On successful completion the file will be read-only.  Use
 * @a pool for all allocations.

</member>
        <member name="M:svn_io_read_version_file(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Version/format files.
 *
 * @defgroup svn_io_format_files Version/format files
 * @{

Set @a *version to the integer that starts the file at @a path.  If the
 * file does not begin with a series of digits followed by a newline,
 * return the error @c SVN_ERR_BAD_VERSION_FILE_FORMAT.  Use @a pool for
 * all allocations.

</member>
        <member name="M:svn_io_dir_read(apr_finfo_t*,System.Int32,apr_dir_t*,apr_pool_t*)">
Wrapper for apr_dir_read().  Ensures that @a finfo-&gt;name is
 * utf8-encoded, which means allocating @a finfo-&gt;name in @a pool,
 * which may or may not be the same as @a finfo's pool.  Use @a pool
 * for error allocation as well.

</member>
        <member name="M:svn_io_dir_remove_nonrecursive(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Wrapper for apr_dir_remove().  @a dirname is utf8-encoded.
 * @note This function has this name to avoid confusion with
 * svn_io_remove_dir2(), which is recursive.

</member>
        <member name="M:svn_io_dir_open(apr_dir_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Wrapper for apr_dir_open().  @a dirname is utf8-encoded. 
</member>
        <member name="M:svn_io_dir_make_sgid(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
 Same as svn_io_dir_make(), but attempts to set the sgid on the
 directory on systems that support it.  Does not return an error if
 the attempt to set the sgid bit fails.  On Unix filesystems,
 setting the sgid bit on a directory ensures that files and
 subdirectories created within inherit group ownership from the
 parent instead of from the primary gid.

 @since New in 1.1.

</member>
        <member name="M:svn_io_dir_make_hidden(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Same as svn_io_dir_make(), but sets the hidden attribute on the
    directory on systems that support it. 
</member>
        <member name="M:svn_io_dir_make(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Wrapper for apr_dir_make().  @a path is utf8-encoded. 
</member>
        <member name="M:svn_io_file_move(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Move the file from @a from_path to @a to_path, even across device
 * boundaries. Overwrite @a to_path if it exists.
 *
 * @note This function is different from svn_io_file_rename in that the
 * latter fails in the 'across device boundaries' case.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_io_file_rename(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Wrapper for apr_file_rename().  @a from_path and @a to_path are
 * utf8-encoded.

</member>
        <member name="M:svn_io_stat(apr_finfo_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Wrapper for apr_stat().  @a fname is utf8-encoded. 
</member>
        <member name="M:svn_io_file_write_full(apr_file_t*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32*,apr_pool_t*)">
Wrapper for apr_file_write_full(). 
</member>
        <member name="M:svn_io_file_write(apr_file_t*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32*,apr_pool_t*)">
Wrapper for apr_file_write(). 
</member>
        <member name="M:svn_io_file_seek(apr_file_t*,System.Int32,System.Int64*,apr_pool_t*)">
Wrapper for apr_file_seek(). 
</member>
        <member name="M:svn_io_file_read_full(apr_file_t*,System.Void*,System.UInt32,System.UInt32*,apr_pool_t*)">
Wrapper for apr_file_read_full(). 
</member>
        <member name="M:svn_io_file_read(apr_file_t*,System.Void*,System.UInt32*,apr_pool_t*)">
Wrapper for apr_file_read(). 
</member>
        <member name="M:svn_io_file_info_get(apr_finfo_t*,System.Int32,apr_file_t*,apr_pool_t*)">
Wrapper for apr_file_info_get(). 
</member>
        <member name="M:svn_io_file_getc(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,apr_file_t*,apr_pool_t*)">
Wrapper for apr_file_getc(). 
</member>
        <member name="M:svn_io_file_close(apr_file_t*,apr_pool_t*)">
Wrapper for apr_file_close(). 
</member>
        <member name="M:svn_io_file_open(apr_file_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
Wrapper for apr_file_open().  @a fname is utf8-encoded. 
</member>
        <member name="M:svn_io_detect_mimetype(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Like svn_io_detect_mimetype2, but with @a mimetypes_map set to
 * @c NULL.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API

</member>
        <member name="M:svn_io_detect_mimetype2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_hash_t*,apr_pool_t*)">
Examine utf8-encoded @a file to determine if it can be described by a
 * known (as in, known by this function) Multipurpose Internet Mail
 * Extension (MIME) type.  If so, set @a *mimetype to a character string
 * describing the MIME type, else set it to @c NULL.
 *
 * If not @c NULL, @a mimetype_map is a hash mapping <tt>const char *</tt>
 * filename extensions to <tt>const char *</tt> MIME types, and is the
 * first source consulted regarding @a file's MIME type.
 *
 * Use @a pool for any necessary allocations.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_io_parse_mimetypes_file(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Parse utf8-encoded @a mimetypes_file as a MIME types file (such as
 * is provided with Apache HTTP Server), and set @a *type_map to a
 * hash mapping <tt>const char *</tt> filename extensions to
 * <tt>const char *</tt> MIME types.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_io_run_diff3(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ap">
Similar to svn_io_run_diff3_2(), but with @a user_args set to @c NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

</member>
        <member name="M:svn_io_run_diff3_2(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServ">
Invoke the configured @c diff3 program, in utf8-encoded @a dir
 * like this:
 *
 *          diff3 -E -m @a mine @a older @a yours &gt; @a merged
 *
 * (See the diff3 documentation for details.)
 *
 * If @a user_args is non-NULL, replace "-E" with the <tt>const char*</tt>
 * elements that @a user_args contains.
 *
 * @a mine, @a older and @a yours are utf8-encoded paths (relative to
 * @a dir or absolute) to three files that already exist.
 *
 * @a merged is an open file handle, and is left open after the merge
 * result is written to it. (@a merged should *not* be the same file
 * as @a mine, or nondeterministic things may happen!)
 *
 * @a mine_label, @a older_label, @a yours_label are utf8-encoded label
 * parameters for diff3's -L option.  Any of them may be @c NULL, in
 * which case the corresponding @a mine, @a older, or @a yours parameter is
 * used instead.
 *
 * Set @a *exitcode to diff3's exit status.  If @a *exitcode is anything
 * other than 0 or 1, then return @c SVN_ERR_EXTERNAL_PROGRAM.  (Note the
 * following from the diff3 info pages: "An exit status of 0 means
 * `diff3' was successful, 1 means some conflicts were found, and 2
 * means trouble.")
 *
 * @a diff3_cmd must be non-NULL.
 *
 * Do all allocation in @a pool.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_io_run_diff(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*,apr_file_t*,apr_file_t*,System.SByte!System">
Invoke @c the configured diff program, with @a user_args (an array
 * of utf8-encoded @a num_user_args arguments), if they are specified,
 * or "-u" if they are not.
 *
 * Diff runs in utf8-encoded @a dir, and its exit status is stored in
 * @a exitcode, if it is not @c NULL.
 *
 * If @a label1 and/or @a label2 are not NULL they will be passed to the diff
 * process as the arguments of "-L" options.  @a label1 and @a label2 are also
 * in utf8, and will be converted to native charset along with the other args.
 *
 * @a from is the first file passed to diff, and @a to is the second.  The
 * stdout of diff will be sent to @a outfile, and the stderr to @a errfile.
 *
 * @a diff_cmd must be non-NULL.
 *
 * Do all allocation in @a pool.

</member>
        <member name="M:svn_io_run_cmd(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32*,apr_exit_why_e*,System.Int32,apr_file_t*,apr_file_t*,apr_file_t*,apr_pool_t*)">
Run a command to completion, by first calling svn_io_start_cmd() and
 * then calling svn_io_wait_for_cmd().  The parameters correspond to
 * the same-named parameters of those two functions.

</member>
        <member name="M:svn_io_wait_for_cmd(apr_proc_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*,apr_exit_why_e*,apr_pool_t*)">
 Wait for the process @a *cmd_proc to complete and optionally retrieve
 its exit code.  @a cmd is used only in error messages.

 If @a exitcode is not NULL, @a *exitcode will contain the exit code
 of the process upon return, and if @a exitwhy is not NULL, @a
 *exitwhy will indicate why the process terminated.  If @a exitwhy is
 NULL, and the exit reason is not @c APR_PROC_CHECK_EXIT(), or if
 @a exitcode is NULL and the exit code is non-zero, then an
 @c SVN_ERR_EXTERNAL_PROGRAM error will be returned.

 @since New in 1.3.

</member>
        <member name="M:svn_io_start_cmd(apr_proc_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_file_t*,apr_file_t*,apr_file_t*,apr_pool_t*)">
 Start @a cmd with @a args, using utf8-encoded @a path as working
 directory.  Connect @a cmd's stdin, stdout, and stderr to @a infile,
 @a outfile, and @a errfile, except where they are NULL.  Return the
 process handle for the invoked program in @a *cmd_proc.

 @a args is a list of utf8-encoded <tt>const char *</tt> arguments,
 terminated by @c NULL.  @a args[0] is the name of the program, though it
 need not be the same as @a cmd.

 If @a inherit is TRUE, the invoked program inherits its environment from
 the caller and @a cmd, if not absolute, is searched for in PATH.
 Otherwise, the invoked program runs with an empty environment and @a cmd
 must be an absolute path.

 @note On some platforms, failure to execute @a cmd in the child process
 will result in error output being written to @a errfile, if non-NULL, and
 a non-zero exit status being returned to the parent process.

 @since New in 1.3.

</member>
        <member name="M:svn_io_dir_walk(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_finfo_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
This function will recursively walk over the files and directories
 * rooted at @a dirname, a utf8-encoded path. For each file or directory,
 * @a walk_func is invoked, passing in the @a walk_baton, the utf8-encoded
 * full path to the entry, an @c apr_finfo_t structure, and a temporary
 * pool for allocations.  For any directory, @a walk_func will be invoked
 * on the directory itself before being invoked on any subdirectories or
 * files within the directory.
 *
 * The set of information passed to @a walk_func is specified by @a wanted,
 * and the items specified by @c APR_FINFO_TYPE and @c APR_FINFO_NAME.
 *
 * All allocations will be performed in @a pool.

</member>
        <member name="D:svn_io_walk_func_t">
Callback function type for svn_io_dir_walk() 
</member>
        <member name="M:svn_io_get_dirents(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_io_get_dirents2(), but @a *dirents is a hash table
 * with @c svn_node_kind_t values.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.

</member>
        <member name="M:svn_io_get_dirents2(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Read all of the disk entries in directory @a path, a utf8-encoded
 * path.  Set @a *dirents to a hash mapping dirent names (<tt>char *</tt>) to
 * @c svn_io_dirent_t structures, allocated in @a pool.
 *
 * @note The `.' and `..' directories normally returned by
 * apr_dir_read() are NOT returned in the hash.
 *
 * @note The kind field in the @a dirents is set according to the mapping
 *       as documented for svn_io_check_path()
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_io_get_dir_filenames(apr_hash_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Read all of the disk entries in directory @a path, a utf8-encoded
 * path.  Set @a *dirents to a hash mapping dirent names (<tt>char *</tt>) to
 * undefined non-NULL values, allocated in @a pool.
 *
 * @note The `.' and `..' directories normally returned by
 * apr_dir_read() are NOT returned in the hash.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_io_remove_dir(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_io_remove_dir2(), but with @a ignore_enoent set to
 * @c FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API

</member>
        <member name="M:svn_io_remove_dir2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
Recursively remove directory @a path.  @a path is utf8-encoded.
 * If @a ignore_enoent is @c TRUE, don't fail if the target directory
 * doesn't exist.  Use @a pool for temporary allocations.
 *
 * Because recursive delete of a directory tree can be a lengthy operation,
 * provide @a cancel_func and @a cancel_baton for interuptability.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_io_remove_file(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Remove file @a path, a utf8-encoded path.  This wraps apr_file_remove(),
 * converting any error to a Subversion error.

</member>
        <member name="M:svn_stringbuf_from_aprfile(svn_stringbuf_t**,apr_file_t*,apr_pool_t*)">
Sets @a *result to a string containing the contents of the already opened
 * @a file.  Reads from the current position in file to the end.  Does not
 * close the file or reset the cursor position.

</member>
        <member name="M:svn_stringbuf_from_file(svn_stringbuf_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Similar to svn_stringbuf_from_file2(), except that if @a filename
 * is "-", return the error @c SVN_ERR_UNSUPPORTED_FEATURE and don't
 * touch @a *result.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.

</member>
        <member name="M:svn_stringbuf_from_file2(svn_stringbuf_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@} 
Set @a *result to a string containing the contents of @a
 * filename, which is either "-" (indicating that stdin should be
 * read) or the utf8-encoded path of a real file.
 *
 * @warning Callers should be aware of possible unexpected results
 * when using this function to read from stdin where additional
 * stdin-reading processes abound.  For example, if a program tries
 * both to invoke an external editor and to read from stdin, stdin
 * could be trashed and the editor might act funky or die outright.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_stream_contents_same(System.Int32*,svn_stream_t*,svn_stream_t*,apr_pool_t*)">
Set @a *same to TRUE if @a stream1 and @a stream2 have the same
 * contents, else set it to FALSE.  Use @a pool for temporary allocations.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_stream_copy(svn_stream_t*,svn_stream_t*,apr_pool_t*)">
 Same as svn_stream_copy2(), but without the cancellation function.

 @since New in 1.1.
 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="M:svn_stream_copy2(svn_stream_t*,svn_stream_t*,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
 Read the contents of the readable stream @a from and write them to the
 writable stream @a to calling @a cancel_func before copying each chunk.

 @a cancel_func may be @c NULL.

 @since New in 1.5.

</member>
        <member name="M:svn_stream_readline(svn_stream_t*,svn_stringbuf_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*,apr_pool_t*)">
Allocate @a *stringbuf in @a pool, and read into it one line (terminated
 * by @a eol) from @a stream. The line-terminator is read from the stream,
 * but is not added to the end of the stringbuf.  Instead, the stringbuf
 * ends with a usual '\\0'.
 *
 * If @a stream runs out of bytes before encountering a line-terminator,
 * then set @a *eof to @c TRUE, otherwise set @a *eof to FALSE.

</member>
        <member name="M:svn_stream_printf_from_utf8(svn_stream_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Write to @a stream using a printf-style @a fmt specifier, passed through
 * apr_psprintf() using memory from @a pool.  The resulting string
 * will be translated to @a encoding before it is sent to @a stream.
 *
 * @note Use @c APR_LOCALE_CHARSET to translate to the encoding of the
 * current locale.
 *
 * @since New in 1.3.

</member>
        <member name="M:svn_stream_printf(svn_stream_t*,apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Write to @a stream using a printf-style @a fmt specifier, passed through
 * apr_psprintf() using memory from @a pool.

</member>
        <member name="M:svn_stream_close(svn_stream_t*)">
Close a generic stream. @see svn_stream_t. 
</member>
        <member name="M:svn_stream_write(svn_stream_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*)">
Write to a generic stream. @see svn_stream_t. 
</member>
        <member name="M:svn_stream_read(svn_stream_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*)">
Read from a generic stream. @see svn_stream_t. 
</member>
        <member name="M:svn_stream_checksummed(svn_stream_t*,System.Byte!System.Runtime.CompilerServices.IsConst**,System.Byte!System.Runtime.CompilerServices.IsConst**,System.Int32,apr_pool_t*)">
Return a stream that calculates checksums for all data read
 * and written.  The stream @a stream is used to read and write all data.
 * The stream and the resulting digests are allocated in @a pool.
 *
 * When the stream is closed, @a read_digest and @a write_digest
 * are set to point to the resulting digests.
 *
 * Both @a read_digest and @a write_digest
 * can be @c NULL, in which case the respective checksum isn't calculated.
 *
 * If @a read_all is TRUE, make sure that all data available on @a
 * stream is read (and checksummed) when the stream is closed.
 *
 * Read and write operations can be mixed without interfering.
 *
 * The @a stream passed into this function is closed when the created
 * stream is closed.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_stream_compressed(svn_stream_t*,apr_pool_t*)">
Return a stream that decompresses all data read and compresses all
 * data written. The stream @a stream is used to read and write all
 * compressed data. All compression data structures are allocated on
 * @a pool. If compression support is not compiled in then
 * svn_stream_compressed() returns @a stream unmodified. Make sure you
 * call svn_stream_close() on the stream returned by this function,
 * so that all data are flushed and cleaned up.
 *
 * @note From 1.4, compression support is always compiled in.

</member>
        <member name="M:svn_stream_from_stringbuf(svn_stringbuf_t*,apr_pool_t*)">
Return a generic stream connected to stringbuf @a str.  Allocate the
 * stream in @a pool.

</member>
        <member name="M:svn_stream_for_stdout(svn_stream_t**,apr_pool_t*)">
Set @a *out to a generic stream connected to stdout, allocated in
 * @a pool.  The stream and its underlying APR handle will be closed
 * when @a pool is cleared or destroyed.

</member>
        <member name="M:svn_stream_from_aprfile(apr_file_t*,apr_pool_t*)">
Similar to svn_stream_from_aprfile2(), except that the file will
 * always be disowned.
 *
 * @note The stream returned is not considered to "own" the underlying
 *       file, meaning that svn_stream_close() on the stream will not
 *       close the file.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_stream_from_aprfile2(apr_file_t*,System.Int32,apr_pool_t*)">
Create a stream from an APR file.  For convenience, if @a file is
 * @c NULL, an empty stream created by svn_stream_empty() is returned.
 *
 * This function should normally be called with @a disown set to FALSE,
 * in which case closing the stream will also close the underlying file.
 *
 * If @a disown is TRUE, the stream will disown the underlying file,
 * meaning that svn_stream_close() will not close the file.
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_stream_disown(svn_stream_t*,apr_pool_t*)">
Return a stream allocated in @a pool which forwards all requests
 * to @a stream.  Destruction is explicitly excluded from forwarding.
 *
 * @see notes/destruction-of-stacked-resources
 *
 * @since New in 1.4.

</member>
        <member name="M:svn_stream_empty(apr_pool_t*)">
Create a stream that is empty for reading and infinite for writing. 
</member>
        <member name="M:svn_stream_set_close(svn_stream_t*,=FUNC:svn_error_t*(System.Void*))">
Set @a stream's close function to @a close_fn 
</member>
        <member name="M:svn_stream_set_write(svn_stream_t*,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*))">
Set @a stream's write function to @a write_fn 
</member>
        <member name="M:svn_stream_set_read(svn_stream_t*,=FUNC:svn_error_t*(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*))">
Set @a stream's read function to @a read_fn 
</member>
        <member name="M:svn_stream_set_baton(svn_stream_t*,System.Void*)">
Set @a stream's baton to @a baton 
</member>
        <member name="M:svn_stream_create(System.Void*,apr_pool_t*)">
Create a generic stream.  @see svn_stream_t. 
</member>
        <member name="D:svn_close_fn_t">
Close handler function for a generic stream.  @see svn_stream_t. 
</member>
        <member name="D:svn_write_fn_t">
Write handler function for a generic stream.  @see svn_stream_t. 
</member>
        <member name="D:svn_read_fn_t">
Read handler function for a generic stream.  @see svn_stream_t. 
</member>
        <member name="T:svn_stream_t">
Generic byte-streams
 *
 * @defgroup svn_io_byte_streams Generic byte streams
 * @{

An abstract stream of bytes--either incoming or outgoing or both.
 *
 * The creator of a stream sets functions to handle read and write.
 * Both of these handlers accept a baton whose value is determined at
 * stream creation time; this baton can point to a structure
 * containing data associated with the stream.  If a caller attempts
 * to invoke a handler which has not been set, it will generate a
 * runtime assertion failure.  The creator can also set a handler for
 * close requests so that it can flush buffered data or whatever;
 * if a close handler is not specified, a close request on the stream
 * will simply be ignored.  Note that svn_stream_close() does not
 * deallocate the memory used to allocate the stream structure; free
 * the pool you created the stream in to free that memory.
 *
 * The read and write handlers accept length arguments via pointer.
 * On entry to the handler, the pointed-to value should be the amount
 * of data which can be read or the amount of data to write.  When the
 * handler returns, the value is reset to the amount of data actually
 * read or written.  Handlers are obliged to complete a read or write
 * to the maximum extent possible; thus, a short read with no
 * associated error implies the end of the input stream, and a short
 * write should never occur without an associated error.

</member>
        <member name="M:svn_io_dir_file_copy(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Copy file @a file from location @a src_path to location @a dest_path.
 * Use @a pool for memory allocations.

</member>
        <member name="M:svn_io_file_flush_to_disk(apr_file_t*,apr_pool_t*)">
 Flush any unwritten data from @a file to disk.  Use @a pool for
  memory allocations.

 @since New in 1.1.

</member>
        <member name="M:svn_io_file_lock2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
 Lock file at @a lock_file. If @a exclusive is TRUE,
 obtain exclusive lock, otherwise obtain shared lock.

 If @a nonblocking is TRUE, do not wait for the lock if it
 is not available: throw an error instead.

 Lock will be automatically released when @a pool is cleared or destroyed.
 Use @a pool for memory allocations.

 @since New in 1.1.

</member>
        <member name="M:svn_io_file_lock(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
 Lock file at @a lock_file. If @a exclusive is TRUE,
 obtain exclusive lock, otherwise obtain shared lock.
 Lock will be automatically released when @a pool is cleared or destroyed.
 Use @a pool for memory allocations.

 @deprecated Provided for backward compatibility with the 1.0 API.

</member>
        <member name="M:svn_io_file_create(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create file at utf8-encoded @a file with contents @a contents.
 * @a file must not already exist.
 * Use @a pool for memory allocations.

</member>
        <member name="M:svn_io_files_contents_same_p(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *same to TRUE if @a file1 and @a file2 have the same
 * contents, else set it to FALSE.  Use @a pool for temporary allocations.

</member>
        <member name="M:svn_io_file_checksum(System.Byte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Put the md5 checksum of @a file into @a digest.
 * @a digest points to @c APR_MD5_DIGESTSIZE bytes of storage.
 * Use @a pool only for temporary allocations.

</member>
        <member name="M:svn_io_filesizes_different_p(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *different_p to non-zero if @a file1 and @a file2 have different
 * sizes, else set to zero.  Both @a file1 and @a file2 are utf8-encoded.
 *
 * Setting @a *different_p to zero does not mean the files definitely
 * have the same size, it merely means that the sizes are not
 * definitely different.  That is, if the size of one or both files
 * cannot be determined, then the sizes are not known to be different,
 * so @a *different_p is set to 0.

</member>
        <member name="M:svn_io_set_file_affected_time(System.Int64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set the timestamp of file @a path to @a apr_time.  @a path is
 *  utf8-encoded.
 *
 * @note This is the APR mtime which corresponds to the traditional mtime
 * on Unix, and the last write time on Windows.

</member>
        <member name="M:svn_io_file_affected_time(System.Int64*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *apr_time to the time of last modification of the contents of the
 * file @a path.  @a path is utf8-encoded.
 *
 * @note This is the APR mtime which corresponds to the traditional mtime
 * on Unix, and the last write time on Windows.

</member>
        <member name="M:svn_io_read_length_line(apr_file_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*,apr_pool_t*)">
Read a line from @a file into @a buf, but not exceeding @a *limit bytes.
 * Does not include newline, instead '\\0' is put there.
 * Length (as in strlen) is returned in @a *limit.
 * @a buf should be pre-allocated.
 * @a file should be already opened.
 *
 * When the file is out of lines, @c APR_EOF will be returned.

</member>
        <member name="M:svn_io_is_file_executable(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Determine whether a file is executable by the current user.
 * Set @a *executable to @c TRUE if the file @a path is executable by the
 * current user, otherwise set it to @c FALSE.
 *
 * On Windows and on platforms without userids, always returns @c FALSE.

</member>
        <member name="M:svn_io_set_file_executable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
Set @a path's "executability" (but do nothing if it is a symlink).
 *
 * @a path is the utf8-encoded path to the file.  If @a executable
 * is @c TRUE, then make the file executable.  If @c FALSE, make it
 * non-executable.  If @a ignore_enoent is @c TRUE, don't fail if the target
 * file doesn't exist.
 *
 * When making the file executable on operating systems with unix style
 * permissions, never add an execute permission where there is not
 * already a read permission: that is, only make the file executable
 * for the user, group or world if the corresponding read permission
 * is already set for user, group or world.
 *
 * When making the file non-executable on operating systems with unix style
 * permissions, remove all execute permissions.
 *
 * On other operating systems, toggle the file's "executability" as much as
 * the operating system allows.
 *
 * @note If @a path is a directory, act on it as though it were a
 * file, as described above, but note that you probably don't want to
 * call this function on directories.  We have left it effective on
 * directories for compatibility reasons, but as its name implies, it
 * should be used only for files.

</member>
        <member name="M:svn_io_set_file_read_write_carefully(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,apr_pool_t*)">
Similar to svn_io_set_file_read_* functions.
 * Change the read-write permissions of a file.
 * @since New in 1.1.
 *
 * When making @a path read-write on operating systems with unix style
 * permissions, set the permissions on @a path to the permissions that
 * are set when a new file is created (effectively honoring the user's
 * umask).
 *
 * When making the file read-only on operating systems with unix style
 * permissions, remove all write permissions.
 *
 * On other operating systems, toggle the file's "writability" as much as
 * the operating system allows.
 *
 * @a path is the utf8-encoded path to the file.  If @a enable_write
 * is @c TRUE, then make the file read-write.  If @c FALSE, make it
 * read-only.  If @a ignore_enoent is @c TRUE, don't fail if the target
 * file doesn't exist.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="M:svn_io_set_file_read_write(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Make a file as writable as the operating system allows.
 * @a path is the utf8-encoded path to the file.  If @a ignore_enoent is
 * @c TRUE, don't fail if the target file doesn't exist.
 * @warning On Unix this function will do the equivalent of chmod a+w path.
 * If this is not what you want you should not use this function, but rather
 * use apr_file_perms_set().
 *
 * If @a path is a symlink, do nothing.
 *
 * @note If @a path is a directory, act on it as though it were a
 * file, as described above, but note that you probably don't want to
 * call this function on directories.  We have left it effective on
 * directories for compatibility reasons, but as its name implies, it
 * should be used only for files.

</member>
        <member name="M:svn_io_set_file_read_only(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Make a file as read-only as the operating system allows.
 * @a path is the utf8-encoded path to the file. If @a ignore_enoent is
 * @c TRUE, don't fail if the target file doesn't exist.
 *
 * If @a path is a symlink, do nothing.
 *
 * @note If @a path is a directory, act on it as though it were a
 * file, as described above, but note that you probably don't want to
 * call this function on directories.  We have left it effective on
 * directories for compatibility reasons, but as its name implies, it
 * should be used only for files.

</member>
        <member name="M:svn_io_append_file(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Append @a src to @a dst.  @a dst will be appended to if it exists, else it
 * will be created.  Both @a src and @a dst are utf8-encoded.

</member>
        <member name="M:svn_io_dir_empty(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set @a *is_empty_p to @c TRUE if directory @a path is empty, else to
 * @c FALSE if it is not empty.  @a path must be a directory, and is
 * utf8-encoded.  Use @a pool for temporary allocation.

</member>
        <member name="M:svn_io_make_dir_recursively(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create directory @a path on the file system, creating intermediate
 * directories as required, like <tt>mkdir -p</tt>.  Report no error if @a
 * path already exists.  @a path is utf8-encoded.
 *
 * This is essentially a wrapper for apr_dir_make_recursive(), passing
 * @c APR_OS_DEFAULT as the permissions.

</member>
        <member name="M:svn_io_copy_dir_recursively(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,=FUNC:svn_error_t*(System.Void*),System.Void*,apr_pool_t*)">
Recursively copy directory @a src into @a dst_parent, as a new entry named
 * @a dst_basename.  If @a dst_basename already exists in @a dst_parent,
 * return error.  @a copy_perms will be passed through to svn_io_copy_file()
 * when any files are copied.  @a src, @a dst_parent, and @a dst_basename are
 * all utf8-encoded.
 *
 * If @a cancel_func is non-NULL, invoke it with @a cancel_baton at
 * various points during the operation.  If it returns any error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.

</member>
        <member name="M:svn_io_copy_link(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Copy symbolic link @a src to @a dst atomically.  Overwrite @a dst
 if it exists, else create it.  Both @a src and @a dst are
 utf8-encoded filenames.  After copying, the @a dst link will point
 to the same thing @a src does.

 @since New in 1.1.

</member>
        <member name="M:svn_io_copy_file(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Copy @a src to @a dst atomically, in a "byte-for-byte" manner.
 * Overwrite @a dst if it exists, else create it.  Both @a src and @a dst
 * are utf8-encoded filenames.  If @a copy_perms is TRUE, set @a dst's
 * permissions to match those of @a src.

</member>
        <member name="M:svn_io_temp_dir(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_pool_t*)">
Set @a *dir to a directory path (allocated in @a pool) deemed
 * usable for the creation of temporary files and subdirectories.

</member>
        <member name="M:svn_io_read_link(svn_string_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Set @a *dest to the path that the symlink at @a path references.
 Allocate the string from @a pool.

 @since New in 1.1.

</member>
        <member name="M:svn_io_create_unique_link(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Like svn_io_open_unique_file(), except that instead of creating a
 file, a symlink is generated that references the path @a dest.

 @since New in 1.1.

</member>
        <member name="M:svn_io_open_unique_file(apr_file_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Like svn_io_open_unique_file2, but can't delete on pool cleanup.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API
 *
 * @note In 1.4 the API was extended to require either @a f or
 *       @a unique_name_p (the other can be NULL).  Before that, both were
 *       required.
 *

</member>
        <member name="M:svn_io_check_resolved_path(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_node_kind_t*,apr_pool_t*)">
Like svn_io_check_path(), but resolve symlinks.  This returns the
    same varieties of @a kind as svn_io_check_path(). 
</member>
        <member name="M:svn_io_check_special_path(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_node_kind_t*,System.Int32*,apr_pool_t*)">
 Like svn_io_check_path(), but also set *is_special to @c TRUE if
 the path is not a normal file.

 @since New in 1.1.

</member>
        <member name="M:svn_io_check_path(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_node_kind_t*,apr_pool_t*)">
Determine the @a kind of @a path.
 *
 * If utf8-encoded @a path exists, set @a *kind to the appropriate kind,
 * else set it to @c svn_node_unknown.
 *
 * If @a path is a file, @a *kind is set to @c svn_node_file.
 *
 * If @a path is a directory, @a *kind is set to @c svn_node_dir.
 *
 * If @a path does not exist in its final component, @a *kind is set to
 * @c svn_node_none.
 *
 * If intermediate directories on the way to @a path don't exist, an
 * error is returned, and @a *kind's value is undefined.
 *
 * Use @a pool for temporary allocations.

</member>
        <member name="F:svn_io_dirent_t.special">
If @c kind is @c svn_node_file, whether this entry is a special file;
   * else FALSE.
   *
   * @see svn_io_check_special_path().

</member>
        <member name="F:svn_io_dirent_t.kind">
The kind of this entry. 
</member>
        <member name="T:svn_io_dirent_t">
Represents the kind and special status of a directory entry.
 *
 * @since New in 1.3.

</member>
        <member name="F:svn_io_file_del_on_pool_cleanup">
Remove when the associated pool is cleared 
</member>
        <member name="F:svn_io_file_del_on_close">
Remove when the file is closed 
</member>
        <member name="F:svn_io_file_del_none">
No deletion ever 
</member>
        <member name="M:svn_handle_warning(_iobuf*,svn_error_t*)">
Like svn_handle_warning2() but with @c prefix set to "svn: "

</member>
        <member name="M:svn_handle_warning2(_iobuf*,svn_error_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Very basic default warning handler: print out the error @a error to the
 stdio stream @a stream, prefixed by @a prefix.  Allocations are
 performed in the error's pool.

 @since New in 1.2.

</member>
        <member name="M:svn_handle_error(svn_error_t*,_iobuf*,System.Int32)">
Like svn_handle_error2() but with @c prefix set to "svn: "
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.

</member>
        <member name="M:svn_handle_error2(svn_error_t*,_iobuf*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Very basic default error handler: print out error stack @a error to the
 stdio stream @a stream, with each error prefixed by @a prefix, and quit
 iff the @a fatal flag is set.  Allocations are performed in the @a error's
 pool.

 If you're not sure what prefix to pass, just pass "svn: ".  That's
 what code that used to call svn_handle_error() and now calls
 svn_handle_error2() does.

 @since New in 1.2.

</member>
        <member name="M:svn_error_clear(svn_error_t*)">
Free the memory used by @a error, as well as all ancestors and
 * descendants of @a error.
 *
 * Unlike other Subversion objects, errors are managed explicitly; you
 * MUST clear an error if you are ignoring it, or you are leaking memory.
 * For convenience, @a error may be @c NULL, in which case this function does
 * nothing; thus, svn_error_clear(svn_foo(...)) works as an idiom to
 * ignore errors.

</member>
        <member name="M:svn_error_dup(svn_error_t*)">
Create a new error that is a deep copy of @a err and return it.
 *
 * @since New in 1.2.

</member>
        <member name="M:svn_error_root_cause(svn_error_t*)">
Return the root cause of @a err by finding the last error in its
 * chain (e.g. it or its children).  @a err may be @c SVN_NO_ERROR, in
 * which case @c SVN_NO_ERROR is returned.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_error_compose(svn_error_t*,svn_error_t*)">
Wrapper macro to collect file and line information 
Add @a new_err to the end of @a chain's chain of errors.  The @a new_err
 * chain will be copied into @a chain's pool and destroyed, so @a new_err
 * itself becomes invalid after this function.

</member>
        <member name="M:svn_error_quick_wrap(svn_error_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Wrapper macro to collect file and line information 
A quick n' easy way to create a wrapped exception with your own
 * message, before throwing it up the stack.  (It uses all of the
 * @a child's fields.)

</member>
        <member name="M:svn_error_wrap_apr(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Wrapper macro to collect file and line information 
Wrap a @a status from an APR function.  If @a fmt is NULL, this is
 * equivalent to svn_error_create(status,NULL,NULL).  Otherwise,
 * the error message is constructed by formatting @a fmt and the
 * following arguments according to apr_psprintf(), and then
 * appending ": " and the error message corresponding to @a status.
 * (If UTF-8 translation of the APR error message fails, the ": " and
 * APR error are not appended to the error message.)

</member>
        <member name="M:svn_error_createf(System.Int32,svn_error_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Wrapper macro to collect file and line information 
Create an error structure with the given @a apr_err and @a child,
 * with a printf-style error message produced by passing @a fmt, using
 * apr_psprintf().

</member>
        <member name="M:svn_error_create(System.Int32,svn_error_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
SVN error creation and destruction.
 *
 * @defgroup svn_error_error_creation_destroy Error creation and destruction
 * @{

Create a nested exception structure.
 *
 * Input:  an APR or SVN custom error code,
 *         a "child" error to wrap,
 *         a specific message
 *
 * Returns:  a new error structure (containing the old one).
 *
 * @note Errors are always allocated in a subpool of the global pool,
 *        since an error's lifetime is generally not related to the
 *        lifetime of any convenient pool.  Errors must be freed
 *        with svn_error_clear().  The specific message should be @c NULL
 *        if there is nothing to add to the general message associated
 *        with the error code.
 *
 *        If creating the "bottommost" error in a chain, pass @c NULL for
 *        the child argument.

</member>
        <member name="M:svn_err_best_message(svn_error_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32)">
If @a err has a custom error message, return that, otherwise
 * store the generic error string associated with @a err-&gt;apr_err into
 * @a buf (terminating with NULL) and return @a buf.
 *
 * @since New in 1.4.
 *
 * @note @a buf and @a bufsize are provided in the interface so that
 * this function is thread-safe and yet does no allocation.

</member>
        <member name="M:svn_strerror(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32)">
Put an English description of @a statcode into @a buf and return @a buf,
 * NULL-terminated. @a statcode is either an svn error or apr error.

</member>
        <member name="M:svn_error__locate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
Set the error location for debug mode. 
</member>
        <member name="T:svn_errno_t">
Collection of Subversion error code values, located within the
 * APR user error space. 
</member>
        <member name="M:svn_prop_name_is_valid(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return @c TRUE iff @a prop_name is a valid property name.

 For now, "valid" means the ASCII subset of an XML "Name".
 XML "Name" is defined at http://www.w3.org/TR/REC-xml#sec-common-syn

 @since New in 1.5.

</member>
        <member name="M:svn_prop_diffs(apr_array_header_t**,apr_hash_t*,apr_hash_t*,apr_pool_t*)">
Given two property hashes (<tt>const char *name</tt> -&gt; <tt>const
 * svn_string_t *value</tt>), deduce the differences between them (from
 * @a source_props -&gt; @c target_props).  Return these changes as a series of
 * @c svn_prop_t structures stored in @a propdiffs, allocated from @a pool.
 *
 * For note, here's a quick little table describing the logic of this
 * routine:
 *
 * @verbatim
   basehash        localhash         event
   --------        ---------         -----
   value = foo     value = NULL      Deletion occurred.
   value = foo     value = bar       Set occurred (modification)
   value = NULL    value = baz       Set occurred (creation) @endverbatim

</member>
        <member name="M:svn_categorize_props(apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_array_header_t**,apr_array_header_t**,apr_array_header_t**,apr_pool_t*)">
Given a @a proplist array of @c svn_prop_t structures, allocate
 * three new arrays in @a pool.  Categorize each property and then
 * create new @c svn_prop_t structures in the proper lists.  Each new
 * @c svn_prop_t structure's fields will point to the same data within
 * @a proplist's structures.
 *
 * Callers may pass NULL for each of the property lists in which they
 * are uninterested.  If no props exist in a certain category, and the
 * property list argument for that category is non-NULL, then that
 * array will come back with <tt>-&gt;nelts == 0</tt>.
 *
 * ### Hmmm, maybe a better future interface is to return an array of
 *     arrays, where the index into the array represents the index
 *     into @c svn_prop_kind_t.  That way we can add more prop kinds
 *     in the future without changing this interface...

</member>
        <member name="M:svn_prop_needs_translation(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
If @a prop_name requires that its value be stored as UTF8/LF in the
 * repository, then return @c TRUE.  Else return @c FALSE.  This is for
 * users of libsvn_client or libsvn_fs, since it their responsibility
 * to do this translation in both directions.  (See
 * svn_subst_translate_string()/svn_subst_detranslate_string() for
 * help with this task.)

</member>
        <member name="M:svn_prop_is_boolean(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return @c TRUE iff @a prop_name is a Subversion property whose
 * value is interpreted as a boolean.
 *
 * @since New in 1.5

</member>
        <member name="M:svn_prop_has_svn_prop(apr_hash_t*,apr_pool_t*)">
Return @c TRUE iff @a props has at least one property whose name
 * represents the name of a Subversion property.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_prop_is_svn_prop(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return @c TRUE iff @a prop_name represents the name of a Subversion
 * property.

</member>
        <member name="M:svn_property_kind(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return the prop kind of a property named @a prop_name, and
 * (if @a prefix_len is non-@c NULL) set @a *prefix_len to the length of
 * the prefix of @a prop_name that was sufficient to distinguish its kind.

</member>
        <member name="T:svn_prop_kind">
Subversion distinguishes among several kinds of properties,
particularly on the client-side.  There is no "unknown" kind; if
there's nothing special about a property name, the default category
is @c svn_prop_regular_kind.

</member>
        <member name="F:svn_prop_regular_kind">
Seen if user does "svn proplist"; note that this includes some "svn:"
   * props and all user props, i.e. ones stored in the repository fs.

</member>
        <member name="F:svn_prop_wc_kind">
Client-side only, stored by specific RA layer. 
</member>
        <member name="F:svn_prop_entry_kind">
In .svn/entries, i.e., author, date, etc. 
</member>
        <member name="M:svn_prop_hash_to_array(apr_hash_t*,apr_pool_t*)">
 Given a hash (keys <tt>const char *</tt> and values <tt>const
 svn_string_t</tt>) of properties, returns an array of svn_prop_t
 items using @a pool.

 @since New in 1.5.

</member>
        <member name="M:svn_prop_array_dup(apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Duplicate an @a array of svn_prop_t items using @a pool.

 @since New in 1.3.

</member>
        <member name="M:svn_prop_dup(svn_prop_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a duplicate of @a prop, allocated in @a pool. No part of the new
 structure will be shared with @a prop.

 @since New in 1.3.

</member>
        <member name="T:svn_prop_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_delta.h
 @brief Delta-parsing

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

 @copyright
 ====================================================================
 Copyright (c) 2000-2006 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_string.h
 @brief Counted-length strings for Subversion, plus some C string goodies.

 There are two string datatypes: @c svn_string_t and @c svn_stringbuf_t.
 The former is a simple pointer/length pair useful for passing around
 strings (or arbitrary bytes) with a counted length. @c svn_stringbuf_t is
 buffered to enable efficient appending of strings without an allocation
 and copy for each append operation.

 @c svn_string_t contains a <tt>const char *</tt> for its data, so it is
 most appropriate for constant data and for functions which expect constant,
 counted data. Functions should generally use <tt>const @c svn_string_t
 *</tt> as their parameter to indicate they are expecting a constant,
 counted string.

 @c svn_stringbuf_t uses a plain <tt>char *</tt> for its data, so it is
 most appropriate for modifiable data.

 <h3>Invariants</h3>

   1. Null termination:

      Both structures maintain a significant invariant:

         <tt>s-&gt;data[s-&gt;len] == '\\0'</tt>

      The functions defined within this header file will maintain
      the invariant (which does imply that memory is
      allocated/defined as @c len+1 bytes).  If code outside of the
      @c svn_string.h functions manually builds these structures,
      then they must enforce this invariant.

      Note that an @c svn_string(buf)_t may contain binary data,
      which means that strlen(s-&gt;data) does not have to equal @c
      s-&gt;len. The NULL terminator is provided to make it easier to
      pass @c s-&gt;data to C string interfaces.


   2. Non-NULL input:

      All the functions assume their input data is non-NULL,
      unless otherwise documented, and may seg fault if passed
      NULL.  The input data may *contain* null bytes, of course, just
      the data pointer itself must not be NULL.

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error.h
 @brief Common exception handling for Subversion.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

the best kind of (@c svn_error_t *) ! 
 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error_codes.h
 @brief Subversion error codes.

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_props.h
 @brief Subversion properties

 @copyright
 ====================================================================
 Copyright (c) 2000-2006 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_string.h
 @brief Counted-length strings for Subversion, plus some C string goodies.

 There are two string datatypes: @c svn_string_t and @c svn_stringbuf_t.
 The former is a simple pointer/length pair useful for passing around
 strings (or arbitrary bytes) with a counted length. @c svn_stringbuf_t is
 buffered to enable efficient appending of strings without an allocation
 and copy for each append operation.

 @c svn_string_t contains a <tt>const char *</tt> for its data, so it is
 most appropriate for constant data and for functions which expect constant,
 counted data. Functions should generally use <tt>const @c svn_string_t
 *</tt> as their parameter to indicate they are expecting a constant,
 counted string.

 @c svn_stringbuf_t uses a plain <tt>char *</tt> for its data, so it is
 most appropriate for modifiable data.

 <h3>Invariants</h3>

   1. Null termination:

      Both structures maintain a significant invariant:

         <tt>s-&gt;data[s-&gt;len] == '\\0'</tt>

      The functions defined within this header file will maintain
      the invariant (which does imply that memory is
      allocated/defined as @c len+1 bytes).  If code outside of the
      @c svn_string.h functions manually builds these structures,
      then they must enforce this invariant.

      Note that an @c svn_string(buf)_t may contain binary data,
      which means that strlen(s-&gt;data) does not have to equal @c
      s-&gt;len. The NULL terminator is provided to make it easier to
      pass @c s-&gt;data to C string interfaces.


   2. Non-NULL input:

      All the functions assume their input data is non-NULL,
      unless otherwise documented, and may seg fault if passed
      NULL.  The input data may *contain* null bytes, of course, just
      the data pointer itself must not be NULL.

@defgroup svn_props_support Properties management utilities
@{

A general in-memory representation of a single property.  Most of
 * the time, property lists will be stored completely in hashes.  But
 * sometimes it's useful to have an "ordered" collection of
 * properties, in which case we use an array of these structures.
 *
 * Also: sometimes we want a list that represents a set of property
 * *changes*, and in this case, an @c apr_hash_t won't work -- there's no
 * way to represent a property deletion, because we can't store a @c NULL
 * value in a hash.  So instead, we use these structures.

</member>
        <member name="M:svn_cstring_casecmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Compare two strings @a atr1 and @a atr2, treating case-equivalent
 unaccented Latin (ASCII subset) letters as equal.

 @since New in 1.5.

</member>
        <member name="M:svn_cstring_join(apr_array_header_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a cstring which is the concatenation of @a strings (an array
 of char *) each followed by @a separator (that is, @a separator
 will also end the resulting string).  Allocate the result in @a pool.
 If @a strings is empty, then return the empty string.

 @since New in 1.2.

</member>
        <member name="M:svn_cstring_count_newlines(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return the number of line breaks in @a msg, allowing any kind of newline
 termination (CR, LF, CRLF, or LFCR), even inconsistent.

 @since New in 1.2.

</member>
        <member name="M:svn_cstring_match_glob_list(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_array_header_t*)">
Return @c TRUE iff @a str matches any of the elements of @a list, a list
 * of zero or more glob patterns.

</member>
        <member name="M:svn_cstring_split_append(apr_array_header_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Like svn_cstring_split(), but append to existing @a array instead of
 * creating a new one.  Allocate the copied substrings in @a pool
 * (i.e., caller decides whether or not to pass @a array-&gt;pool as @a pool).

</member>
        <member name="M:svn_cstring_split(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
@} 
C strings.
 *
 * @defgroup svn_string_cstrings c string functions
 * @{

Divide @a input into substrings along @a sep_chars boundaries, return an
 * array of copies of those substrings, allocating both the array and
 * the copies in @a pool.
 *
 * None of the elements added to the array contain any of the
 * characters in @a sep_chars, and none of the new elements are empty
 * (thus, it is possible that the returned array will have length
 * zero).
 *
 * If @a chop_whitespace is TRUE, then remove leading and trailing
 * whitespace from the returned strings.

</member>
        <member name="M:svn_string_compare_stringbuf(svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*)">
Return @c TRUE iff @a str1 and @a str2 have identical length and data. 
</member>
        <member name="M:svn_stringbuf_find_char_backward(svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
Return position of last occurrence of @a ch in @a str, or return
 * @a str-&gt;len if no occurrence.

</member>
        <member name="M:svn_stringbuf_strip_whitespace(svn_stringbuf_t*)">
Strip whitespace from both sides of @a str (modified in place). 
</member>
        <member name="M:svn_stringbuf_first_non_whitespace(svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*)">
Return offset of first non-whitespace character in @a str, or return
 * @a str-&gt;len if none.

</member>
        <member name="M:svn_stringbuf_compare(svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*)">
Return @c TRUE iff @a str1 and @a str2 have identical length and data. 
</member>
        <member name="M:svn_stringbuf_dup(svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return a duplicate of @a original_string. 
</member>
        <member name="M:svn_stringbuf_appendcstr(svn_stringbuf_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Append a C string onto @a targetstr.
 *
 * reallocs if necessary. @a targetstr is affected, nothing else is.

</member>
        <member name="M:svn_stringbuf_appendstr(svn_stringbuf_t*,svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*)">
Append an @c svn_stringbuf_t onto @a targetstr.
 *
 * reallocs if necessary. @a targetstr is affected, nothing else is.

</member>
        <member name="M:svn_stringbuf_appendbytes(svn_stringbuf_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Append an array of bytes onto @a targetstr.
 *
 * reallocs if necessary. @a targetstr is affected, nothing else is.

</member>
        <member name="M:svn_stringbuf_fillchar(svn_stringbuf_t*,System.Byte)">
Fill bytestring @a str with character @a c. 
</member>
        <member name="M:svn_stringbuf_chop(svn_stringbuf_t*,System.UInt32)">
Chop @a nbytes bytes off end of @a str, but not more than @a str-&gt;len. 
</member>
        <member name="M:svn_stringbuf_isempty(svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*)">
Return @c TRUE if a bytestring is empty (has length zero). 
</member>
        <member name="M:svn_stringbuf_setempty(svn_stringbuf_t*)">
Set a bytestring @a str to empty (0 length). 
</member>
        <member name="M:svn_stringbuf_set(svn_stringbuf_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set a bytestring @a str to @a value 
</member>
        <member name="M:svn_stringbuf_ensure(svn_stringbuf_t*,System.UInt32)">
Make sure that the string @a str has at least @a minimum_size bytes of
 * space available in the memory block.
 *
 * (@a minimum_size should include space for the terminating NULL character.)

</member>
        <member name="M:svn_stringbuf_createv(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Create a new bytestring by formatting @a cstring (NULL-terminated)
 * from a @c va_list (see svn_stringbuf_createf()).

</member>
        <member name="M:svn_stringbuf_createf(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Create a new bytestring by formatting @a cstring (NULL-terminated)
 * from varargs, which are as appropriate for apr_psprintf().

</member>
        <member name="M:svn_stringbuf_create_from_string(svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create a new stringbuf with the contents of the given string 
</member>
        <member name="M:svn_stringbuf_ncreate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,apr_pool_t*)">
Create a new bytestring containing a generic string of bytes
 * (NON-NULL-terminated)

</member>
        <member name="M:svn_stringbuf_create(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@} 
svn_stringbuf_t functions.
 *
 * @defgroup svn_string_svn_stringbuf_t svn_stringbuf_t functions
 * @{

Create a new bytestring containing a C string (NULL-terminated). 
</member>
        <member name="M:svn_string_find_char_backward(svn_string_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
Return position of last occurrence of @a ch in @a str, or return
 * @a str-&gt;len if no occurrence.

</member>
        <member name="M:svn_string_first_non_whitespace(svn_string_t!System.Runtime.CompilerServices.IsConst*)">
Return offset of first non-whitespace character in @a str, or return
 * @a str-&gt;len if none.

</member>
        <member name="M:svn_string_compare(svn_string_t!System.Runtime.CompilerServices.IsConst*,svn_string_t!System.Runtime.CompilerServices.IsConst*)">
Return @c TRUE iff @a str1 and @a str2 have identical length and data. 
</member>
        <member name="M:svn_string_dup(svn_string_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return a duplicate of @a original_string. 
</member>
        <member name="M:svn_string_isempty(svn_string_t!System.Runtime.CompilerServices.IsConst*)">
Return TRUE if a bytestring is empty (has length zero). 
</member>
        <member name="M:svn_string_createv(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Create a new bytestring by formatting @a cstring (NULL-terminated)
 * from a @c va_list (see svn_stringbuf_createf()).

</member>
        <member name="M:svn_string_createf(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Create a new bytestring by formatting @a cstring (NULL-terminated)
 * from varargs, which are as appropriate for apr_psprintf().

</member>
        <member name="M:svn_string_create_from_buf(svn_stringbuf_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Create a new string with the contents of the given stringbuf 
</member>
        <member name="M:svn_string_ncreate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,apr_pool_t*)">
Create a new bytestring containing a generic string of bytes
 * (NOT NULL-terminated) 
</member>
        <member name="M:svn_string_create(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
svn_string_t functions.
 *
 * @defgroup svn_string_svn_string_t svn_string_t functions
 * @{

Create a new bytestring containing a C string (NULL-terminated). 
</member>
        <member name="F:svn_stringbuf_t.blocksize">
total size of buffer allocated 
</member>
        <member name="F:svn_stringbuf_t.len">
length of bytestring 
</member>
        <member name="F:svn_stringbuf_t.data">
pointer to the bytestring 
</member>
        <member name="F:svn_stringbuf_t.pool">
a pool from which this string was originally allocated, and is not
   * necessarily specific to this string.  This is used only for allocating
   * more memory from when the string needs to grow.

</member>
        <member name="T:svn_stringbuf_t">
A buffered string, capable of appending without an allocation and copy
 * for each append. 
</member>
        <member name="T:svn_string_t">
 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_wc.h
 @brief Subversion's working copy library

 Requires:
            - A working copy

 Provides:
            - Ability to manipulate working copy's versioned data.
            - Ability to manipulate working copy's administrative files.

 Used By:
            - Clients.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

 @copyright
 ====================================================================
 Copyright (c) 2000-2006 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_string.h
 @brief Counted-length strings for Subversion, plus some C string goodies.

 There are two string datatypes: @c svn_string_t and @c svn_stringbuf_t.
 The former is a simple pointer/length pair useful for passing around
 strings (or arbitrary bytes) with a counted length. @c svn_stringbuf_t is
 buffered to enable efficient appending of strings without an allocation
 and copy for each append operation.

 @c svn_string_t contains a <tt>const char *</tt> for its data, so it is
 most appropriate for constant data and for functions which expect constant,
 counted data. Functions should generally use <tt>const @c svn_string_t
 *</tt> as their parameter to indicate they are expecting a constant,
 counted string.

 @c svn_stringbuf_t uses a plain <tt>char *</tt> for its data, so it is
 most appropriate for modifiable data.

 <h3>Invariants</h3>

   1. Null termination:

      Both structures maintain a significant invariant:

         <tt>s-&gt;data[s-&gt;len] == '\\0'</tt>

      The functions defined within this header file will maintain
      the invariant (which does imply that memory is
      allocated/defined as @c len+1 bytes).  If code outside of the
      @c svn_string.h functions manually builds these structures,
      then they must enforce this invariant.

      Note that an @c svn_string(buf)_t may contain binary data,
      which means that strlen(s-&gt;data) does not have to equal @c
      s-&gt;len. The NULL terminator is provided to make it easier to
      pass @c s-&gt;data to C string interfaces.


   2. Non-NULL input:

      All the functions assume their input data is non-NULL,
      unless otherwise documented, and may seg fault if passed
      NULL.  The input data may *contain* null bytes, of course, just
      the data pointer itself must not be NULL.

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

@defgroup svn_string String handling
@{

A simple counted string. 
</member>
        <member name="M:svn_location_segment_dup(svn_location_segment_t*,apr_pool_t*)">
 Return a deep copy of @a segment, allocated in @a pool.

 @since New in 1.5.

</member>
        <member name="D:svn_location_segment_receiver_t">
A callback invoked by generators of @c svn_location_segment_t
objects, used to report information about a versioned object's
history in terms of its location in the repository filesystem over
time.

</member>
        <member name="T:svn_location_segment_t">
@defgroup node_location_seg_reporting Node location segment reporting.
 *  @{ 
 A representation of a segment of a object's version history with an
 emphasis on the object's location in the repository as of various
 revisions.

 @since New in 1.5.

</member>
        <member name="M:svn_merge_range_contains_rev(svn_merge_range_t*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Returns true if the changeset committed in revision @a rev is one
 of the changesets in the range @a range.

 @since New in 1.5.

</member>
        <member name="M:svn_merge_range_dup(svn_merge_range_t*,apr_pool_t*)">
 Return a copy of @a range, allocated in @a pool.

 @since New in 1.5.

</member>
        <member name="T:svn_merge_range_t">
 Mergeinfo representing a merge of a range of revisions.

 @since New in 1.5

</member>
        <member name="M:svn_uuid_generate(apr_pool_t*)">
 Return a formatted Universal Unique IDentifier (UUID) string.

 @since New in 1.4.

</member>
        <member name="M:svn_lock_dup(svn_lock_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a deep copy of @a lock, allocated in @a pool.

 @since New in 1.2.

</member>
        <member name="M:svn_lock_create(apr_pool_t*)">
 Returns an @c svn_lock_t, allocated in @a pool with all fields initialized
 to NULL values.

 @note To allow for extending the @c svn_lock_t structure in the future
 releases, this function should always be used to allocate the structure.

 @since New in 1.2.

</member>
        <member name="D:svn_cancel_func_t">
A user defined callback that subversion will call with a user defined
 * baton to see if the current operation should be continued.  If the operation
 * should continue, the function should return @c SVN_NO_ERROR, if not, it
 * should return @c SVN_ERR_CANCELLED.

</member>
        <member name="M:svn_mime_type_is_binary(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return FALSE iff @a mime_type is a textual type.
 *
 * All mime types that start with "text/" are textual, plus some special
 * cases (for example, "image/x-xbitmap").

</member>
        <member name="M:svn_mime_type_validate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
A buffer size that may be used when processing a stream of data.
 *
 * @note We don't use this constant any longer, since it is considered to be
 * unnecessarily large.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.

The maximum amount we can ever hold in memory. 
Validate @a mime_type.
 *
 * If @a mime_type does not contain a "/", or ends with non-alphanumeric
 * data, return @c SVN_ERR_BAD_MIME_TYPE, else return success.
 *
 * Use @a pool only to find error allocation.
 *
 * Goal: to match both "foo/bar" and "foo/bar; charset=blah", without
 * being too strict about it, but to disallow mime types that have
 * quotes, newlines, or other garbage on the end, such as might be
 * unsafe in an HTTP header.

</member>
        <member name="D:svn_commit_callback_t">
Same as @c svn_commit_callback2_t, but uses individual
 * data elements instead of the @c svn_commit_info_t structure
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.

</member>
        <member name="D:svn_commit_callback2_t">
Callback function type for commits.
 *
 * When a commit succeeds, an instance of this is invoked with the
 * @a commit_info, along with the @a baton closure.
 * @a pool can be used for temporary allocations.
 *
 * @since New in 1.4.

</member>
        <member name="D:svn_log_message_receiver_t">
 Similar to @c svn_log_entry_receiver_t, except this uses separate
 parameters for each part of the log entry.

 @deprecated Provided for backward compatibility with the 1.4 API.

</member>
        <member name="D:svn_log_entry_receiver_t">
The callback invoked by log message loopers, such as
 * @c svn_ra_plugin_t.get_log() and svn_repos_get_logs().
 *
 * This function is invoked once on each log message, in the order
 * determined by the caller (see above-mentioned functions).
 *
 * @a baton is what you think it is, and @a log_entry contains relevent
 * information for the log message.  Any of @a log_entry-&gt;author,
 * @a log_entry-&gt;date, or @a log_entry-&gt;message may be @c NULL.
 *
 * If @a log_entry-&gt;date is neither NULL nor the empty string, it was
 * generated by svn_time_to_cstring() and can be converted to
 * @c apr_time_t with svn_time_from_cstring().
 *
 * If @a log_entry-&gt;changed_paths is non-@c NULL, then it contains as keys
 * every path committed in @a log_entry-&gt;revision; the values are
 * (@c svn_log_changed_path_t *) structures.
 *
 * If @a log_entry-&gt;has_children is @c TRUE, the message will be followed
 * immediately by any number of merged revisions (child messages), which are
 * terminated by an invocation with SVN_INVALID_REVNUM.  This usage may
 * be recursive.
 *
 * Use @a pool for temporary allocation.  If the caller is iterating
 * over log messages, invoking this receiver on each, we recommend the
 * standard pool loop recipe: create a subpool, pass it as @a pool to
 * each call, clear it after each iteration, destroy it after the loop
 * is done.  (For allocation that must last beyond the lifetime of a
 * given receiver call, use a pool in @a baton.)
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_log_entry_create(apr_pool_t*)">
 Returns an @c svn_log_entry_t, allocated in @a pool with all fields
 initialized to NULL values.

 @note To allow for extending the @c svn_log_entry_t structure in future
 releases, this function should always be used to allocate the structure.

 @since New in 1.5.

</member>
        <member name="F:svn_log_entry_t.has_children">
 Whether or not this message has children.

 When a log operation requests additional merge information, extra log
 entries may be returned as a result of this entry.  The new entries, are
 considered children of the original entry, and will follow it.  When
 the HAS_CHILDREN flag is set, the receiver should increment its stack
 depth, and wait until an entry is provided with SVN_INVALID_REVNUM which
 indicates the end of the children.

 For log operations which do not request additional merge information, the
 HAS_CHILDREN flag is always FALSE.

 For more information see:
 http://subversion.tigris.org/merge-tracking/design.html#commutative-reporting

</member>
        <member name="F:svn_log_entry_t.revprops">
The hash of requested revision properties, which may be NULL if it
   * would contain no revprops. 
</member>
        <member name="F:svn_log_entry_t.revision">
The revision of the commit. 
</member>
        <member name="F:svn_log_entry_t.changed_paths">
A hash containing as keys every path committed in @a revision; the
   * values are (@c svn_log_changed_path_t *) stuctures.
   *
   * ### The only reason @a changed_paths is not qualified with `const' is
   * that we usually want to loop over it, and apr_hash_first() doesn't
   * take a const hash, for various reasons.  I'm not sure that those
   * "various reasons" are actually even relevant anymore, and if
   * they're not, it might be nice to change apr_hash_first() so
   * read-only uses of hashes can be protected via the type system.

</member>
        <member name="T:svn_log_entry_t">
 A structure to represent all the information about a particular log entry.

 @note To allow for extending the @c svn_log_entry_t structure in future
 releases, always use svn_log_entry_create() to allocate the structure.

</member>
        <member name="M:svn_log_changed_path_dup(svn_log_changed_path_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a deep copy of @a changed_path, allocated in @a pool.

 @since New in 1.3.

</member>
        <member name="F:svn_log_changed_path_t.copyfrom_rev">
Source revision of copy (if any). 
</member>
        <member name="F:svn_log_changed_path_t.copyfrom_path">
Source path of copy (if any). 
</member>
        <member name="F:svn_log_changed_path_t.action">
'A'dd, 'D'elete, 'R'eplace, 'M'odify 
</member>
        <member name="T:svn_log_changed_path_t">
A structure to represent a path that changed for a log entry. 
</member>
        <member name="M:svn_commit_info_dup(svn_commit_info_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
 Return a deep copy @a src_commit_info allocated in @a pool.

 @since New in 1.4.

</member>
        <member name="M:svn_create_commit_info(apr_pool_t*)">
 Allocate an object of type @c svn_commit_info_t in @a pool and
 return it.

 The @c revision field of the new struct is set to @c
 SVN_INVALID_REVNUM.  All other fields are initialized to @c NULL.

 @note Any object of the type @c svn_commit_info_t should
 be created using this function.
 This is to provide for extending the svn_commit_info_t in
 the future.

 @since New in 1.3.

</member>
        <member name="F:svn_commit_info_t.post_commit_err">
error message from post-commit hook, or NULL. 
</member>
        <member name="F:svn_commit_info_t.author">
author of the commit. 
</member>
        <member name="F:svn_commit_info_t.date">
server-side date of the commit. 
</member>
        <member name="F:svn_commit_info_t.revision">
just-committed revision. 
</member>
        <member name="M:svn_dirent_dup(svn_dirent_t!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return a deep copy of @a dirent, allocated in @a pool.
 *
 * @since New in 1.4.

</member>
        <member name="F:svn_dirent_t.last_author">
author of created_rev 
</member>
        <member name="F:svn_dirent_t.time">
time of created_rev (mod-time) 
</member>
        <member name="F:svn_dirent_t.created_rev">
last rev in which this node changed 
</member>
        <member name="F:svn_dirent_t.has_props">
does the node have props? 
</member>
        <member name="F:svn_dirent_t.size">
length of file text, or 0 for directories 
</member>
        <member name="F:svn_dirent_t.kind">
node kind 
</member>
        <member name="T:svn_dirent_t">
 It is sometimes convenient to indicate which parts of an @c svn_dirent_t
 object you are actually interested in, so that calculating and sending
 the data corresponding to the other fields can be avoided.  These values
 can be used for that purpose.

 @defgroup svn_dirent_fields Dirent fields
 @{

An indication that you are interested in the @c kind field 
An indication that you are interested in the @c size field 
An indication that you are interested in the @c has_props field 
An indication that you are interested in the @c created_rev field 
An indication that you are interested in the @c time field 
An indication that you are interested in the @c last_author field 
A combination of all the dirent fields 
@} 
A general subversion directory entry. 
</member>
        <member name="M:svn_depth_from_word(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return the appropriate depth for @a depth_str.  @a word is as
 * returned from svn_depth_to_word().  If @a depth_str does not
 * represent a recognized depth, return @c svn_depth_unknown.
 *
 * @since New in 1.5.

</member>
        <member name="T:svn_recurse_kind">
An enum to indicate whether recursion is needed. 
</member>
        <member name="D:svn_boolean_t">
The 'official' invalid file size constant. 
In printf()-style functions, format file sizes using this. 
YABT:  Yet Another Boolean Type 
</member>
        <member name="D:svn_filesize_t">
Originally intended to be used in printf()-style functions to format
 * revision numbers.  Deprecated due to incompatibilities with language
 * translation tools (e.g. gettext).
 *
 * New code should use a bare "%ld" format specifier for formatting revision
 * numbers.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.

The size of a file in the Subversion FS. 
</member>
        <member name="M:svn_revnum_parse(System.Int32!System.Runtime.CompilerServices.IsLong*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**)">
Valid revision numbers begin at 0 
The 'official' invalid revision num 
Not really invalid...just unimportant -- one day, this can be its
 * own unique value, for now, just make it the same as
 * @c SVN_INVALID_REVNUM.

Convert NULL-terminated C string @a str to a revision number. 
 Parse NULL-terminated C string @a str as a revision number and
 store its value in @a rev.  If @a endptr is non-NULL, then the
 address of the first non-numeric character in @a str is stored in
 it.  If there are no digits in @a str, then @a endptr is set (if
 non-NULL), and the error @c SVN_ERR_REVNUM_PARSE_FAILURE error is
 returned.  Negative numbers parsed from @a str are considered
 invalid, and result in the same error.

 @since New in 1.5.

</member>
        <member name="D:svn_revnum_t">
About Special Files in Subversion
 *
 * Subversion denotes files that cannot be portably created or
 * modified as "special" files (svn_node_special).  It stores these
 * files in the repository as a plain text file with the svn:special
 * property set.  The file contents contain: a platform-specific type
 * string, a space character, then any information necessary to create
 * the file on a supported platform.  For example, if a symbolic link
 * were being represented, the repository file would have the
 * following contents:
 *
 * "link /path/to/link/target"
 *
 * Where 'link' is the identifier string showing that this special
 * file should be a symbolic link and '/path/to/link/target' is the
 * destination of the symbolic link.
 *
 * Special files are stored in the text-base exactly as they are
 * stored in the repository.  The platform specific files are created
 * in the working copy at EOL/keyword translation time using
 * svn_subst_copy_and_translate2().  If the current platform does not
 * support a specific special file type, the file is copied into the
 * working copy as it is seen in the repository.  Because of this,
 * users of other platforms can still view and modify the special
 * files, even if they do not have their unique properties.
 *
 * New types of special files can be added by:
 *  1. Implementing a platform-dependent routine to create a uniquely
 *     named special file and one to read the special file in
 *     libsvn_subr/io.c.
 *  2. Creating a new textual name similar to
 *     SVN_SUBST__SPECIAL_LINK_STR in libsvn_subr/subst.c.
 *  3. Handling the translation/detranslation case for the new type in
 *     create_special_file and detranslate_special_file, using the
 *     routines from 1.

A revision number. 
</member>
        <member name="F:svn_node_unknown">
something's here, but we don't know what 
</member>
        <member name="F:svn_node_dir">
directory 
</member>
        <member name="F:svn_node_file">
regular file 
</member>
        <member name="F:svn_node_none">
absent 
</member>
        <member name="F:svn_error_t.line">
Source line where the error originated.  Only used iff @c SVN_DEBUG. 
</member>
        <member name="F:svn_error_t.file">
Source file where the error originated.  Only used iff @c SVN_DEBUG. 
</member>
        <member name="F:svn_error_t.pool">
The pool holding this error and any child errors it wraps 
</member>
        <member name="F:svn_error_t.message">
details from producer of error 
</member>
        <member name="F:svn_error_t.apr_err">
APR error value, possibly SVN_ custom err 
</member>
        <member name="T:svn_error_t">
Subversion error object.
 *
 * Defined here, rather than in svn_error.h, to avoid a recursive @#include
 * situation.


ptr to the error we "wrap" 
</member>
        <member name="M:apr_filepath_encoding(System.Int32*,apr_pool_t*)">
The FilePath character encoding is unknown 
The FilePath character encoding is locale-dependent 
The FilePath character encoding is UTF-8 
Determine the encoding used internally by the FilePath functions
@param style points to a variable which receives the encoding style flag
@param p the pool to allocate any working storage
@remark Use @c apr_os_locale_encoding and/or @c apr_os_default_encoding
to get the name of the path encoding if it's not UTF-8.

</member>
        <member name="M:apr_filepath_set(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Set the default file path (for relative file names)
@param path the default path returned
@param p the pool to allocate any working storage

</member>
        <member name="M:apr_filepath_get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Int32,apr_pool_t*)">
Return the default file path (for relative file names)
@param path the default path string returned
@param flags optional flag APR_FILEPATH_NATIVE to retrieve the
             default file path in os-native format.
@param p the pool to allocate the default path string from

</member>
        <member name="M:apr_filepath_list_merge(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,apr_array_header_t*,apr_pool_t*)">
Merge a list of search path components into a single search path
@param liststr the returned search path; may be NULL if @a pathelts is empty
@param pathelts the components of the search path
@param p the pool to allocate the search path from
@remark emtpy strings in the source array are ignored.
@remark the path separator in @a liststr is system specific;
e.g., ':' on Unix, ';' on Windows, etc.

</member>
        <member name="M:apr_filepath_list_split(apr_array_header_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Split a search path into separate components
@param pathelts the returned components of the search path
@param liststr the search path (e.g., <tt>getenv("PATH")</tt>)
@param p the pool to allocate the array and path components from
@remark empty path componenta do not become part of @a pathelts.
@remark the path separator in @a liststr is system specific;
e.g., ':' on Unix, ';' on Windows, etc.

</member>
        <member name="M:apr_filepath_merge(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
Merge additional file path onto the previously processed rootpath
@param newpath the merged paths returned
@param rootpath the root file path (NULL uses the current working path)
@param addpath the path to add to the root path
@param flags the desired APR_FILEPATH_ rules to apply when merging
@param p the pool to allocate the new path string from
@remark if the flag APR_FILEPATH_TRUENAME is given, and the addpath 
contains wildcard characters ('*', '?') on platforms that don't support 
such characters within filenames, the paths will be merged, but the 
result code will be APR_EPATHWILD, and all further segments will not
reflect the true filenames including the wildcard and following segments.

</member>
        <member name="M:apr_filepath_root(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Int32,apr_pool_t*)">
@} 
@defgroup apr_filepath Filepath Manipulation Functions
@{

Cause apr_filepath_merge to fail if addpath is above rootpath 
internal: Only meaningful with APR_FILEPATH_NOTABOVEROOT 
Cause apr_filepath_merge to fail if addpath is above rootpath,
 * even given a rootpath /foo/bar and an addpath ../bar/bash

Fail apr_filepath_merge if the merged path is relative 
Fail apr_filepath_merge if the merged path is absolute 
Return the file system's native path format (e.g. path delimiters
 * of ':' on MacOS9, '\' on Win32, etc.) 
Resolve the true case of existing directories and file elements
 * of addpath, (resolving any aliases on Win32) and append a proper 
 * trailing slash if a directory

Extract the rootpath from the given filepath
@param rootpath the root file path returned with APR_SUCCESS or APR_EINCOMPLETE
@param filepath the pathname to parse for its root component
@param flags the desired rules to apply, from
<PRE>
     APR_FILEPATH_NATIVE    Use native path seperators (e.g. '\' on Win32)
     APR_FILEPATH_TRUENAME  Tests that the root exists, and makes it proper
</PRE>
@param p the pool to allocate the new path string from
@remark on return, filepath points to the first non-root character in the
given filepath.  In the simplest example, given a filepath of "/foo", 
returns the rootpath of "/" and filepath points at "foo".  This is far 
more complex on other platforms, which will canonicalize the root form
to a consistant format, given the APR_FILEPATH_TRUENAME flag, and also
test for the validity of that root (e.g., that a drive d:/ or network 
share //machine/foovol/). 
The function returns APR_ERELATIVE if filepath isn't rooted (an
error), APR_EINCOMPLETE if the root path is ambigious (but potentially
legitimate, e.g. "/" on Windows is incomplete because it doesn't specify
the drive letter), or APR_EBADPATH if the root is simply invalid.
APR_SUCCESS is returned if filepath is an absolute path.

</member>
        <member name="M:apr_dir_rewind(apr_dir_t*)">
Rewind the directory to the first entry.
@param thedir the directory descriptor to rewind.

</member>
        <member name="M:apr_dir_read(apr_finfo_t*,System.Int32,apr_dir_t*)">
 * Read the next entry from the specified directory. 
 * @param finfo the file info structure and filled in by apr_dir_read
 * @param wanted The desired apr_finfo_t fields, as a bit flag of APR_FINFO_
                 values 
 * @param thedir the directory descriptor returned from apr_dir_open
 * @remark No ordering is guaranteed for the entries read.
 *
 * @note If @c APR_INCOMPLETE is returned all the fields in @a finfo may
 *       not be filled in, and you need to check the @c finfo-&gt;valid bitmask
 *       to verify that what you're looking for is there.

</member>
        <member name="M:apr_dir_close(apr_dir_t*)">
close the specified directory. 
@param thedir the directory descriptor to close.

</member>
        <member name="M:apr_dir_open(apr_dir_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
@} 
@defgroup apr_dir Directory Manipulation Functions
@{

Open the specified directory.
@param new_dir The opened directory descriptor.
@param dirname The full path to the directory (use / on all systems)
@param pool The pool to use.

</member>
        <member name="M:apr_stat(apr_finfo_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apr_pool_t*)">
 * get the specified file's stats.  The file is specified by filename, 
 * instead of using a pre-opened file.
 * @param finfo Where to store the information about the file, which is
 * never touched if the call fails.
 * @param fname The name of the file to stat.
 * @param wanted The desired apr_finfo_t fields, as a bit flag of APR_FINFO_
                 values 
 * @param pool the pool to use to allocate the new file. 
 *
 * @note If @c APR_INCOMPLETE is returned all the fields in @a finfo may
 *       not be filled in, and you need to check the @c finfo-&gt;valid bitmask
 *       to verify that what you're looking for is there.

</member>
        <member name="T:apr_file_t">
The file's handle, if accessed (can be submitted to apr_duphandle) 
</member>
        <member name="F:apr_finfo_t.name">
The file's name (no path) in filesystem case 
</member>
        <member name="F:apr_finfo_t.fname">
The pathname of the file (possibly unrooted) 
</member>
        <member name="F:apr_finfo_t.ctime">
The time the file was created, or the inode was last changed 
</member>
        <member name="F:apr_finfo_t.mtime">
The time the file was last modified 
</member>
        <member name="F:apr_finfo_t.atime">
The time the file was last accessed 
</member>
        <member name="F:apr_finfo_t.csize">
The storage size consumed by the file 
</member>
        <member name="F:apr_finfo_t.size">
The size of the file 
</member>
        <member name="F:apr_finfo_t.nlink">
The number of hard links to the file. 
</member>
        <member name="F:apr_finfo_t.device">
The id of the device the file is on. 
</member>
        <member name="F:apr_finfo_t.inode">
The inode of the file. 
</member>
        <member name="F:apr_finfo_t.group">
The group id that owns the file 
</member>
        <member name="F:apr_finfo_t.user">
The user id that owns the file 
</member>
        <member name="F:apr_finfo_t.filetype">
The type of file.  One of APR_REG, APR_DIR, APR_CHR, APR_BLK, APR_PIPE, 
     * APR_LNK or APR_SOCK.  If the type is undetermined, the value is APR_NOFILE.
     * If the type cannot be determined, the value is APR_UNKFILE.

</member>
        <member name="F:apr_finfo_t.protection">
The access permissions of the file.  Mimics Unix access rights. 
</member>
        <member name="F:apr_finfo_t.valid">
The bitmask describing valid fields of this apr_finfo_t structure 
     *  including all available 'wanted' fields and potentially more 
</member>
        <member name="F:apr_finfo_t.pool">
Allocates memory and closes lingering handles in the specified pool 
</member>
        <member name="T:apr_finfo_t">
@defgroup apr_file_stat Stat Functions
@{

file info structure 

The file information structure.  This is analogous to the POSIX
stat structure.

</member>
        <member name="D:apr_dev_t">
Structure for determining the device the file is on.

</member>
        <member name="D:apr_fileperms_t">
Structure for determining file permissions.

</member>
        <member name="T:apr_dir_t">
@defgroup apr_file_permissions File Permissions flags 
@{

@} 
Structure for referencing directories.

</member>
        <member name="M:apr_table_compress(apr_table_t*,System.UInt32)">
 Eliminate redundant entries in a table by either overwriting
 or merging duplicates

 @param t Table.
 @param flags APR_OVERLAP_TABLES_MERGE to merge, or
              APR_OVERLAP_TABLES_SET to overwrite

</member>
        <member name="M:apr_table_vdo(=FUNC:System.Int32(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*),System.Void*,apr_table_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Iterate over a table running the provided function once for every
element in the table.  If there is data passed in as a vararg, then the 
function is only run on those element's whose key matches something in 
the vararg.  If the vararg is NULL, then every element is run through the
function.  Iteration continues while the function returns non-zero.
@param comp The function to run
@param rec The data to pass as the first argument to the function
@param t The table to iterate over
@param vp The vararg table.  If this is NULL, then all elements in the 
               table are run through the function, otherwise only those 
               whose key matches are run.
@return FALSE if one of the comp() iterations returned zero; TRUE if all
           iterations returned non-zero
@see apr_table_do_callback_fn_t

</member>
        <member name="M:apr_table_do(=FUNC:System.Int32(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*),System.Void*,apr_table_t!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Iterate over a table running the provided function once for every
element in the table.  If there is data passed in as a vararg, then the 
function is only run on those elements whose key matches something in 
the vararg.  If the vararg is NULL, then every element is run through the
function.  Iteration continues while the function returns non-zero.
@param comp The function to run
@param rec The data to pass as the first argument to the function
@param t The table to iterate over
@param ... The vararg.  If this is NULL, then all elements in the table are
           run through the function, otherwise only those whose key matches
           are run.
@return FALSE if one of the comp() iterations returned zero; TRUE if all
           iterations returned non-zero
@see apr_table_do_callback_fn_t

</member>
        <member name="D:apr_table_do_callback_fn_t">
Declaration prototype for the iterator callback function of apr_table_do()
and apr_table_vdo().
@param rec The data passed as the first argument to apr_table_[v]do()
@param key The key from this iteration of the table
@param value The value from this iteration of the table
@remark Iteration continues while this callback function returns non-zero.
To export the callback function for apr_table_[v]do() it must be declared 
in the _NONSTD convention.

</member>
        <member name="M:apr_table_overlay(apr_pool_t*,apr_table_t!System.Runtime.CompilerServices.IsConst*,apr_table_t!System.Runtime.CompilerServices.IsConst*)">
Merge two tables into one new table
@param p The pool to use for the new table
@param overlay The first table to put in the new table
@param base The table to add at the end of the new table
@return A new table containing all of the data from the two passed in

</member>
        <member name="M:apr_table_addn(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add data to a table, regardless of whether there is another element with the
same key.
@param t The table to add to
@param key The key to use
@param val The value to add.
@remark When adding data, this function does not make a copy of the key or the
        value, so care should be taken to ensure that the values will not 
        change after they have been added..

</member>
        <member name="M:apr_table_add(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add data to a table, regardless of whether there is another element with the
same key.
@param t The table to add to
@param key The key to use
@param val The value to add.
@remark When adding data, this function makes a copy of both the key and the
        value.

</member>
        <member name="M:apr_table_mergen(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add data to a table by merging the value with data that has already been 
stored
@param t The table to search for the data
@param key The key to merge data for
@param val The data to add
@remark If the key is not found, then this function acts like apr_table_addn

</member>
        <member name="M:apr_table_merge(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add data to a table by merging the value with data that has already been 
stored
@param t The table to search for the data
@param key The key to merge data for
@param val The data to add
@remark If the key is not found, then this function acts like apr_table_add

</member>
        <member name="M:apr_table_unset(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Remove data from the table
@param t The table to remove data from
@param key The key of the data being removed

</member>
        <member name="M:apr_table_setn(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add a key/value pair to a table, if another element already exists with the
same key, this will over-write the old data.
@param t The table to add the data to.
@param key The key to use
@param val The value to add
@warning When adding data, this function does not make a copy of the key or 
         the value, so care should be taken to ensure that the values will 
         not change after they have been added..

</member>
        <member name="M:apr_table_set(apr_table_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add a key/value pair to a table, if another element already exists with the
same key, this will over-write the old data.
@param t The table to add the data to.
@param key The key fo use
@param val The value to add
@remark When adding data, this function makes a copy of both the key and the
        value.

</member>
        <member name="M:apr_table_get(apr_table_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the value associated with a given key from the table.  After this call,
The data is still in the table
@param t The table to search for the key
@param key The key to search for
@return The value associated with the key, or NULL if the key does not exist. 

</member>
        <member name="M:apr_table_clear(apr_table_t*)">
Delete all of the elements from a table
@param t The table to clear

</member>
        <member name="M:apr_table_copy(apr_pool_t*,apr_table_t!System.Runtime.CompilerServices.IsConst*)">
Create a new table and copy another table into it
@param p The pool to allocate the new table out of
@param t The table to copy
@return A copy of the table passed in

</member>
        <member name="M:apr_table_make(apr_pool_t*,System.Int32)">
Make a new table
@param p The pool to allocate the pool out of
@param nelts The number of elements in the initial table.
@return The new table.
@warning This table can only store text data

</member>
        <member name="M:apr_array_pstrcat(apr_pool_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
Generates a new string from the apr_pool_t containing the concatenated 
sequence of substrings referenced as elements within the array.  The string 
will be empty if all substrings are empty or null, or if there are no 
elements in the array.  If sep is non-NUL, it will be inserted between 
elements as a separator.
@param p The pool to allocate the string out of
@param arr The array to generate the string from
@param sep The separator to use
@return A string containing all of the data in the array.

</member>
        <member name="M:apr_array_append(apr_pool_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*)">
Append one array to the end of another, creating a new array in the process.
@param p The pool to allocate the new array out of
@param first The array to put first in the new array.
@param second The array to put second in the new array.
@return A new array containing the data from the two arrays passed in.

</member>
        <member name="M:apr_array_copy_hdr(apr_pool_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*)">
Copy the headers of the array, and arrange for the elements to be copied if
and only if the code subsequently does a push or arraycat.
@param p The pool to allocate the copy of the array out of
@param arr The array to copy
@return An exact copy of the array passed in
@remark The alternate apr_array_copy copies the *entire* array.

</member>
        <member name="M:apr_array_copy(apr_pool_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*)">
Copy the entire array
@param p The pool to allocate the copy of the array out of
@param arr The array to copy
@return An exact copy of the array passed in
@remark The alternate apr_array_copy_hdr copies only the header, and arranges 
        for the elements to be copied if (and only if) the code subsequently
        does a push or arraycat.

</member>
        <member name="M:apr_array_cat(apr_array_header_t*,apr_array_header_t!System.Runtime.CompilerServices.IsConst*)">
Concatenate two arrays together
@param dst The destination array, and the one to go first in the combined 
           array
@param src The source array to add to the destination array

</member>
        <member name="M:apr_array_pop(apr_array_header_t*)">
Remove an element from an array (as a first-in, last-out stack)
@param arr The array to remove an element from.
@return Location of the element in the array.
@remark If there are no elements in the array, NULL is returned.

</member>
        <member name="M:apr_array_push(apr_array_header_t*)">
Add a new element to an array (as a first-in, last-out stack)
@param arr The array to add an element to.
@return Location for the new element in the array.
@remark If there are no free spots in the array, then this function will
        allocate new space for the new element.

</member>
        <member name="M:apr_array_make(apr_pool_t*,System.Int32,System.Int32)">
Create an array
@param p The pool to allocate the memory out of
@param nelts the number of elements in the initial array
@param elt_size The size of each element in the array.
@return The new array

</member>
        <member name="M:apr_is_empty_array(apr_array_header_t!System.Runtime.CompilerServices.IsConst*)">
Determine if the array is empty
@param a The array to check
@return True if empty, False otherwise

</member>
        <member name="M:apr_is_empty_table(apr_table_t!System.Runtime.CompilerServices.IsConst*)">
Determine if the table is empty
@param t The table to check
@return True if empty, False otherwise

</member>
        <member name="M:apr_table_elts(apr_table_t!System.Runtime.CompilerServices.IsConst*)">
Get the elements from a table
@param t The table
@return An array containing the contents of the table

</member>
        <member name="F:apr_table_entry_t.key_checksum">
A checksum for the key, for use by the apr_table internals 
</member>
        <member name="F:apr_table_entry_t.val">
The value for the current table entry 
</member>
        <member name="F:apr_table_entry_t.key">
The key for the current table entry 
</member>
        <member name="T:apr_table_entry_t">
The (opaque) structure for string-content tables.


The type for each entry in a string-content table 
</member>
        <member name="F:apr_array_header_t.elts">
The elements in the array 
</member>
        <member name="F:apr_array_header_t.nalloc">
The number of elements allocated in the array 
</member>
        <member name="F:apr_array_header_t.nelts">
The number of active elements in the array 
</member>
        <member name="F:apr_array_header_t.elt_size">
The amount of memory allocated for each element of the array 
</member>
        <member name="F:apr_array_header_t.pool">
The pool the array is allocated out of 
</member>
        <member name="T:apr_array_header_t">
@see apr_array_header_t 

An opaque array type 
</member>
        <member name="T:apr_table_t">
@file apr_tables.h
@brief APR Table library

@defgroup apr_tables Table and Array Functions
@ingroup APR 
Tables are used to store entirely opaque structures 
for applications, while Arrays are usually used to
deal with string lists.
@{

the table abstract data type 
</member>
        <member name="M:apr_gid_compare(System.Void*,System.Void*)">
Compare two group identifiers for equality.
@param left One gid to test
@param right Another gid to test
@return APR_SUCCESS if the apr_gid_t strutures identify the same group,
APR_EMISMATCH if not, APR_BADARG if an apr_gid_t is invalid.
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_gid_get(System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Get the groupid for a specified group name
@param groupid Pointer to the group id (on output)
@param groupname The group name to look up
@param p The pool from which to allocate the string
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_gid_name_get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Void*,apr_pool_t*)">
Get the group name for a specified groupid
@param groupname Pointer to new string containing group name (on output)
@param groupid The groupid
@param p The pool from which to allocate the string
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_uid_compare(System.Void*,System.Void*)">
Compare two user identifiers for equality.
@param left One uid to test
@param right Another uid to test
@return APR_SUCCESS if the apr_uid_t strutures identify the same user,
APR_EMISMATCH if not, APR_BADARG if an apr_uid_t is invalid.
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_uid_homepath_get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Get the home directory for the named user
@param dirname Pointer to new string containing directory name (on output)
@param username The named user
@param p The pool from which to allocate the string
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_uid_get(System.Void**,System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Get the userid (and groupid) for the specified username
@param userid   Returns the user id
@param groupid  Returns the user's group id
@param username The username to lookup
@param p The pool from which to allocate working space
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_uid_name_get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Void*,apr_pool_t*)">
Get the user name for a specified userid
@param username Pointer to new string containing user name (on output)
@param userid The userid
@param p The pool from which to allocate the string
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="M:apr_uid_current(System.Void**,System.Void**,apr_pool_t*)">
Get the userid (and groupid) of the calling process
@param userid   Returns the user id
@param groupid  Returns the user's group id
@param p The pool from which to allocate working space
@remark This function is available only if APR_HAS_USER is defined.

</member>
        <member name="D:apr_gid_t">
Structure for determining group ownership.

</member>
        <member name="D:apr_uid_t">
@file apr_file_info.h
@brief APR File Information

@file apr_user.h
@brief APR User ID Services 

@defgroup apr_user User and Group ID Services
@ingroup APR 
@{

Structure for determining user ownership.

</member>
        <member name="M:apr_time_clock_hires(apr_pool_t*)">
Improve the clock resolution for the lifetime of the given pool.
Generally this is only desireable on benchmarking and other very
time-sensitive applications, and has no impact on most platforms.
@param p The pool to associate the finer clock resolution 

</member>
        <member name="M:apr_strftime(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_time_exp_t*)">
formats the exploded time according to the format specified
@param s string to write to
@param retsize The length of the returned string
@param max The maximum length of the string
@param format The format for the time string
@param tm The time to convert

</member>
        <member name="M:apr_ctime(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int64)">
length of a CTIME date 
apr_ctime formats dates in the ctime() format
in an efficient manner.  it is a fixed length format
and requires the indicated amount of storage including
the trailing NUL terminator.
Unlike ANSI/ISO C ctime(), apr_ctime() does not include
a \n at the end of the string.
@param date_str String to write to.
@param t the time to convert 

</member>
        <member name="M:apr_rfc822_date(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int64)">
length of a RFC822 Date 
apr_rfc822_date formats dates in the RFC822
format in an efficient manner.  It is a fixed length
format which requires the indicated amount of storage,
including the trailing NUL terminator.
@param date_str String to write to.
@param t the time to convert 

</member>
        <member name="M:apr_sleep(System.Int64)">
Sleep for the specified number of micro-seconds.
@param t desired amount of time to sleep.
@warning May sleep for longer than the specified time. 

</member>
        <member name="M:apr_time_exp_gmt_get(System.Int64*,apr_time_exp_t*)">
Convert time value from human readable format to a numeric apr_time_t that
always represents GMT
@param result the resulting imploded time
@param input the input exploded time

</member>
        <member name="M:apr_time_exp_get(System.Int64*,apr_time_exp_t*)">
Convert time value from human readable format to a numeric apr_time_t 
e.g. elapsed usec since epoch
@param result the resulting imploded time
@param input the input exploded time

</member>
        <member name="M:apr_time_exp_lt(apr_time_exp_t*,System.Int64)">
convert a time to its human readable components in local timezone
@param result the exploded time
@param input the time to explode

</member>
        <member name="M:apr_time_exp_gmt(apr_time_exp_t*,System.Int64)">
convert a time to its human readable components in GMT timezone
@param result the exploded time
@param input the time to explode

</member>
        <member name="M:apr_time_exp_tz(apr_time_exp_t*,System.Int64,System.Int32)">
convert a time to its human readable components using an offset
from GMT
@param result the exploded time
@param input the time to explode
@param offs the number of seconds offset to apply

</member>
        <member name="M:apr_time_ansi_put(System.Int64*,System.Int64)">
convert an ansi time_t to an apr_time_t
@param result the resulting apr_time_t
@param input the time_t to convert

</member>
        <member name="F:apr_time_exp_t.tm_gmtoff">
seconds east of UTC 
</member>
        <member name="F:apr_time_exp_t.tm_isdst">
daylight saving time 
</member>
        <member name="F:apr_time_exp_t.tm_yday">
(0-365) days since jan 1 
</member>
        <member name="F:apr_time_exp_t.tm_wday">
(0-6) days since sunday 
</member>
        <member name="F:apr_time_exp_t.tm_year">
year since 1900 
</member>
        <member name="F:apr_time_exp_t.tm_mon">
(0-11) month of the year 
</member>
        <member name="F:apr_time_exp_t.tm_mday">
(1-31) day of the month 
</member>
        <member name="F:apr_time_exp_t.tm_hour">
(0-23) hours past midnight 
</member>
        <member name="F:apr_time_exp_t.tm_min">
(0-59) minutes past tm_hour 
</member>
        <member name="F:apr_time_exp_t.tm_sec">
(0-61) seconds past tm_min 
</member>
        <member name="F:apr_time_exp_t.tm_usec">
microseconds past tm_sec 
</member>
        <member name="T:apr_time_exp_t">
@see apr_time_exp_t 

a structure similar to ANSI struct tm with the following differences:
 - tm_usec isn't an ANSI field
 - tm_gmtoff isn't an ANSI field (it's a bsdism)

</member>
        <member name="M:apr_time_now">
number of microseconds per second 
@return apr_time_t as a second 
@return apr_time_t as a usec 
@return apr_time_t as a msec 
@return apr_time_t as a msec 
@return a second as an apr_time_t 
@return a second and usec combination as an apr_time_t 
@return the current time

</member>
        <member name="D:apr_short_interval_time_t">
short interval for I/O timeouts, in microseconds 
</member>
        <member name="D:apr_interval_time_t">
mechanism to properly type apr_time_t literals 
mechanism to properly print apr_time_t values 
intervals for I/O timeouts, in microseconds 
</member>
        <member name="D:apr_time_t">
number of microseconds since 00:00:00 january 1, 1970 UTC 
</member>
        <member name="F:apr_day_snames">
day names 
</member>
        <member name="F:apr_month_snames">
@file apr_time.h
@brief APR Time Library

@defgroup apr_time Time Routines
@ingroup APR 
@{

month names 
</member>
        <member name="M:apr_pool_cleanup_for_exec">
Run all registered child cleanups, in preparation for an exec()
call in a forked child -- close files, etc., but *don't* flush I/O
buffers, *don't* wait for subprocesses, and *don't* free any
memory.

</member>
        <member name="M:apr_pool_cleanup_null(System.Void*)">
 An empty cleanup function.
 
 Passed to apr_pool_cleanup_register() when no cleanup is required.

 @param data The data to cleanup, will not be used by this function.

</member>
        <member name="M:apr_pool_cleanup_run(apr_pool_t*,System.Void*,=FUNC:System.Int32(System.Void*))">
 Run the specified cleanup function immediately and unregister it.

 The cleanup most recently registered with @a p having the same values of
 @a data and @a cleanup will be removed and @a cleanup will be called
 with @a data as the argument.

 @param p The pool to remove the cleanup from
 @param data The data to remove from cleanup
 @param cleanup The function to remove from cleanup

</member>
        <member name="M:apr_pool_child_cleanup_set(apr_pool_t*,System.Void!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.Void*),=FUNC:System.Int32(System.Void*))">
 Replace the child cleanup function of a previously registered cleanup.
 
 The cleanup most recently registered with @a p having the same values of
 @a data and @a plain_cleanup will have the registered child cleanup
 function replaced with @a child_cleanup.

 @param p The pool of the registered cleanup
 @param data The data of the registered cleanup
 @param plain_cleanup The plain cleanup function of the registered cleanup
 @param child_cleanup The function to register as the child cleanup

</member>
        <member name="M:apr_pool_cleanup_kill(apr_pool_t*,System.Void!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.Void*))">
 Remove a previously registered cleanup function.
 
 The cleanup most recently registered with @a p having the same values of
 @a data and @a cleanup will be removed.

 @param p The pool to remove the cleanup from
 @param data The data of the registered cleanup
 @param cleanup The function to remove from cleanup
 @remarks For some strange reason only the plain_cleanup is handled by this
          function

</member>
        <member name="M:apr_pool_cleanup_register(apr_pool_t*,System.Void!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.Void*),=FUNC:System.Int32(System.Void*))">
 @defgroup PoolCleanup  Pool Cleanup Functions

 Cleanups are performed in the reverse order they were registered.  That is:
 Last In, First Out.  A cleanup function can safely allocate memory from
 the pool that is being cleaned up. It can also safely register additional
 cleanups which will be run LIFO, directly after the current cleanup
 terminates.  Cleanups have to take caution in calling functions that
 create subpools. Subpools, created during cleanup will NOT automatically
 be cleaned up.  In other words, cleanups are to clean up after themselves.

 @{

Register a function to be called when a pool is cleared or destroyed
@param p The pool register the cleanup with
@param data The data to pass to the cleanup function.
@param plain_cleanup The function to call when the pool is cleared
                     or destroyed
@param child_cleanup The function to call when a child process is about
                     to exec - this function is called in the child, obviously!

</member>
        <member name="M:apr_pool_userdata_get(System.Void**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*)">
Return the data associated with the current pool.
@param data The user data associated with the pool.
@param key The key for the data to retrieve
@param pool The current pool.

</member>
        <member name="M:apr_pool_userdata_setn(System.Void!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.Void*),apr_pool_t*)">
 Set the data associated with the current pool
 @param data The user data associated with the pool.
 @param key The key to use for association
 @param cleanup The cleanup program to use to cleanup the data (NULL if none)
 @param pool The current pool
 @note same as apr_pool_userdata_set(), except that this version doesn't
       make a copy of the key (this function is useful, for example, when
       the key is a string literal)
 @warning This should NOT be used if the key could change addresses by
       any means between the apr_pool_userdata_setn() call and a
       subsequent apr_pool_userdata_get() on that key, such as if a
       static string is used as a userdata key in a DSO and the DSO could
       be unloaded and reloaded between the _setn() and the _get().  You
       MUST use apr_pool_userdata_set() in such cases.
 @warning More generally, the key and the data to be attached to the
       pool should have a life span at least as long as the pool itself.


</member>
        <member name="M:apr_pool_userdata_set(System.Void!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32(System.Void*),apr_pool_t*)">
 Set the data associated with the current pool
 @param data The user data associated with the pool.
 @param key The key to use for association
 @param cleanup The cleanup program to use to cleanup the data (NULL if none)
 @param pool The current pool
 @warning The data to be attached to the pool should have a life span
          at least as long as the pool it is being attached to.

      Users of APR must take EXTREME care when choosing a key to
      use for their data.  It is possible to accidentally overwrite
      data by choosing a key that another part of the program is using.
      Therefore it is advised that steps are taken to ensure that unique
      keys are used for all of the userdata objects in a particular pool
      (the same key in two different pools or a pool and one of its
      subpools is okay) at all times.  Careful namespace prefixing of
      key names is a typical way to help ensure this uniqueness.


</member>
        <member name="M:apr_pool_tag(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Tag a pool (give it a name)
@param pool The pool to tag
@param tag  The tag

</member>
        <member name="M:apr_pool_is_ancestor(apr_pool_t*,apr_pool_t*)">
Determine if pool a is an ancestor of pool b.
@param a The pool to search
@param b The pool to search for
@return True if a is an ancestor of b, NULL is considered an ancestor
        of all pools.
@remark if compiled with APR_POOL_DEBUG, this function will also
return true if A is a pool which has been guaranteed by the caller
(using apr_pool_join) to have a lifetime at least as long as some
ancestor of pool B.

</member>
        <member name="M:apr_pool_parent_get(apr_pool_t*)">
Get the parent pool of the specified pool.
@param pool The pool for retrieving the parent pool.
@return The parent of the given pool.

</member>
        <member name="M:apr_pool_abort_get(apr_pool_t*)">
Get the abort function associated with the specified pool.
@param pool The pool for retrieving the abort function.
@return The abort function for the given pool.

</member>
        <member name="M:apr_pool_abort_set(=FUNC:System.Int32(System.Int32),apr_pool_t*)">
Set the function to be called when an allocation failure occurs.
@remark If the program wants APR to exit on a memory allocation error,
     then this function can be called to set the callback to use (for
     performing cleanup and then exiting). If this function is not called,
     then APR will return an error and expect the calling program to
     deal with the error accordingly.

</member>
        <member name="M:apr_pcalloc_debug(apr_pool_t*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Allocate a block of memory from a pool and set all of the memory to 0
@param p The pool to allocate from
@param size The amount of memory to allocate
@return The allocated memory

Debug version of apr_pcalloc
@param p See: apr_pcalloc
@param size See: apr_pcalloc
@param file_line Where the function is called from.
       This is usually APR_POOL__FILE_LINE__.
@return See: apr_pcalloc

</member>
        <member name="M:apr_palloc_debug(apr_pool_t*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Debug version of apr_palloc
@param p See: apr_palloc
@param size See: apr_palloc
@param file_line Where the function is called from.
       This is usually APR_POOL__FILE_LINE__.
@return See: apr_palloc

</member>
        <member name="M:apr_palloc(apr_pool_t*,System.UInt32)">
Allocate a block of memory from a pool
@param p The pool to allocate from
@param size The amount of memory to allocate
@return The allocated memory

</member>
        <member name="M:apr_pool_destroy_debug(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Debug version of apr_pool_destroy.
@param p See: apr_pool_destroy.
@param file_line Where the function is called from.
       This is usually APR_POOL__FILE_LINE__.
@remark Only available when APR_POOL_DEBUG is defined.
        Call this directly if you have you apr_pool_destroy
        calls in a wrapper function and wish to override
        the file_line argument to reflect the caller of
        your wrapper function.  If you do not have
        apr_pool_destroy in a wrapper, trust the macro
        and don't call apr_pool_destroy_debug directly.

</member>
        <member name="M:apr_pool_destroy(apr_pool_t*)">
Destroy the pool. This takes similar action as apr_pool_clear() and then
frees all the memory.
@param p The pool to destroy
@remark This will actually free the memory

</member>
        <member name="M:apr_pool_clear_debug(apr_pool_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Debug version of apr_pool_clear.
@param p See: apr_pool_clear.
@param file_line Where the function is called from.
       This is usually APR_POOL__FILE_LINE__.
@remark Only available when APR_POOL_DEBUG is defined.
        Call this directly if you have you apr_pool_clear
        calls in a wrapper function and wish to override
        the file_line argument to reflect the caller of
        your wrapper function.  If you do not have
        apr_pool_clear in a wrapper, trust the macro
        and don't call apr_pool_destroy_clear directly.

</member>
        <member name="M:apr_pool_clear(apr_pool_t*)">
Clear all memory in the pool and run all the cleanups. This also destroys all
subpools.
@param p The pool to clear
@remark This does not actually free the memory, it just allows the pool
        to re-use this memory for the next allocation.
@see apr_pool_destroy()

</member>
        <member name="M:apr_pool_allocator_get(apr_pool_t*)">
Create a new pool.
@param newpool The pool we have just created.
@param parent The parent pool.  If this is NULL, the new pool is a root
       pool.  If it is non-NULL, the new pool will inherit all
       of its parent pool's attributes, except the apr_pool_t will
       be a sub-pool.

Find the pools allocator
@param pool The pool to get the allocator from.

</member>
        <member name="M:apr_pool_create_ex_debug(apr_pool_t**,apr_pool_t*,=FUNC:System.Int32(System.Int32),apr_allocator_t*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Debug version of apr_pool_create_ex.
@param newpool @see apr_pool_create.
@param parent @see apr_pool_create.
@param abort_fn @see apr_pool_create.
@param allocator @see apr_pool_create.
@param file_line Where the function is called from.
       This is usually APR_POOL__FILE_LINE__.
@remark Only available when APR_POOL_DEBUG is defined.
        Call this directly if you have you apr_pool_create_ex
        calls in a wrapper function and wish to override
        the file_line argument to reflect the caller of
        your wrapper function.  If you do not have
        apr_pool_create_ex in a wrapper, trust the macro
        and don't call apr_pool_create_ex_debug directly.

</member>
        <member name="M:apr_pool_create_ex(apr_pool_t**,apr_pool_t*,=FUNC:System.Int32(System.Int32),apr_allocator_t*)">
Create a new pool.
@param newpool The pool we have just created.
@param parent The parent pool.  If this is NULL, the new pool is a root
       pool.  If it is non-NULL, the new pool will inherit all
       of its parent pool's attributes, except the apr_pool_t will
       be a sub-pool.
@param abort_fn A function to use if the pool cannot allocate more memory.
@param allocator The allocator to use with the new pool.  If NULL the
       allocator of the parent pool will be used.

</member>
        <member name="M:apr_allocator_mutex_get(apr_allocator_t*)">
Get the mutex currently set for the allocator
@param allocator The allocator

</member>
        <member name="M:apr_allocator_mutex_set(apr_allocator_t*,apr_thread_mutex_t*)">
Set a mutex for the allocator to use
@param allocator The allocator to set the mutex for
@param mutex The mutex

</member>
        <member name="M:apr_thread_mutex_pool_get(apr_thread_mutex_t!System.Runtime.CompilerServices.IsConst*)">
Get the pool used by this thread_mutex.
@return apr_pool_t the pool

</member>
        <member name="M:apr_thread_mutex_destroy(apr_thread_mutex_t*)">
Destroy the mutex and free the memory associated with the lock.
@param mutex the mutex to destroy.

</member>
        <member name="M:apr_thread_mutex_unlock(apr_thread_mutex_t*)">
Release the lock for the given mutex.
@param mutex the mutex from which to release the lock.

</member>
        <member name="M:apr_thread_mutex_trylock(apr_thread_mutex_t*)">
Attempt to acquire the lock for the given mutex. If the mutex has already
been acquired, the call returns immediately with APR_EBUSY. Note: it
is important that the APR_STATUS_IS_EBUSY(s) macro be used to determine
if the return value was APR_EBUSY, for portability reasons.
@param mutex the mutex on which to attempt the lock acquiring.

</member>
        <member name="M:apr_thread_mutex_lock(apr_thread_mutex_t*)">
Acquire the lock for the given mutex. If the mutex is already locked,
the current thread will be put to sleep until the lock becomes available.
@param mutex the mutex on which to acquire the lock.

</member>
        <member name="M:apr_thread_mutex_create(apr_thread_mutex_t**,System.UInt32,apr_pool_t*)">
Create and initialize a mutex that can be used to synchronize threads.
@param mutex the memory address where the newly created mutex will be
       stored.
@param flags Or'ed value of:
<PRE>
          APR_THREAD_MUTEX_DEFAULT   platform-optimal lock behavior.
          APR_THREAD_MUTEX_NESTED    enable nested (recursive) locks.
          APR_THREAD_MUTEX_UNNESTED  disable nested locks (non-recursive).
</PRE>
@param pool the pool from which to allocate the mutex.
@warning Be cautious in using APR_THREAD_MUTEX_DEFAULT.  While this is the
most optimial mutex based on a given platform's performance charateristics,
it will behave as either a nested or an unnested lock.

</member>
        <member name="T:apr_thread_mutex_t">
@file apr_thread_mutex.h
@brief APR Thread Mutex Routines

@defgroup apr_thread_mutex Thread Mutex Routines
@ingroup APR 
@{

Opaque thread-local mutex structure 
</member>
        <member name="M:apr_allocator_max_free_set(apr_allocator_t*,System.UInt32)">
Set the current threshold at which the allocator should start
giving blocks back to the system.
@param allocator The allocator the set the threshold on
@param size The threshold.  0 == unlimited.

</member>
        <member name="M:apr_allocator_owner_get(apr_allocator_t*)">
Get the current owner of the allocator
@param allocator The allocator to get the owner from

</member>
        <member name="M:apr_allocator_owner_set(apr_allocator_t*,apr_pool_t*)">
Set the owner of the allocator
@param allocator The allocator to set the owner for
@param pool The pool that is to own the allocator
@remark Typically pool is the highest level pool using the allocator

</member>
        <member name="M:apr_allocator_free(apr_allocator_t*,apr_memnode_t*)">
Free a list of blocks of mem, giving them back to the allocator.
The list is typically terminated by a memnode with its next field
set to NULL.
@param allocator The allocator to give the mem back to
@param memnode The memory node to return

</member>
        <member name="M:apr_allocator_alloc(apr_allocator_t*,System.UInt32)">
Allocate a block of mem from the allocator
@param allocator The allocator to allocate from
@param size The size of the mem to allocate (excluding the
       memnode structure)

</member>
        <member name="M:apr_allocator_destroy(apr_allocator_t*)">
Destroy an allocator
@param allocator The allocator to be destroyed
@remark Any memnodes not given back to the allocator prior to destroying
        will _not_ be free()d.

</member>
        <member name="M:apr_allocator_create(apr_allocator_t**)">
The base size of a memory node - aligned.  
Symbolic constants 
 Create a new allocator
 @param allocator The allocator we have just created.


</member>
        <member name="T:apr_memnode_t">
the structure which holds information about the allocation 

basic memory node structure
 * @note The next, ref and first_avail fields are available for use by the
 *       caller of apr_allocator_alloc(), the remaining fields are read-only.
 *       The next field has to be used with caution and sensibly set when the
 *       memnode is passed back to apr_allocator_free().  See apr_allocator_free()
 *       for details.  
 *       The ref and first_avail fields will be properly restored by
 *       apr_allocator_free().

</member>
        <member name="M:apr_pool_terminate">
Tear down all of the internal structures required to use pools
@remark Programs do NOT need to call this directly.  APR will call this
     automatically from apr_terminate.
@internal

</member>
        <member name="M:apr_pool_initialize">
Setup all of the internal structures required to use pools
@remark Programs do NOT need to call this directly.  APR will call this
     automatically from apr_initialize.
@internal

</member>
        <member name="D:apr_abortfunc_t">
 Declaration helper macro to construct apr_foo_pool_get()s.

 This standardized macro is used by opaque (APR) data types to return
 the apr_pool_t that is associated with the data type.

 APR_POOL_DECLARE_ACCESSOR() is used in a header file to declare the
 accessor function. A typical usage and result would be:
 <pre>
    APR_POOL_DECLARE_ACCESSOR(file);
 becomes:
    APR_DECLARE(apr_pool_t *) apr_file_pool_get(apr_file_t *ob);
 </pre>
 @remark Doxygen unwraps this macro (via doxygen.conf) to provide 
 actual help for each specific occurance of apr_foo_pool_get.
 @remark the linkage is specified for APR. It would be possible to expand
       the macros to support other linkages.

 Implementation helper macro to provide apr_foo_pool_get()s.

 In the implementation, the APR_POOL_IMPLEMENT_ACCESSOR() is used to
 actually define the function. It assumes the field is named "pool".

 Pool debug levels

 <pre>
 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
 ---------------------------------
 |   |   |   |   |   |   |   | x |  General debug code enabled (useful in
                                    combination with --with-efence).

 |   |   |   |   |   |   | x |   |  Verbose output on stderr (report
                                    CREATE, CLEAR, DESTROY).

 |   |   |   | x |   |   |   |   |  Verbose output on stderr (report
                                    PALLOC, PCALLOC).

 |   |   |   |   |   | x |   |   |  Lifetime checking. On each use of a
                                    pool, check its lifetime.  If the pool
                                    is out of scope, abort().
                                    In combination with the verbose flag
                                    above, it will output LIFE in such an
                                    event prior to aborting.

 |   |   |   |   | x |   |   |   |  Pool owner checking.  On each use of a
                                    pool, check if the current thread is the
                                    pools owner.  If not, abort().  In
                                    combination with the verbose flag above,
                                    it will output OWNER in such an event
                                    prior to aborting.  Use the debug
                                    function apr_pool_owner_set() to switch
                                    a pools ownership.

 When no debug level was specified, assume general debug mode.
 If level 0 was specified, debugging is switched off
 </pre>

the place in the code where the particular function was called 
A function that is called when allocation fails. 
</member>
        <member name="M:apr_generate_random_bytes(System.Byte*,System.UInt32)">
@} 
@defgroup apr_random Random Functions
@{

Generate random bytes.
@param buf Buffer to fill with random bytes
@param length Length of buffer in bytes

</member>
        <member name="M:apr_terminate2">
Tear down any APR internal data structures which aren't torn down 
automatically, same as apr_terminate
@remark An APR program must call either the apr_terminate or apr_terminate2 
        function once it it has finished using APR services.  The APR 
        developers suggest using atexit(apr_terminate) to ensure this is done.
        apr_terminate2 exists to allow non-c language apps to tear down apr, 
        while apr_terminate is recommended from c language applications.

</member>
        <member name="M:apr_terminate">
Tear down any APR internal data structures which aren't torn down 
automatically.
@remark An APR program must call this function at termination once it 
        has stopped using APR services.  The APR developers suggest using
        atexit to ensure this is called.  When using APR from a language
        other than C that has problems with the calling convention, use
        apr_terminate2() instead.

</member>
        <member name="M:apr_app_initialize(System.Int32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst**)">
Set up an application with normalized argc, argv (and optionally env) in
order to deal with platform-specific oddities, such as Win32 services,
code pages and signals.  This must be the first function called for any
APR program.
@param argc Pointer to the argc that may be corrected
@param argv Pointer to the argv that may be corrected
@param env Pointer to the env that may be corrected, may be NULL
@remark See apr_initialize if this is a library consumer of apr.
Otherwise, this call is identical to apr_initialize, and must be closed
with a call to apr_terminate at the end of program execution.

</member>
        <member name="M:apr_initialize">
Finding offsets of elements within structures.
Taken from the X code... they've sweated portability of this stuff
so we don't have to.  Sigh...
@param p_type pointer type name
@param field  data field within the structure pointed to
@return offset

Finding offsets of elements within structures.
@param s_type structure type name
@param field  data field within the structure
@return offset

Alignment macros

Default alignment 
String and memory functions

Properly quote a value as a string in the C preprocessor 
Helper macro for APR_STRINGIFY 
@} 
@defgroup apr_library Library initialization and termination
@{

Setup any APR internal data structures.  This MUST be the first function 
called for any APR library.
@remark See apr_app_initialize if this is an application, rather than
a library consumer of apr.

</member>
        <member name="D:apr_signum_t">
@defgroup apr_general Miscellaneous library routines
@ingroup APR 
This is collection of oddballs that didn't fit anywhere else,
and might move to more appropriate headers with the release
of APR 1.0.
@{

FALSE 
TRUE 
a space 
a carrige return 
a line feed 
a tab 
signal numbers typedef 
</member>
        <member name="D:sig_atomic_t">
 @file apr_pools.h
 @brief APR memory allocation

 Resource allocation routines...

 designed so that we don't have to keep track of EVERYTHING so that
 it can be explicitly freed later (a fundamentally unsound strategy ---
 particularly in the presence of die()).

 Instead, we maintain pools, and allocate items (both memory and I/O
 handlers) from the pools --- currently there are two, one for per
 transaction info, and one for config info.  When a transaction is over,
 we can delete everything in the per-transaction apr_pool_t without fear,
 and without thinking too hard about it either.

@file apr_general.h
This is collection of oddballs that didn't fit anywhere else,
and might move to more appropriate headers with the release
of APR 1.0.
@brief APR Miscellaneous library routines

</member>
        <member name="M:apr_strerror(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32)">
Return a human readable string describing the specified error.
@param statcode The error code the get a string for.
@param buf A buffer to hold the error string.
@param bufsize Size of the buffer to hold the string.

</member>
        <member name="D:apr_status_t">
@defgroup apr_errno Error Codes
@ingroup APR 
@{

Type for specifying an error or status code.

</member>
        <member name="T:SharpSvn.SvnGetRevisionPropertyArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s GetRevisionProperty</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnAddToChangeListArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnAddToChangeListArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.AddToChangeList(System.String,System.String,SharpSvn.SvnAddToChangeListArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnDiffArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnDiffArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s Diff command</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnSwitchArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Switch(System.String,SharpSvn.SvnUriTarget,SharpSvn.SvnSwitchArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnRevertArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnRevertArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Revert(System.String,SharpSvn.SvnRevertArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnMoveArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Move(System.String,System.String,SharpSvn.SvnMoveArgs)" /> and
<see cref="M:SharpSvn.SvnClient.RemoteMove(System.Uri,System.Uri,SharpSvn.SvnMoveArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnCommitArgs.ChangeLists">
            <summary>Gets the list of changelist-names to commit</summary>
        </member>
        <member name="T:SharpSvn.SvnCommitArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Commit(System.String,SharpSvn.SvnCommitArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnCheckOutArgs.AllowObstructions">
            <summary>Gets or sets the AllowObsstructions value</summary>
            <remarks>
                <para> If AllowObstructions is TRUE then the update tolerates
existing unversioned items that obstruct added paths from @a URL.  Only
obstructions of the same type (file or dir) as the added item are
tolerated.  The text of obstructing files is left as-is, effectively
treating it as a user modification after the update.  Working
properties of obstructing items are set equal to the base properties.</para>
                <para>If AllowObstructions is FALSE then the update will abort
if there are any unversioned obstructing items
</para>
            </remarks>
        </member>
        <member name="T:SharpSvn.SvnCheckOutArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.CheckOut(SharpSvn.SvnUriTarget,System.String,SharpSvn.SvnCheckOutArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnBlameArgs.Range">
            <summary>Gets or sets the blame range as <see cref="T:SharpSvn.SvnRevisionRange" /></summary>
        </member>
        <member name="T:SharpSvn.SvnBlameArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Blame(SharpSvn.SvnTarget,SharpSvn.SvnBlameArgs,System.EventHandler`1{SharpSvn.SvnBlameEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnWriteArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Write(SharpSvn.SvnTarget,System.IO.Stream,SharpSvn.SvnWriteArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnRelocateArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Relocate(System.String,System.Uri,System.Uri,SharpSvn.SvnRelocateArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnSetRevisionPropertyArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.SetRevisionProperty(SharpSvn.SvnUriTarget,System.String,SharpSvn.SvnSetRevisionPropertyArgs,System.String)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnInfoArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnInfoArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Info(SharpSvn.SvnTarget,SharpSvn.SvnInfoArgs,System.EventHandler`1{SharpSvn.SvnInfoEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:SharpSvn.SvnClientReporter.WriteLine(System.String)">
            <summary>Writes the specified message to the result writer and appends a <see cref="P:System.Environment.NewLine" /></summary>
        </member>
        <member name="M:SharpSvn.SvnClientReporter.WriteProgress(System.String)">
            <summary>Writes the progress message to the result writer</summary>
            <remarks>The default implementation calls <see cref="M:SharpSvn.SvnClientReporter.Write(System.String)" /> with the specified message</remarks>
        </member>
        <member name="M:SharpSvn.SvnClientReporter.Write(System.String)">
            <summary>Writes the specified message to the result writer</summary>
        </member>
        <member name="T:SharpSvn.SvnClientReporter">
            <summary>Subversion Client Context wrapper; base class of objects using client context</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnRemoveFromChangeListArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnRemoveFromChangeListArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.RemoveFromChangeList(System.String,SharpSvn.SvnRemoveFromChangeListArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnCopyArgs.AlwaysCopyAsChild">
            <summary>Always copies the result to below the target (this behaviour is always used if multiple targets are provided)</summary>
        </member>
        <member name="T:SharpSvn.SvnCopyArgs">
            <summary>Extended Parameter container of SvnClient.Copy(SvnTarget^,String^,SvnCopyArgs^)" /&gt; and
<see cref="M:SharpSvn.SvnClient.RemoteCopy(SharpSvn.SvnTarget,System.Uri,SharpSvn.SvnCopyArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnSetPropertyArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnSetPropertyArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.SetProperty(System.String,System.String,System.String,SharpSvn.SvnSetPropertyArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnDiffMergeArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.DiffMerge(System.String,SharpSvn.SvnTarget,SharpSvn.SvnTarget,SharpSvn.SvnDiffMergeArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnLogArgs.RetrieveProperties">
            <summary>Gets the list of properties to retrieve. Only SVN 1.5+ repositories allow adding custom properties to this list</summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.BaseUri">
            <summary>Gets or sets the base uri to which relative Uri's are relative</summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.OmitMessages">
            <summary>Gets or sets a boolean indicating whether the logmessage should be fetched</summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.IncludeMergedRevisions">
            <summary>Gets or sets a boolean indicating whether the merged revisions should be fetched instead of the node changes</summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.StrictNodeHistory">
            <summary>Gets or sets a boolean indicating whether only the history of this exact node should be fetched (Aka stop on copying)</summary>
            <remarks>If @a StrictNodeHistory is set, copy history (if any exists) will
not be traversed while harvesting revision logs for each target. </remarks>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.LogChangedPaths">
            <summary>Gets or sets a boolean indicating whether the paths changed in the revision should be provided</summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.Limit">
            <summary>Gets or sets the limit on the number of log items fetched</summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.Range">
            <summary>Gets or sets the log range as <see cref="T:SharpSvn.SvnRevisionRange" /></summary>
        </member>
        <member name="P:SharpSvn.SvnLogArgs.OriginRevision">
            <summary>Gets the revision in which the Url's are evaluated (Aka peg revision)</summary>
        </member>
        <member name="M:SharpSvn.SvnLogArgs.#ctor(SharpSvn.SvnRevisionRange)">
            <summary>Initializes a new <see cref="T:SharpSvn.SvnLogArgs" /> instance with the specified range</summary>
        </member>
        <member name="M:SharpSvn.SvnLogArgs.#ctor">
            <summary>Initializes a new <see cref="T:SharpSvn.SvnLogArgs" /> instance with default properties</summary>
        </member>
        <member name="T:SharpSvn.SvnLogArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Log(System.Uri,SharpSvn.SvnLogArgs,System.EventHandler`1{SharpSvn.SvnLogEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnListArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.List(SharpSvn.SvnTarget,SharpSvn.SvnListArgs,System.EventHandler`1{SharpSvn.SvnListEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnGetAppliedMergeInfoArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s GetAppliedMergeInfo method</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnPropertyListArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnPropertyListArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.PropertyList(SharpSvn.SvnTarget,SharpSvn.SvnPropertyListArgs,System.EventHandler`1{SharpSvn.SvnPropertyListEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnGetPropertyArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnGetPropertyArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s GetProperty</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnStatusArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusArgs.IgnoreExternals">
            <summary>Gets or sets a boolean indicating whether externals should be ignored</summary>
            <remarks>
If IgnoreExternals is not set, then recurse into externals
definitions (if any exist) after handling the main target.  This
calls the client notification function (in @a ctx) with the @c
svn_wc_notify_status_external action before handling each externals
definition, and with @c svn_wc_notify_status_completed
after each.
</remarks>
        </member>
        <member name="P:SharpSvn.SvnStatusArgs.ContactRepository">
            <summary>Gets or sets a boolean indicating whether the repository should be contacted to retrieve aut of date information</summary>
            <remarks>
If Update is set, contact the repository and augment the
status structures with information about out-of-dateness (with
respect to @a revision).  Also, if @a result_rev is not @c NULL,
set @a *result_rev to the actual revision against which the
working copy was compared (result_rev is not meaningful unless
update is set
</remarks>
        </member>
        <member name="P:SharpSvn.SvnStatusArgs.GetAll">
            <summary>Gets or sets a boolean indicating whether all status properties should be retrieved</summary>
            <remarks>
If @a get_all is set, retrieve all entries; otherwise,
retrieve only "interesting" entries (local mods and/or
out of date
</remarks>
        </member>
        <member name="T:SharpSvn.SvnStatusArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Status(System.String,SharpSvn.SvnStatusArgs,System.EventHandler`1{SharpSvn.SvnStatusEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnDeleteArgs.Force">
            <summary>If Force is not set then this operation will fail if any path contains locally modified
and/or unversioned items. If Force is set such items will be deleted.</summary>
        </member>
        <member name="T:SharpSvn.SvnDeleteArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Delete(System.String,SharpSvn.SvnDeleteArgs)" /> and <see cref="M:SharpSvn.SvnClient.RemoteDelete(System.Uri,SharpSvn.SvnDeleteArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnMergeArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Merge(System.String,SharpSvn.SvnTarget,SharpSvn.SvnRevisionRange,SharpSvn.SvnMergeArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnExportArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Export(SharpSvn.SvnTarget,System.String,SharpSvn.SvnExportArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnUpdateArgs.AllowObstructions">
            <summary>If @a allow_unver_obstructions is <c>true</c> then the update tolerates
existing unversioned items that obstruct added paths from @a URL</summary>
            <remarks>
Only obstructions of the same type (file or dir) as the added item are
tolerated.  The text of obstructing files is left as-is, effectively
treating it as a user modification after the update.  Working
properties of obstructing items are set equal to the base properties.
If AllowUnversionedObstructions is <c>false</c> then the update will abort
if there are any unversioned obstructing items.
</remarks>
        </member>
        <member name="P:SharpSvn.SvnUpdateArgs.Revision">
            <summary>The revision to update to; None by default</summary>
            <remarks>
Revision must be of kind Number, Head or Date. If Revision
does not meet these requirements, Updated returns the error
SVN_ERR_CLIENT_BAD_REVISION.
</remarks>
        </member>
        <member name="P:SharpSvn.SvnUpdateArgs.IgnoreExternals">
            <summary>Gets or sets a value indicating whether to ignore externals
definitions as part of this operation.</summary>
        </member>
        <member name="P:SharpSvn.SvnUpdateArgs.KeepDepth">
            <summary>
Gets or sets whether in addition to updating paths also the
sticky ambient depth value must be set to depth
</summary>
        </member>
        <member name="P:SharpSvn.SvnUpdateArgs.Depth">
            <summary>Gets or sets the depth of the update</summary>
            <remarks>
                <para>If Depth is Infinity, update fully recursively. Else if it
is Immediates or Files, update each target and its file
entries, but not its subdirectories.  Else if Empty, update
exactly each target, nonrecursively (essentially, update the
target's properties).</para>
                <para>If Depth is Unknown, take the working depth from the specified paths
</para>
            </remarks>
        </member>
        <member name="T:SharpSvn.SvnUpdateArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.Update(System.String,SharpSvn.SvnUpdateArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnCreateDirectoryArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.CreateDirectory(System.String,SharpSvn.SvnCreateDirectoryArgs)" /> and <see cref="M:SharpSvn.SvnClient.RemoteCreateDirectory(System.Uri,SharpSvn.SvnCreateDirectoryArgs)" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnGetAvailableMergeInfoArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s GetAvailableMergeInfo method</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnDiffSummaryArgs.ChangeLists">
            <summary>Gets the list of changelist-names</summary>
        </member>
        <member name="T:SharpSvn.SvnDiffSummaryArgs">
            <summary>Extended Parameter container of <see cref="M:SharpSvn.SvnClient.DiffSummary(SharpSvn.SvnTarget,SharpSvn.SvnTarget,SharpSvn.SvnDiffSummaryArgs,System.EventHandler`1{SharpSvn.SvnDiffSummaryEventArgs^})" /></summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:SharpSvn.SvnRevisionPropertyListArgs">
            <summary>Extended Parameter container of <see cref="T:SharpSvn.SvnClient" />'s GetRevisionPropertyList</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.ConsoleSslClientCertificatePasswordHandler">
            <summary>Console based SslClientCertificatePassword implementation</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.ConsoleSslClientCertificateHandler">
            <summary>Console based SslClientCertificate implementation</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.ConsoleSslServerTrustHandler">
            <summary>Console based SslServerTrust implementation</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.ConsoleUserNamePasswordHandler">
            <summary>Console based UserNamePasswordHandler implementation</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.ConsoleUserNameHandler">
            <summary>Console based UserNameHandler implementation</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionWindowsSslServerTrustHandler">
            <summary>Subversion CryptoApi Ssl Trust handler</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionFileSslClientCertificatePasswordHandler">
            <summary>Subversion SslClientCertificatePassword file backend (managed representation)</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionFileSslClientCertificateHandler">
            <summary>Subversion SslClientCertificate file backend (managed representation)</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionFileSslServerTrustHandler">
            <summary>Subversion SslServerTrust file backend (managed representation)</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionWindowsUserNamePasswordHandler">
            <summary>Subversion UserNameHandler file backend using Windows CryptoStore (managed representation)</summary>
            <remarks>Should be added after <see cref="P:SharpSvn.Security.SvnAuthentication.SubversionFileUserNamePasswordHandler" /></remarks>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionFileUserNamePasswordHandler">
            <summary>Subversion UserNamePasswordHandler file backend (managed representation)</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.SubversionFileUserNameHandler">
            <summary>Subversion UserNameHandler file backend (managed representation)</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthentication.DefaultCredentials">
            <summary>Simple credential handler to provide a static credential</summary>
            <remarks>When set implements a <see cref="E:SharpSvn.Security.SvnAuthentication.UserNameHandlers" /> and <see cref="E:SharpSvn.Security.SvnAuthentication.UserNamePasswordHandlers" /> 
instance over the specified credential instance</remarks>
        </member>
        <member name="M:SharpSvn.Security.SvnAuthentication.AddConsoleHandlers">
            <summary>Adds all default console handlers</summary>
        </member>
        <member name="M:SharpSvn.Security.SvnAuthentication.AddSubversionFileHandlers">
            <summary>Adds all default subversion-configuration-based handlers</summary>
        </member>
        <member name="M:SharpSvn.Security.SvnAuthentication.Clear">
            <summary>Removes all currently registered providers</summary>
        </member>
        <member name="M:SharpSvn.Security.SvnAuthentication.GetAuthorizationBaton(SharpSvn.Implementation.AprPool,System.Int32@)">
            <summary>Retrieves an authorization baton allocated in the specified pool; containing the current authorization settings</summary>
            <summary>Retrieves an authorization baton allocated in the specified pool; containing the current authorization settings</summary>
        </member>
        <member name="T:SharpSvn.Security.SvnAuthentication">
            <summary>Container for all subversion authentication settings on a client</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslClientCertificatePasswordEventArgs.Password">
            <summary>The password to authorize with</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslServerTrustEventArgs.CertificateValue">
            <summary>Text version of the certificate</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslServerTrustEventArgs.Issuer">
            <summary>Issuer value of the certificate</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslServerTrustEventArgs.ValidUntil">
            <summary>Text valid-until value of the certificate</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslServerTrustEventArgs.ValidFrom">
            <summary>Text valid-from value of the certificate</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslServerTrustEventArgs.Fingerprint">
            <summary>Fingerprint name of the certificate</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnSslServerTrustEventArgs.CommonName">
            <summary>Common name of the certificate</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnUserNameEventArgs.UserName">
            <summary>The username to authorize with</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnUserNamePasswordEventArgs.Password">
            <summary>The password to authorize with</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnUserNamePasswordEventArgs.UserName">
            <summary>The username to authorize with</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnUserNamePasswordEventArgs.InitialUserName">
            <summary>Default username; can be NULL</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthenticationEventArgs.Realm">
            <summary>If realm is non-null, maybe use it in the prompt string</summary>
        </member>
        <member name="P:SharpSvn.Security.SvnAuthenticationEventArgs.MaySave">
            <summary>If MaySave is false, the auth system does not allow the credentials
to be saved (to disk). A prompt function shall not ask the user if the
credentials shall be saved if may_save is FALSE. For example, a GUI client
with a remember password checkbox would grey out the checkbox if may_save
is false</summary>
        </member>
        <member name="T:SharpSvn.SvnClientConfigurationException">
            <summary>SharpSvn configuration loader exception</summary>
        </member>
        <member name="T:SharpSvn.SvnClientException">
            <summary>SharpSvn SvnClient exception</summary>
        </member>
        <member name="P:SharpSvn.SvnException.RootCause">
            <summary>Gets the root cause of the exception; commonly the most <see cref="P:System.Exception.InnerException" /></summary>
        </member>
        <member name="P:SharpSvn.SvnException.SvnErrorCode">
            <summary>Gets the raw subversion error code casted to a <see cref="T:SharpSvn.Implementation.SvnErrorCode" /></summary>
        </member>
        <member name="P:SharpSvn.SvnException.SubversionErrorCode">
            <summary>Gets the raw subversion error code</summary>
        </member>
        <member name="T:SharpSvn.Implementation.SvnErrorCode">
 @copyright
 ====================================================================
 Copyright (c) 2000-2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_error_codes.h
 @brief Subversion error codes.

 @copyright
 ====================================================================
 Copyright (c) 2000-2004 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_props.h
 @brief Subversion properties

Collection of Subversion error code values, located within the
 * APR user error space. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_UNKNOWN_CAPABILITY">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RESERVED_FILENAME_SPECIFIED">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_UNKNOWN_CHANGELIST">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_ITER_BREAK">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_REVNUM_PARSE_FAILURE">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_CEASE_INVOCATION">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_MERGEINFO_PARSE_ERROR">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_VERSION_MISMATCH">
@since New in 1.1. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_CLIENT_NOT_READY_TO_MERGE">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_CLIENT_NO_VERSIONED_PARENT">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_CLIENT_MULTIPLE_SOURCES_DISALLOWED">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_CLIENT_MISSING_LOCK_TOKEN">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_CLIENT_UNRELATED_RESOURCES">
@since New in 1.1. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_AUTHZ_UNWRITABLE">
@since New in 1.3 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_AUTHZ_PARTIALLY_READABLE">
@since New in 1.1. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_AUTHZ_UNREADABLE">
@since New in 1.1. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_AUTHN_FAILED">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_SERF_SSPI_INITIALISATION_FAILED">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_SVN_NO_MECHANISMS">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_DAV_RELOCATED">
@since New in 1.5 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_DAV_RESPONSE_HEADER_BADNESS">
@since New in 1.3 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_DAV_MALFORMED_DATA">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_PARTIAL_REPLAY_NOT_SUPPORTED">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_RA_NOT_LOCKED">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_REPOS_UNSUPPORTED_UPGRADE">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_REPOS_POST_UNLOCK_HOOK_FAILED">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_REPOS_POST_LOCK_HOOK_FAILED">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_UNSUPPORTED_UPGRADE">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_NO_SUCH_NODE_ORIGIN">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_TXN_NAME_TOO_LONG">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_REP_BEING_WRITTEN">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_UNSUPPORTED_FORMAT">
@since New in 1.2.
   *
   * This is analogous to SVN_ERR_REPOS_UNSUPPORTED_VERSION.  To avoid
   * confusion with "versions" (i.e., releases) of Subversion, we've
   * started calling this the "format" number instead.  The old
   * SVN_ERR_REPOS_UNSUPPORTED_VERSION error predates this and so
   * retains its name.

</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_OUT_OF_DATE">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_LOCK_EXPIRED">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_NO_SUCH_LOCK">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_LOCK_OWNER_MISMATCH">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_NO_LOCK_TOKEN">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_BAD_LOCK_TOKEN">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_PATH_NOT_LOCKED">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_PATH_ALREADY_LOCKED">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_NO_USER">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_FS_UNKNOWN_FS_TYPE">
@since New in 1.1. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_CHANGELIST_MOVE">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_CONFLICT_RESOLVER_FAILURE">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_MISMATCHED_CHANGELIST">
@since New in 1.5. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_INVALID_SWITCH">
@since New in 1.3. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_INVALID_RELOCATION">
@since New in 1.3. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_INVALID_SCHEDULE">
@since New in 1.2. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_INVALID_LOCK">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_UNWIND_NOT_EMPTY">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_UNWIND_EMPTY">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_WC_UNWIND_MISMATCH">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_IO_PIPE_READ_ERROR">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_IO_PIPE_FRAME_ERROR">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_IO_CORRUPT_EOL">
@deprecated Unused, slated for removal in the next major release. 
</member>
        <member name="F:SharpSvn.Implementation.SvnErrorCode.SVN_ERR_BAD_PROPERTY_VALUE">
@since New in 1.5.
   *
   * Note that there was an unused slot sitting here at
   * SVN_ERR_BAD_CATEGORY_START + 5, so error codes after this aren't
   * necessarily "New in 1.5" just because they come later.

</member>
        <member name="M:SharpSvn.SvnRepositoryClient.RecoverRepository(System.String,SharpSvn.SvnRecoverRepositoryArgs)">
            <summary>Recovers the repository at the specified local path</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.RecoverRepository(System.String)">
            <summary>Recovers the repository at the specified local path</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.DeleteRepository(System.String,SharpSvn.SvnDeleteRepositoryArgs)">
            <summary>Deletes the repository at the specified local path</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.DeleteRepository(System.String)">
            <summary>Deletes the repository at the specified local path</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.CreateRepository(System.String,SharpSvn.SvnCreateRepositoryArgs)">
            <summary>Creates a default repository at the specified local path</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.CreateRepository(System.String)">
            <summary>Creates a default repository at the specified local path</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.FindRepositoryRoot(System.Uri)">
            <summary>Helper which allows splitting file:/// uri's in the repository root and the file within</summary>
        </member>
        <member name="M:SharpSvn.SvnRepositoryClient.#ctor">
            <summary>Initializes a new <see cref="T:SharpSvn.SvnClient" /> instance with default properties</summary>
        </member>
        <member name="T:SharpSvn.SvnRepositoryClient">
            <summary>
Managed wrapper of some of the most common repository management functions.
</summary>
            <remarks>
At this time this class is just included to enable a standalone test framework
over the SvnClient api; without depending on external tools)
</remarks>
        </member>
        <member name="M:SharpSvn.SvnClientArgsWithConflict.OnConflict(SharpSvn.SvnConflictEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClientArgsWithConflict.Conflict" /> event</summary>
        </member>
        <member name="E:SharpSvn.SvnClientArgsWithConflict.Conflict">
            <summary>
Raised on conflict. The event is first
raised on the <see cref="T:SharpSvn.SvnClientArgsWithConflict" /> object and
then on the <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="T:SharpSvn.SvnClientArgsWithConflict">
            <summary>Base class of all <see cref="T:SharpSvn.SvnClient" /> arguments which allow handling conflicts</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnClientArgsWithCommit.LogMessage">
            <summary>Gets or sets the logmessage applied to the commit</summary>
        </member>
        <member name="M:SharpSvn.SvnClientArgsWithCommit.OnCommitting(SharpSvn.SvnCommittingEventArgs)">
            <summary>Applies the <see cref="P:SharpSvn.SvnClientArgsWithCommit.LogMessage" /> and raises the <see cref="E:SharpSvn.SvnClientArgsWithCommit.Committing" /> event</summary>
        </member>
        <member name="E:SharpSvn.SvnClientArgsWithCommit.Committing">
            <summary>Raised just before committing to allow modifying the log message</summary>
        </member>
        <member name="T:SharpSvn.SvnClientArgsWithCommit">
            <summary>Base class of all <see cref="T:SharpSvn.SvnClient" /> arguments which allow committing</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnClientArgs.LastException">
            <summary>
Gets the last exception thrown by a Subversion api command to which this argument was provided
</summary>
        </member>
        <member name="P:SharpSvn.SvnClientArgs.ThrowOnCancel">
            <summary>
Gets or sets a boolean indicating whether the call must throw an error if an exception occurs.
If an exception would occur, the method returns false and the <see cref="T:System.Exception" /> property
is set to the exception which would have been throw.
</summary>
        </member>
        <member name="P:SharpSvn.SvnClientArgs.ThrowOnError">
            <summary>
Gets or sets a boolean indicating whether the call must throw an error if an exception occurs.
If an exception would occur, the method returns false and the <see cref="T:System.Exception" /> property
is set to the exception which would have been throw.
</summary>
        </member>
        <member name="M:SharpSvn.SvnClientArgs.OnSvnError(SharpSvn.SvnErrorEventArgs)">
            <summary>Called when handling a <see cref="T:SharpSvn.SvnException" /></summary>
        </member>
        <member name="M:SharpSvn.SvnClientArgs.OnNotify(SharpSvn.SvnNotifyEventArgs)">
            <summary>Raises the <see cref="E:SharpSvn.SvnClientArgs.Notify" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClientArgs.OnProgress(SharpSvn.SvnProgressEventArgs)">
            <summary>Raises the <see cref="E:SharpSvn.SvnClientArgs.Progress" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClientArgs.OnCancel(SharpSvn.SvnCancelEventArgs)">
            <summary>Raises the <see cref="E:SharpSvn.SvnClientArgs.Cancel" /> event</summary>
        </member>
        <member name="E:SharpSvn.SvnClientArgs.SvnError">
            <summary>Raised to notify errors from an command</summary>
        </member>
        <member name="E:SharpSvn.SvnClientArgs.Notify">
            <summary>Raised to notify changes by an in-progress command</summary>
        </member>
        <member name="E:SharpSvn.SvnClientArgs.Progress">
            <summary>Raised to notify of progress by an in-progress command</summary>
        </member>
        <member name="E:SharpSvn.SvnClientArgs.Cancel">
            <summary>Raised to allow canceling an in-progress command</summary>
        </member>
        <member name="T:SharpSvn.SvnClientArgs">
            <summary>Base class of all <see cref="T:SharpSvn.SvnClient" /> arguments</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:SharpSvn.SvnClient.GetRepositoryIdFromUri(System.Uri,System.Guid@)">
            <summary>Gets the Uuid of a Uri, or <see cref="F:System.Guid.Empty" /> if path is not versioned</summary>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:SharpSvn.SvnClient.GetRepositoryRoot(System.String)">
            <summary>Gets the repository root from the specified path</summary>
            <value>The repository root <see cref="T:System.Uri" /> or <c>null</c> if the uri is not a working copy path</value>
            <remarks>SharpSvn makes sure the uri ends in a '/'</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.GetRepositoryRoot(System.Uri)">
            <overloads>Gets the repository root from the specified uri or path</overloads>
            <summary>Gets the repository root from the specified uri</summary>
            <value>The repository root <see cref="T:System.Uri" /> or <c>null</c> if the uri is not a repository uri</value>
            <remarks>SharpSvn makes sure the uri ends in a '/'</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.GetUriFromWorkingCopy(System.String)">
            <summary>Gets the repository Uri of a path, or <c>null</c> if path is not versioned</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetBlame(SharpSvn.SvnTarget,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnBlameEventArgs^}@)">
            <overloads>Retrieve the content of specified files or URLs with revision and author information per-line (<c>svn blame</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Blame(SharpSvn.SvnTarget,System.EventHandler`1{SharpSvn.SvnBlameEventArgs^})">
            <overloads>Streamingly retrieve the content of specified files or URLs with revision and author information per-line (<c>svn blame</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.GetAvailableMergeInfo(SharpSvn.SvnTarget,System.Uri,SharpSvn.SvnGetAvailableMergeInfoArgs,SharpSvn.SvnAvailableMergeInfo@)">
            <summary>Gets a list of merges which can be applied on target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetAvailableMergeInfo(SharpSvn.SvnTarget,System.Uri,SharpSvn.SvnAvailableMergeInfo@)">
            <overloads>Gets a list of available merges which can be applied on the specified target (<c>svn mergeinfo</c>)</overloads>
            <summary>Gets a list of merges which can be applied on target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetAppliedMergeInfo(SharpSvn.SvnTarget,SharpSvn.SvnGetAppliedMergeInfoArgs,SharpSvn.SvnAppliedMergeInfo@)">
            <summary>Gets the merges which are applied on the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetAppliedMergeInfo(SharpSvn.SvnTarget,SharpSvn.SvnAppliedMergeInfo@)">
            <overloads>Gets the merges which are applied on the specified target (<c>svn mergeinfo</c>)</overloads>
            <summary>Gets the merges which are applied on the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetSuggestedMergeSources(SharpSvn.SvnTarget,SharpSvn.SvnGetSuggestedMergeSourcesArgs,SharpSvn.SvnMergeSourcesCollection@)">
            <summary>Gets a list of Uri's which might be valid merge sources</summary>
            <remarks>The list contains copy-from locations and previous merge locations</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.GetSuggestedMergeSources(SharpSvn.SvnTarget,SharpSvn.SvnMergeSourcesCollection@)">
            <overloads>Gets a list of Uri's which might be valid merge sources (<c>svn mergeinfo</c>)</overloads>
            <summary>Gets a list of Uri's which might be valid merge sources</summary>
            <remarks>The list contains copy-from locations and previous merge locations</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.GetChangeList(System.String,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnListChangeListEventArgs^}@)">
            <overloads>Gets the contents of the specified changelist below a specified directory (<c>svn changelist</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.ListChangeList(System.String,System.EventHandler`1{SharpSvn.SvnListChangeListEventArgs^})">
            <overloads>Streamingly gets the contents of the specified changelist below a specified directory (<c>svn changelist</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoveFromChangeList(System.String)">
            <overloads>Deassociate the specified path(s) from the specified changelist (<c>svn changelist</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.AddToChangeList(System.String,System.String)">
            <overloads>Associate the specified path(s) with the specified changelist (<c>svn changelist</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.GetDiffSummary(SharpSvn.SvnTarget,SharpSvn.SvnTarget,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnDiffSummaryEventArgs^}@)">
            <overloads>Retrieves the differences between two revisions or paths (<c>svn diff --summarize</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.DiffSummary(SharpSvn.SvnTarget,SharpSvn.SvnTarget,System.EventHandler`1{SharpSvn.SvnDiffSummaryEventArgs^})">
            <overloads>Streamingly retrieves the differences between two revisions or paths (<c>svn diff --summarize</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Diff(SharpSvn.SvnTarget,SharpSvn.SvnTarget,System.IO.Stream)">
            <overloads>Retrieves the differences between two revisions or paths (<c>svn diff</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.ReintegrationMerge(System.String,SharpSvn.SvnTarget)">
            <overloads>Perform a reintegration merge of source into targetPath</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Merge(System.String,SharpSvn.SvnTarget,SharpSvn.SvnRevisionRange)">
            <overloads>Merges the changes in the specified revisions from source to targetPath</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.DiffMerge(System.String,SharpSvn.SvnTarget,SharpSvn.SvnTarget,SharpSvn.SvnDiffMergeArgs)">
            <summary>
Merges the changes from <paramref name="mergeFrom" /> to <paramref name="mergeTo" /> into <paramRef name="targetPath" /></summary>
        </member>
        <member name="M:SharpSvn.SvnClient.DiffMerge(System.String,SharpSvn.SvnTarget,SharpSvn.SvnTarget)">
            <overloads>Merges the differences between two sources to a working copy path (<c>svn merge</c>)</overloads>
            <summary>
Merges the changes from <paramref name="mergeFrom" /> to <paramref name="mergeTo" /> into <paramRef name="targetPath" /></summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetRevisionPropertyList(SharpSvn.SvnUriTarget,SharpSvn.SvnPropertyCollection@)">
            <overloads>Gets all revision properties on a a specific revision (<c>svn proplist --revision</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.GetRevisionProperty(SharpSvn.SvnUriTarget,System.String,System.String@)">
            <overloads>Gets the value of a revision property on files or dirs in a specific revision (<c>svn propget --revision</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.DeleteRevisionProperty(SharpSvn.SvnUriTarget,System.String)">
            <overloads>Deletes the value of a revision property on files, dirs in a specific revision(<c>svn propdel --revision</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.SetRevisionProperty(SharpSvn.SvnUriTarget,System.String,System.String)">
            <overloads>Sets the value of a revision property on files, dirs in a specific revision (<c>svn propset --revision</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.GetPropertyList(SharpSvn.SvnTarget,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnPropertyListEventArgs^}@)">
            <overloads>Gets all properties on files or dirs (<c>svn proplist</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.PropertyList(SharpSvn.SvnTarget,System.EventHandler`1{SharpSvn.SvnPropertyListEventArgs^})">
            <overloads>Streamingly lists all properties on files or dirs (<c>svn proplist</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.TryGetProperty(SharpSvn.SvnTarget,System.String,System.String@)">
            <summary>Tries to get a property from the specified path (<c>svn propget</c>)</summary>
            <remarks>Eats all (non-argument) exceptions</remarks>
            <returns>True if the property is fetched, otherwise false</returns>
            <remarks>Equivalent to GetProperty with <see cref="T:SharpSvn.SvnGetPropertyArgs" />'s ThrowOnError set to false</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.GetProperty(SharpSvn.SvnTarget,System.String,SharpSvn.SvnGetPropertyArgs,SharpSvn.SvnTargetPropertyCollection@)">
            <summary>Sets the specified property on the specfied path to value</summary>
            <remarks>Use <see cref="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String,SharpSvn.SvnSetPropertyArgs)" /> to remove an existing property</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.GetProperty(SharpSvn.SvnTarget,System.String,SharpSvn.SvnPropertyValue@)">
            <summary>Gets the specified property from the specfied path</summary>
            <returns>true if property is set, otherwise false</returns>
            <exception type="SvnException">path is not a valid workingcopy path</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.GetProperty(SharpSvn.SvnTarget,System.String,System.String@)">
            <overloads>Retrieves the value of a property on files, dirs, or revisions (<c>svn propget</c>)</overloads>
            <summary>Gets the specified property from the specfied path</summary>
            <returns>true if property is set, otherwise false</returns>
            <exception type="SvnException">path is not a valid workingcopy path</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String,SharpSvn.SvnSetPropertyArgs)">
            <summary>Removes the specified property from the specfied path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String)">
            <overloads>Deletes a property from files, dirs (<c>svn propdel</c>)</overloads>
            <summary>Removes the specified property from the specfied path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.SetProperty(System.String,System.String,System.Collections.Generic.ICollection`1{System.Byte},SharpSvn.SvnSetPropertyArgs)">
            <summary>Sets the specified property on the specfied path to value</summary>
            <remarks>Use <see cref="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String,SharpSvn.SvnSetPropertyArgs)" /> to remove an existing property</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.SetProperty(System.String,System.String,System.String,SharpSvn.SvnSetPropertyArgs)">
            <summary>Sets the specified property on the specfied path to value</summary>
            <remarks>Use <see cref="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String,SharpSvn.SvnSetPropertyArgs)" /> to remove an existing property</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.SetProperty(System.String,System.String,System.Collections.Generic.ICollection`1{System.Byte})">
            <summary>Sets the specified property on the specfied path to value</summary>
            <remarks>Use <see cref="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String,SharpSvn.SvnSetPropertyArgs)" /> to remove an existing property</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.SetProperty(System.String,System.String,System.String)">
            <overloads>Set the value of a property on files, dirs (<c>svn propset</c>)</overloads>
            <summary>Sets the specified property on the specfied path to value</summary>
            <remarks>Use <see cref="M:SharpSvn.SvnClient.DeleteProperty(System.String,System.String,SharpSvn.SvnSetPropertyArgs)" /> to remove an existing property</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Unlock(System.String)">
            <overloads>Unlock working copy paths or URLs (<c>svn unlock</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Lock(System.String,System.String)">
            <overloads>Lock working copy paths or URLs in the repository, so that no other user can commit changes to them (<c>svn lock</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteMove(System.Uri,System.Uri)">
            <overloads>Move and/or rename something in repository, remembering history (<c>svn move</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Move(System.String,System.String)">
            <overloads>Move and/or rename something in working copy, remembering history (<c>svn move</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteCopy(SharpSvn.SvnTarget,System.Uri)">
            <overloads>Duplicate something in repository, remembering history (<c>svn copy</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Copy(SharpSvn.SvnTarget,System.String)">
            <overloads>Duplicate something in working copy, remembering history (<c>svn copy</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.CleanUp(System.String,SharpSvn.SvnCleanUpArgs)">
            <summary>Cleans up the specified path, removing all workingcopy locks left behind by crashed clients</summary>
            <returns>true if the operation succeeded; false if it did not</returns>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.CleanUp(System.String)">
            <overloads> Recursively clean up the working copy, removing locks, resuming unfinished operations, etc.(<c>svn cleanup</c>)</overloads>
            <summary>Cleans up the specified path, removing all workingcopy locks left behind by crashed clients</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Resolved(System.String,SharpSvn.SvnResolvedArgs)">
            <overloads>Remove 'conflicted' state on working copy files or directories (<c>svn resolved</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Resolved(System.String,SharpSvn.SvnConflictChoice)">
            <overloads>Remove 'conflicted' state on working copy files or directories using the specified choice</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Resolved(System.String)">
            <overloads>Remove 'conflicted' state on working copy files or directories (<c>svn resolved</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Revert(System.String)">
            <overloads>Restore pristine working copy file (undo most local edits) (<c>svn revert</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Commit(System.String)">
            <overloads>Send changes from your working copy to the repository (<c>svn commit</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteImport(System.String,System.Uri,SharpSvn.SvnImportArgs,SharpSvn.SvnCommitResult@)">
            <summary>Importing as the subversion api does; without creating a working directory</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteImport(System.String,System.Uri,SharpSvn.SvnImportArgs)">
            <summary>Importing as the subversion api does; without creating a working directory</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteImport(System.String,System.Uri,SharpSvn.SvnCommitResult@)">
            <summary>Importing as the subversion api does; without creating a working directory</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteImport(System.String,System.Uri)">
            <overloads>Commit an unversioned file or tree into the repository (<c>svn import</c>)</overloads>
            <summary>Importing as the subversion api does; without creating a working directory</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Import(System.String,System.Uri,SharpSvn.SvnImportArgs,SharpSvn.SvnCommitResult@)">
            <summary>Performs a working copy import to the specified Uri,
by importing the root remotely, checking that out and then adding the files locally</summary>
            <remarks>Implemented as an Add follwed by an obstructed checkout</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Import(System.String,System.Uri,SharpSvn.SvnImportArgs)">
            <summary>Performs a working copy import to the specified Uri,
by importing the root remotely, checking that out and then adding the files locally</summary>
            <remarks>Implemented as an Add follwed by an obstructed checkout</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Import(System.String,System.Uri,SharpSvn.SvnCommitResult@)">
            <summary>Performs a working copy import to the specified Uri,
by importing the root remotely, checking that out and then adding the files locally</summary>
            <remarks>Implemented as an Add follwed by an obstructed checkout</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Import(System.String,System.Uri)">
            <overloads>Commit an unversioned file or tree into the repository (<c>svn import</c> followed by <c>svn checkout</c>)</overloads>
            <summary>Performs a working copy import to the specified Uri,
by importing the root remotely, checking that out and then adding the files locally</summary>
            <remarks>Implemented as an Add follwed by an obstructed checkout</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteDelete(System.Uri)">
            <overloads>Remove files and directories from version control at the repository (<c>svn delete|remove</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Delete(System.String)">
            <overloads>Remove files and directories from version control, scheduling (<c>svn delete|remove</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.RemoteCreateDirectory(System.Uri)">
            <overloads>Create a new directory under version control at the repository (<c>svn mkdir</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.CreateDirectory(System.String)">
            <overloads>Create a new directory under version control, scheduling (<c>svn mkdir</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.GetInfo(SharpSvn.SvnTarget,SharpSvn.SvnInfoArgs,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnInfoEventArgs^}@)">
            <summary>Gets information about the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetInfo(SharpSvn.SvnTarget,SharpSvn.SvnInfoEventArgs@)">
            <summary>Gets information about the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Info(SharpSvn.SvnTarget,SharpSvn.SvnInfoArgs,System.EventHandler`1{SharpSvn.SvnInfoEventArgs^})">
            <summary>Gets information about the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Info(SharpSvn.SvnTarget,System.EventHandler`1{SharpSvn.SvnInfoEventArgs^})">
            <overloads>Streamingly retrieves information about a local or remote item (<c>svn info</c>)</overloads>
            <summary>Gets information about the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetList(SharpSvn.SvnTarget,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnListEventArgs^}@)">
            <overloads>Gets a list of directory entries in the repository. (<c>svn list</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.List(SharpSvn.SvnTarget,System.EventHandler`1{SharpSvn.SvnListEventArgs^})">
            <overloads>Streamingly lists directory entries in the repository. (<c>svn list</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Write(SharpSvn.SvnTarget,System.IO.Stream)">
            <overloads>Writes the content of specified files or URLs to a stream. (<c>svn cat</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.GetLog(System.Collections.Generic.ICollection`1{System.String^},SharpSvn.SvnLogArgs,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnLogEventArgs^}@)">
            <summary>Gets log messages of the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetLog(System.Collections.Generic.ICollection`1{System.Uri^},SharpSvn.SvnLogArgs,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnLogEventArgs^}@)">
            <summary>Gets log messages of the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetLog(System.String,SharpSvn.SvnLogArgs,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnLogEventArgs^}@)">
            <summary>Gets log messages of the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetLog(System.Uri,SharpSvn.SvnLogArgs,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnLogEventArgs^}@)">
            <summary>Gets log messages of the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetLog(SharpSvn.SvnTarget,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnLogEventArgs^}@)">
            <overloads>Retrieve the log messages for a set of revision(s) and/or file(s). (<c>svn log</c>)</overloads>
            <summary>Gets log messages of the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Log(System.Collections.Generic.ICollection`1{System.String^},SharpSvn.SvnLogArgs,System.EventHandler`1{SharpSvn.SvnLogEventArgs^})">
            <summary>Gets log messages of the specified target path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Log(System.Collections.Generic.ICollection`1{System.Uri^},SharpSvn.SvnLogArgs,System.EventHandler`1{SharpSvn.SvnLogEventArgs^})">
            <summary>Gets log messages of the specified target path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Log(System.String,SharpSvn.SvnLogArgs,System.EventHandler`1{SharpSvn.SvnLogEventArgs^})">
            <summary>Gets log messages of the specified target</summary>
            <remarks>A pegrevision applied on the target overrides one set on the args object</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Log(System.Uri,SharpSvn.SvnLogArgs,System.EventHandler`1{SharpSvn.SvnLogEventArgs^})">
            <summary>Gets log messages of the specified target</summary>
            <remarks>A pegrevision applied on the target overrides one set on the args object</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Log(SharpSvn.SvnTarget,System.EventHandler`1{SharpSvn.SvnLogEventArgs^})">
            <overloads>Streamingly retrieve the log messages for a set of revision(s) and/or file(s). (<c>svn log</c>)</overloads>
            <summary>Gets log messages of the specified target</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetStatus(System.String,SharpSvn.SvnStatusArgs,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnStatusEventArgs^}@)">
            <summary>Gets a list of status data for the specified path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.GetStatus(System.String,System.Collections.ObjectModel.Collection`1{SharpSvn.SvnStatusEventArgs^}@)">
            <summary>Recursively gets a list of 'interesting' status data for the specified path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Status(System.String,SharpSvn.SvnStatusArgs,System.EventHandler`1{SharpSvn.SvnStatusEventArgs^})">
            <summary>Gets status data for the specified path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Status(System.String,System.EventHandler`1{SharpSvn.SvnStatusEventArgs^})">
            <overloads>Retrieve the status of working copy files and directories (<c>svn status</c>)</overloads>
            <summary>Recursively gets 'interesting' status data for the specified path</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.Add(System.String,SharpSvn.SvnAddArgs)">
            <summary>Adds the specified path</summary>
            <returns>true if the operation succeeded; false if it did not</returns>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Add(System.String,SharpSvn.SvnDepth)">
            <summary>Adds the specified path</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Add(System.String)">
            <overloads>Put files and directories under version control, scheduling them for addition to repository.
They will be added in next commit(<c>svn add</c>)</overloads>
            <summary>Recursively adds the specified path</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Relocate(System.String,System.Uri,System.Uri)">
            <overloads>Update the working copy to a different repository (<c>svn switch --relocate</c>)</overloads>
        </member>
        <member name="M:SharpSvn.SvnClient.Switch(System.String,SharpSvn.SvnUriTarget,SharpSvn.SvnSwitchArgs,SharpSvn.SvnUpdateResult@)">
            <summary>Switches a path recursively to the specified target</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Switch(System.String,SharpSvn.SvnUriTarget,SharpSvn.SvnSwitchArgs)">
            <summary>Switches a path recursively to the specified target</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Switch(System.String,SharpSvn.SvnUriTarget,SharpSvn.SvnUpdateResult@)">
            <summary>Switches a path recursively to the specified target</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Switch(System.String,SharpSvn.SvnUriTarget)">
            <overloads>Update the working copy to a different URL (<c>svn switch</c>)</overloads>
            <summary>Switches a path recursively to the specified target</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Export(SharpSvn.SvnTarget,System.String,SharpSvn.SvnExportArgs,SharpSvn.SvnUpdateResult@)">
            <summary>Exports the specified target to the specified path</summary>
            <remarks>Subversion optimizes this call if you specify a workingcopy file instead of an url</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Export(SharpSvn.SvnTarget,System.String,SharpSvn.SvnExportArgs)">
            <summary>Exports the specified target to the specified path</summary>
            <remarks>Subversion optimizes this call if you specify a workingcopy file instead of an url</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Export(SharpSvn.SvnTarget,System.String,SharpSvn.SvnUpdateResult@)">
            <summary>Recursively exports the specified target to the specified path</summary>
            <remarks>Subversion optimizes this call if you specify a workingcopy file instead of an url</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Export(SharpSvn.SvnTarget,System.String)">
            <overloads>Create an unversioned copy of a tree (<c>svn export</c>)</overloads>
            <summary>Recursively exports the specified target to the specified path</summary>
            <remarks>Subversion optimizes this call if you specify a workingcopy file instead of an url</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.Collections.Generic.ICollection`1{System.String^},SharpSvn.SvnUpdateArgs,SharpSvn.SvnUpdateResult@)">
            <summary>Updates the specified paths to the specified revision</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
            <returns>true if the operation succeeded; false if it did not</returns>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.Collections.Generic.ICollection`1{System.String^},SharpSvn.SvnUpdateArgs)">
            <summary>Updates the specified paths to the specified revision</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
            <returns>true if the operation succeeded; false if it did not</returns>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.Collections.Generic.ICollection`1{System.String^},SharpSvn.SvnUpdateResult@)">
            <summary>Recursively updates the specified paths to the latest (HEAD) revision</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.Collections.Generic.ICollection`1{System.String^})">
            <summary>Recursively updates the specified paths to the latest (HEAD) revision</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.String,SharpSvn.SvnUpdateArgs,SharpSvn.SvnUpdateResult@)">
            <summary>Recursively updates the specified path to the latest (HEAD) revision</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.String,SharpSvn.SvnUpdateArgs)">
            <summary>Recursively updates the specified path</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.String,SharpSvn.SvnUpdateResult@)">
            <summary>Recursively updates the specified path to the latest (HEAD) revision</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.Update(System.String)">
            <overloads>Bring changes from the repository into the working copy (<c>svn update</c>)</overloads>
            <summary>Recursively updates the specified path to the latest (HEAD) revision</summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.CheckOut(SharpSvn.SvnUriTarget,System.String,SharpSvn.SvnCheckOutArgs,SharpSvn.SvnUpdateResult@)">
            <summary>Performs a checkout of <paramref name="url" /> to <paramref name="path" /> to the specified param</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
            <returns>true if the operation succeeded; false if it did not</returns>
        </member>
        <member name="M:SharpSvn.SvnClient.CheckOut(SharpSvn.SvnUriTarget,System.String,SharpSvn.SvnCheckOutArgs)">
            <summary>Performs a checkout of <paramref name="url" /> to <paramref name="path" /> to the specified param</summary>
            <exception type="SvnException">Operation failed and args.ThrowOnError = true</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
            <returns>true if the operation succeeded; false if it did not</returns>
        </member>
        <member name="M:SharpSvn.SvnClient.CheckOut(SharpSvn.SvnUriTarget,System.String,SharpSvn.SvnUpdateResult@)">
            <summary>Performs a recursive checkout of <paramref name="url" /> to <paramref name="path" /></summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.CheckOut(SharpSvn.SvnUriTarget,System.String)">
            <overloads>Check out a working copy from a repository. (<c>svn checkout</c>)</overloads>
            <summary>Performs a recursive checkout of <paramref name="url" /> to <paramref name="path" /></summary>
            <exception type="SvnException">Operation failed</exception>
            <exception type="ArgumentException">Parameters invalid</exception>
        </member>
        <member name="M:SharpSvn.SvnClient.OnProcessing(SharpSvn.SvnProcessingEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClient.Processing" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.OnSvnError(SharpSvn.SvnErrorEventArgs)">
            <summary>Invokes the <see cref="T:System.Exception" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.OnConflict(SharpSvn.SvnConflictEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClient.Conflict" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.OnNotify(SharpSvn.SvnNotifyEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClient.Notify" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.OnCommitting(SharpSvn.SvnCommittingEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClient.Committing" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.OnProgress(SharpSvn.SvnProgressEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClient.Progress" /> event</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.OnCancel(SharpSvn.SvnCancelEventArgs)">
            <summary>Invokes the <see cref="E:SharpSvn.SvnClient.Cancel" /> event</summary>
        </member>
        <member name="E:SharpSvn.SvnClient.Processing">
            <summary>
Raised just before a command is executed. The provided <see cref="T:SharpSvn.SvnClientArgs" />
object MUST BE threated as read only. Handling this command allows
<see cref="T:SharpSvn.SvnClientReporter" /> to provide full command output.
</summary>
        </member>
        <member name="E:SharpSvn.SvnClient.SvnError">
            <summary>
Raised when a subversion exception occurs.
Set <see cref="P:SharpSvn.SvnCancelEventArgs.Cancel" /> to true to cancel
throwing the exception
</summary>
        </member>
        <member name="E:SharpSvn.SvnClient.Conflict">
            <summary>
Raised on conflict. The event is first
raised on the <see cref="T:SharpSvn.SvnClientArgsWithConflict" /> object and
then on the <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="E:SharpSvn.SvnClient.Committing">
            <summary>
Raised on progress. The event is first
raised on the <see cref="T:SharpSvn.SvnClientArgsWithCommit" /> object and
then on the <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="E:SharpSvn.SvnClient.Notify">
            <summary>
Raised on notifications. The event is first
raised on the <see cref="T:SharpSvn.SvnClientArgs" /> object and
then on the <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="E:SharpSvn.SvnClient.Progress">
            <summary>
Raised on progress. The event is first
raised on the <see cref="T:SharpSvn.SvnClientArgs" /> object and
then on the <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="E:SharpSvn.SvnClient.Cancel">
            <summary>
Raised to allow canceling operations. The event is first
raised on the <see cref="T:SharpSvn.SvnClientArgs" /> object and
then on the <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="P:SharpSvn.SvnClient.Configuration">
            <summary>Gets the <see cref="T:SharpSvn.SvnClientConfiguration" /> instance of this <see cref="T:SharpSvn.SvnClient" /></summary>
        </member>
        <member name="P:SharpSvn.SvnClient.AdministrativeDirectoryName">
            <summary>
Gets the name of the subversion administrative directories. Most commonly ".svn"
</summary>
            <remarks>
An internal implementation of a setter is available on this property. Users should read
the subversion implementation of svn_wc_set_adm_dir before invoking the setter of this property
via reflection
</remarks>
        </member>
        <member name="M:SharpSvn.SvnClient.AddClientName(System.String,System.Version)">
            <summary>Adds the specified client name to web requests' UserAgent string</summary>
            <remarks>The name is filtered to be unique and conformant for the webrequest. Clients should use only alphanumerical ascii characters</remarks>
        </member>
        <member name="P:SharpSvn.SvnClient.SharpSvnVersion">
            <summary>Gets the version of the SharpSvn library</summary>
        </member>
        <member name="P:SharpSvn.SvnClient.Version">
            <summary>Gets the version number of SharpSvn's encapsulated subversion library</summary>
        </member>
        <member name="M:SharpSvn.SvnClient.#ctor">
            <summary>Initializes a new <see cref="T:SharpSvn.SvnClient" /> instance with default properties</summary>
        </member>
        <member name="T:SharpSvn.SvnClient">
            <summary>Subversion client instance; main entrance to the Subversion Client api</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:SharpSvn.SvnPropertyValue.Target">
            <summary>Gets the <see cref="T:SharpSvn.SvnTarget" /> the <see cref="T:SharpSvn.SvnPropertyValue" /> applies to;
<c>null</c> if it applies to a revision property</summary>
        </member>
        <member name="P:SharpSvn.SvnClientConfiguration.EnableSharpPlink">
            <summary>Gets or sets a boolean indicating whether to enable the SharpPlink handler when no other valid 
handler for svn+ssh:// is registered</summary>
            <remarks>The default value of this property is true; this matches the behaviour of TortoiseSvn</remarks>
            <value>true if enabling SharpPlink on the first repository request, otherwise false</value>
        </member>
        <member name="P:SharpSvn.SvnClientConfiguration.LoadSvnMimeTypes">
            <summary>Gets or sets a boolean indicating whether to load the svn mimetypes file when calling Add or Import the first time</summary>
            <remarks>The default value of this property is true; this matches the behaviour of the svn commandline client</remarks>
            <value>true if loading the mimetypes file on the initial import, otherwise false</value>
        </member>
        <member name="P:SharpSvn.SvnClientConfiguration.LogMessageRequired">
            <summary>Gets or sets a boolean indicating whether commits will fail if no log message is provided</summary>
            <remarks>The default value of this property is true</remarks>
        </member>
        <member name="P:SharpSvn.SvnAvailableMergeInfo.Target">
            <summary>Gets a boolean indicating whether MergeInfo is available for the specified target</summary>
        </member>
        <member name="P:SharpSvn.SvnAppliedMergeInfo.AppliedMerges">
            <summary>Gets a boolean indicating whether MergeInfo is available for the specified target</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.RemoteUpdateNodeKind">
            <summary>Out of Date: Gets the node kind of the OutOfDate commit</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.RemoteUpdateCommitAuthor">
            <summary>Out of Date: Gets the author of the OutOfDate commit</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.RemoteUpdateCommitTime">
            <summary>Out of Date: Last commit date of the item</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.RemoteUpdateRevision">
            <summary>Out of Date: Last commit version of the item</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.IsRemoteUpdated">
            <summary>Gets the out of date status of the item; if true the RemoteUpdate* properties are set</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.Switched">
            <summary>Gets a boolean indicating whether the file is switched in the working copy</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.LocalCopied">
            <summary>Gets a boolean indicating whether the file is copied in the working copy</summary>
            <remarks>A file or directory can be 'copied' if it's scheduled for addition-with-history
(or part of a subtree that is scheduled as such.).</remarks>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.LocalLocked">
            <summary>Gets a boolean indicating whether the workingcopy is locked</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.LocalPropertyStatus">
            <summary>Property status in working copy</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.LocalContentStatus">
            <summary>Content status in working copy</summary>
        </member>
        <member name="P:SharpSvn.SvnStatusEventArgs.FullPath">
            <summary>The path the notification is about, translated via <see cref="M:System.IO.Path.GetFullPath(System.String)" /></summary>
            <remarks>The <see cref="P:SharpSvn.SvnStatusEventArgs.FullPath" /> property contains the path in normalized format; while <see cref="P:SharpSvn.SvnStatusEventArgs.Path" /> returns the exact path from the subversion api</remarks>
        </member>
        <member name="P:SharpSvn.SvnLogEventArgs.LogOrigin">
            <summary>Gets the log origin SharpSvn used for retrieving the logfile</summary>
        </member>
        <member name="P:SharpSvn.SvnLogEventArgs.MergeLogNestingLevel">
            <summary>Gets the nesting level of the logs via merges</summary>
        </member>
        <member name="P:SharpSvn.SvnLogEventArgs.HasChildren">
            <summary>Set to true when the following items are merged-child items of this item.</summary>
        </member>
        <member name="P:SharpSvn.SvnLogEventArgs.CustomProperties">
            <summary>Gets the list of custom properties retrieved with the log</summary>
            <remarks>Properties must be listed in SvnLogArgs.RetrieveProperties to be available here</remarks>
        </member>
        <member name="P:SharpSvn.SvnListEventArgs.BasePath">
            <summary>Gets the origin path of the item</summary>
        </member>
        <member name="P:SharpSvn.SvnListEventArgs.Path">
            <summary>Gets the path of the item</summary>
        </member>
        <member name="P:SharpSvn.SvnDirEntry.Author">
            <summary>Gets the author of the last revision of this file</summary>
        </member>
        <member name="P:SharpSvn.SvnDirEntry.Time">
            <summary>Gets the time of the last change</summary>
        </member>
        <member name="P:SharpSvn.SvnDirEntry.Revision">
            <summary>Gets the last revision in which this node changed</summary>
        </member>
        <member name="P:SharpSvn.SvnDirEntry.HasProperties">
            <summary>Gets a boolean indicating whether this node has svn properties</summary>
        </member>
        <member name="P:SharpSvn.SvnDirEntry.FileSize">
            <summary>Gets the length of the file text or 0 for directories</summary>
        </member>
        <member name="P:SharpSvn.SvnInfoEventArgs.RepositoryRoot">
            <summary>Gets the repository root Uri; ending in a '/' at the end</summary>
            <remarks>The unmanaged api does not add the '/' at the end, but this makes using <see cref="T:System.Uri" /> hard</remarks>
        </member>
        <member name="P:SharpSvn.SvnInfoEventArgs.FullPath">
            <summary>The path the notification is about, translated via <see cref="M:System.IO.Path.GetFullPath(System.String)" /></summary>
            <remarks>The <see cref="P:SharpSvn.SvnInfoEventArgs.FullPath" /> property contains the path in normalized format; while <see cref="P:SharpSvn.SvnInfoEventArgs.Path" /> returns the exact path from the subversion api</remarks>
        </member>
        <member name="M:SharpSvn.SvnNotifyEventArgs.Detach(System.Boolean)">
            <summary>Detaches the SvnEventArgs from the unmanaged storage; optionally keeping the property values for later use</summary>
            <description>After this method is called all properties are either stored managed, or are no longer readable</description>
        </member>
        <member name="P:SharpSvn.SvnNotifyEventArgs.PathIsUri">
            <summary>Gets a boolean indicating whether the path is a Uri</summary>
        </member>
        <member name="P:SharpSvn.SvnNotifyEventArgs.FullPath">
            <summary>The path the notification is about, translated via <see cref="M:System.IO.Path.GetFullPath(System.String)" /></summary>
            <remarks>The <see cref="P:SharpSvn.SvnNotifyEventArgs.FullPath" /> property contains the path in normalized format; while <see cref="P:SharpSvn.SvnNotifyEventArgs.Path" /> returns the exact path from the subversion api</remarks>
        </member>
        <member name="P:SharpSvn.SvnNotifyEventArgs.Path">
            <summary>The path the notification is about</summary>
            <remarks>The <see cref="P:SharpSvn.SvnNotifyEventArgs.FullPath" /> property contains the path in normalized format; while <see cref="P:SharpSvn.SvnNotifyEventArgs.Path" /> returns the exact path from the subversion api</remarks>
        </member>
        <member name="P:SharpSvn.SvnLockInfo.IsRawNetworkComment">
            <summary>Gets a boolean indicating whether the Comment was generated by a Generic WebDav client</summary>
        </member>
        <member name="P:SharpSvn.SvnLockInfo.FullPath">
            <summary>The path the notification is about, translated via <see cref="M:System.IO.Path.GetFullPath(System.String)" /></summary>
            <remarks>The <see cref="P:SharpSvn.SvnLockInfo.FullPath" /> property contains the path in normalized format; while <see cref="P:SharpSvn.SvnLockInfo.Path" /> returns the exact path from the subversion api</remarks>
        </member>
        <member name="M:SharpSvn.SvnEventArgs.Detach(System.Boolean)">
            <summary>Detaches the SvnEventArgs from the unmanaged storage; optionally keeping the property values for later use</summary>
            <description>After this method is called all properties are either stored managed, or are no longer readable</description>
        </member>
        <member name="M:svn_compat_wrap_log_receiver(=FUNC:svn_error_t*(System.Void*,svn_log_entry_t*,apr_pool_t*)*,System.Void**,=FUNC:svn_error_t*(System.Void*,apr_hash_t*,System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apr_pool_t*),System.Void*,apr_pool_t*)">
Return, in @a *receiver2 and @a *receiver2_baton a function/baton that
 * will call @a receiver/@a receiver_baton, allocating the @a *receiver2_baton
 * in @a pool.
 *
 * @note This is used by compatibility wrappers, which exist in more than
 * Subversion core library.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_compat_log_revprops_out(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,apr_hash_t*)">
Return, in @a **author, @a **date, and @a **message, the values of the
 * svn:author, svn:date, and svn:log revprops from @a revprops.  If @a
 * revprops is NULL, all return values are NULL.  Any return value may be
 * NULL if the corresponding property is not set in @a revprops.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_compat_log_revprops_in(apr_pool_t*)">
Return a list to pass to post-1.5 log-retrieval functions in order to
 * retrieve the pre-1.5 set of revprops: svn:author, svn:date, and svn:log.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_compat_log_revprops_clear(apr_hash_t*)">
Clear svn:author, svn:date, and svn:log from @a revprops if not NULL.
 * Use this if you must handle these three properties separately for
 * compatibility reasons.
 *
 * @since New in 1.5.

</member>
        <member name="M:svn_compat_wrap_commit_callback(=FUNC:svn_error_t*(svn_commit_info_t!System.Runtime.CompilerServices.IsConst*,System.Void*,apr_pool_t*)*,System.Void**,=FUNC:svn_error_t*(System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*,apr_pool_t*)">
 @copyright
 ====================================================================
 Copyright (c) 2006, 2007 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_compat.h
 @brief Utilities to help applications provide backwards-compatibility

 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

Return, in @a *callback2 and @a *callback2_baton a function/baton that
 * will call @a callback/@a callback_baton, allocating the @a *callback2_baton
 * in @a pool.
 *
 * @note This is used by compatibility wrappers, which exist in more than
 * Subversion core library.
 *
 * @since New in 1.4.

</member>
        <member name="P:SharpSvn.SvnCommitResult.PostCommitError">
            <summary>error message from post-commit hook, or NULL</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictAction.Delete">
            <summary>Attempting to delete object</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictAction.Add">
            <summary>Attempting to add object</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictAction.Edit">
            <summary>Attempting to change text or props</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictReason.NotVersioned">
            <summary>object is unversioned</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictReason.Missing">
            <summary>object is unknown or missing</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictReason.Deleted">
            <summary>object is already schedule-delete</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictReason.Obstructed">
            <summary>another object is in the way</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictReason.Edited">
            <summary>local edits are already present</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictType.Property">
            <summary>property conflict (on a file or dir)</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictType.Text">
            <summary>textual conflict (on a file)</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.Merged">
            <summary>Choose the 'merged file'. The result file of the automatic merging; possibly with local edits</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.Mine">
            <summary>Choose local version on all conflicts; further use auto-merged</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.Theirs">
            <summary>Choose their on all conflicts; further use auto-merged</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.MineFull">
            <summary>Choose the local file</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.TheirsFull">
            <summary>Choose the incoming file</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.Base">
            <summary>Choose the base file</summary>
        </member>
        <member name="F:SharpSvn.SvnConflictChoice.Postpone">
            <summary>Don't resolve the conflict now.  Let subversion mark the path
'conflicted', so user can run 'svn resolved' later</summary>
        </member>
        <member name="F:SharpSvn.SvnDiffKind.Deleted">
            <summary>A deleted item</summary>
        </member>
        <member name="F:SharpSvn.SvnDiffKind.Modified">
            <summary>An item with text modifications</summary>
        </member>
        <member name="F:SharpSvn.SvnDiffKind.Added">
            <summary>An added item</summary>
        </member>
        <member name="F:SharpSvn.SvnDiffKind.Normal">
            <summary>An item with no text modifications</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.SvnListDefault">
            <summary>The fields loaded if no other value is specified</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.AllFieldsV15">
            <summary>A combination of all the dirent fields at Subversion 1.5</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.LastAuthor">
            <summary>An indication that you are interested in the @c last_author field</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.Time">
            <summary>An indication that you are interested in the @c time field</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.CreatedRevision">
            <summary>An indication that you are interested in the @c created_rev field</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.HasProperties">
            <summary>An indication that you are interested in the @c has_props field</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.Size">
            <summary>An indication that you are interested in the @c size field</summary>
        </member>
        <member name="F:SharpSvn.SvnDirEntryItems.Kind">
            <summary>An indication that you are interested in the Kind field</summary>
        </member>
        <member name="F:SharpSvn.SvnSchedule.Replace">
            <summary> Slated for replacement (delete + add) </summary>
        </member>
        <member name="F:SharpSvn.SvnSchedule.Delete">
            <summary> Slated for deletion </summary>
        </member>
        <member name="F:SharpSvn.SvnSchedule.Add">
            <summary> Slated for addition </summary>
        </member>
        <member name="F:SharpSvn.SvnSchedule.Normal">
            <summary> Nothing special here </summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Incomplete">
            <summary>a directory doesn't contain a complete entries list</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.External">
            <summary>an unversioned path populated by an svn:externals property</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Obstructed">
            <summary>an unversioned resource is in the way of the versioned resource</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Ignored">
            <summary>is unversioned but configured to be ignored</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Conflicted">
            <summary>local mods received conflicting repos mods</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Merged">
            <summary>local mods received repos mods</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Modified">
            <summary>text or props have been modified</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Replaced">
            <summary>was deleted and then re-added</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Deleted">
            <summary>scheduled for deletion</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Missing">
            <summary>under v.c., but is missing</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Added">
            <summary>is scheduled for addition</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Normal">
            <summary>exists, but uninteresting</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.NotVersioned">
            <summary>is not a versioned thing in this wc</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.None">
            <summary>does not exist</summary>
        </member>
        <member name="F:SharpSvn.SvnStatus.Zero">
            <summary>Zero value. Never used by Subversion</summary>
        </member>
        <member name="F:SharpSvn.SvnDepth.Infinity">
            <summary>
D + all descendants (full recursion from D). Updates will pull in any
files or subdirectories not already present; those subdirectories'
this_dir entries will have depth-infinity. Equivalent to the pre-1.5
default update behavior.
</summary>
        </member>
        <member name="F:SharpSvn.SvnDepth.Children">
            <summary>
D + immediate children (D and its entries). Updates will pull in any
files or subdirectories not already present; those subdirectories'
this_dir entries will have depth-empty.
</summary>
        </member>
        <member name="F:SharpSvn.SvnDepth.Files">
            <summary>
D + its file children, but not subdirs.  Updates will pull in any files
not already present, but not subdirectories.
</summary>
        </member>
        <member name="F:SharpSvn.SvnDepth.Empty">
            <summary>
Just the named directory D, no entries. Updates will not pull in any
files or subdirectories not already present
</summary>
        </member>
        <member name="F:SharpSvn.SvnDepth.Unknown">
            <summary>Depth undetermined or ignored</summary>
        </member>
        <member name="P:SharpSvn.SvnClientContext.PlinkPath">
            <summary>Gets the path to SharpSvn's plink. The path is encoded to be safe for subversion configuration settings</summary>
        </member>
        <member name="M:SharpSvn.SvnClientContext.MergeConfiguration(System.String)">
            <summary>Merges configuration from the specified path into the existing configuration</summary>
        </member>
        <member name="M:SharpSvn.SvnClientContext.LoadConfigurationDefault">
            <summary>Loads the standard subversion configuration and ensures the subversion config dir by creating default files</summary>
        </member>
        <member name="M:SharpSvn.SvnClientContext.LoadConfiguration(System.String,System.Boolean)">
            <summary>Loads the subversion configuration from the specified path and optionally ensures the path is a subversion config dir by creating default files</summary>
        </member>
        <member name="M:SharpSvn.SvnClientContext.LoadConfiguration(System.String)">
            <summary>Loads the subversion configuration from the specified path</summary>
        </member>
        <member name="T:SharpSvn.SvnClientContext">
            <summary>Subversion Client Context wrapper; base class of objects using client context</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:SharpSvn.Implementation.AprPool.#ctor(apr_pool_t*,System.Boolean)">
            <summary>Attaches to the specified pool</summary>
        </member>
        <member name="M:SharpSvn.Implementation.AprPool.#ctor">
            <summary>Creates a new root pool</summary>
        </member>
        <member name="M:SharpSvn.Implementation.AprPool.#ctor(SharpSvn.Implementation.AprPool)">
            <summary>Creates a childpool within the specified parent pool</summary>
        </member>
        <member name="M:svn_pool_create_ex(apr_pool_t*,apr_allocator_t*)">
 @copyright
 ====================================================================
 Copyright (c) 2000-2008 CollabNet.  All rights reserved.

 This software is licensed as described in the file COPYING, which
 you should have received as part of this distribution.  The terms
 are also available at http://subversion.tigris.org/license-1.html.
 If newer versions of this license are posted there, you may use a
 newer version instead, at your option.

 This software consists of voluntary contributions made by many
 individuals.  For exact contribution history, see the revision
 history and logs, available at http://subversion.tigris.org/.
 ====================================================================
 @endcopyright

 @file svn_types.h
 @brief Subversion's data types

</member>
        <member name="M:SharpSvn.Implementation.SvnBase.IsNotUri(System.String)">
            <summary>Gets a boolean indicating whether the path is a file path (and not a Uri)</summary>
        </member>
        <member name="T:SharpSvn.Implementation.SvnBase">
            <summary>Main class of Subversion api. This class is responsible for loading the unmanaged api</summary>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Discarding badly formed XML document comment for member 'T:apr_pool_t'. -->
        <!-- Discarding badly formed XML document comment for member 'T:apr_allocator_t'. -->
        <!-- Discarding badly formed XML document comment for member 'M:apr_strnatcmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:apr_table_overlap(apr_table_t*,apr_table_t!System.Runtime.CompilerServices.IsConst*,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:apr_fileattrs_t'. -->
        <!-- Discarding badly formed XML document comment for member 'M:svn_depth_to_word(svn_depth_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:svn_commit_info_t'. -->
        <!-- Discarding badly formed XML document comment for member 'T:svn_lock_t'. -->
        <!-- Discarding badly formed XML document comment for member 'M:svn_io_open_unique_file2(apr_file_t**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,svn_io_file_del_t,apr_pool_t*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:svn_txdelta_source'. -->
        <!-- Discarding badly formed XML document comment for member 'F:svn_txdelta_target'. -->
        <!-- Discarding badly formed XML document comment for member 'F:svn_txdelta_new'. -->
        <!-- Discarding badly formed XML document comment for member 'M:svn_txdelta_read_svndiff_window(svn_txdelta_window_t**,svn_stream_t*,System.Int32,apr_pool_t*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:svn_txdelta_skip_svndiff_window(apr_file_t*,System.Int32,apr_pool_t*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:svn_inheritance_to_word(svn_mergeinfo_inheritance_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:svn_ra_reporter3_t.abort_report'. -->
        <!-- Discarding badly formed XML document comment for member 'F:svn_diff_fns_t.token_compare'. -->
        <!-- Discarding badly formed XML document comment for member 'T:apr_mmap_t'. -->
    </members>
</doc>