//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ankh.UI.MergeWizard {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MergeStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MergeStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Ankh.UI.MergeWizard.MergeStrings", typeof(MergeStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added.
        /// </summary>
        internal static string Added {
            get {
                return ResourceManager.GetString("Added", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All.
        /// </summary>
        internal static string All {
            get {
                return ResourceManager.GetString("All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changed Path.
        /// </summary>
        internal static string ChangedPath {
            get {
                return ResourceManager.GetString("ChangedPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicted.
        /// </summary>
        internal static string Conflicted {
            get {
                return ResourceManager.GetString("Conflicted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve the conflict with the pre-merge base version of the file..
        /// </summary>
        internal static string ConflictHandlingBase {
            get {
                return ResourceManager.GetString("ConflictHandlingBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark each conflict and let me resolve later.
        /// </summary>
        internal static string ConflictHandlingMark {
            get {
                return ResourceManager.GetString("ConflictHandlingMark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve the conflict using my version of the file.
        /// </summary>
        internal static string ConflictHandlingMine {
            get {
                return ResourceManager.GetString("ConflictHandlingMine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prompt me for each conflict and let me decide.
        /// </summary>
        internal static string ConflictHandlingPrompt {
            get {
                return ResourceManager.GetString("ConflictHandlingPrompt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve the conflict using the repository version of the file.
        /// </summary>
        internal static string ConflictHandlingTheirs {
            get {
                return ResourceManager.GetString("ConflictHandlingTheirs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content.
        /// </summary>
        internal static string Content {
            get {
                return ResourceManager.GetString("Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deleted.
        /// </summary>
        internal static string Deleted {
            get {
                return ResourceManager.GetString("Deleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ErrorIcon {
            get {
                object obj = ResourceManager.GetObject("ErrorIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ErrorImage {
            get {
                object obj = ResourceManager.GetObject("ErrorImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Existed.
        /// </summary>
        internal static string Existed {
            get {
                return ResourceManager.GetString("Existed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HEAD.
        /// </summary>
        internal static string HEAD {
            get {
                return ResourceManager.GetString("HEAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap HelpIcon {
            get {
                object obj = ResourceManager.GetObject("HelpIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap InfoIcon {
            get {
                object obj = ResourceManager.GetObject("InfoIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid from revision..
        /// </summary>
        internal static string InvalidFromRevision {
            get {
                return ResourceManager.GetString("InvalidFromRevision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid from url..
        /// </summary>
        internal static string InvalidFromUrl {
            get {
                return ResourceManager.GetString("InvalidFromUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid to revision..
        /// </summary>
        internal static string InvalidToRevision {
            get {
                return ResourceManager.GetString("InvalidToRevision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid to url..
        /// </summary>
        internal static string InvalidToUrl {
            get {
                return ResourceManager.GetString("InvalidToUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please wait while the suggested merge sources are retrieved....
        /// </summary>
        internal static string LoadingMergeSources {
            get {
                return ResourceManager.GetString("LoadingMergeSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this method to block a revision or range of revisions from being merged into this location.  For example, you might want to do this if the changes in the branch have already been manually applied to this location or you do not intend to ever merge the changes from the branch into this location..
        /// </summary>
        internal static string ManuallyRecordDescription {
            get {
                return ResourceManager.GetString("ManuallyRecordDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ManuallyRecordImage {
            get {
                object obj = ResourceManager.GetObject("ManuallyRecordImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this method to unblock a revision or range of revisions that have previously been blocked from this location.  You might also use this option to manually remove the record of some revisions having been merged so that they can be merged again..
        /// </summary>
        internal static string ManuallyRemoveDescription {
            get {
                return ResourceManager.GetString("ManuallyRemoveDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ManuallyRemoveImage {
            get {
                object obj = ResourceManager.GetObject("ManuallyRemoveImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The working copy is not ready for merge..
        /// </summary>
        internal static string MergeBestPracticesPageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeBestPracticesPageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best Practices.
        /// </summary>
        internal static string MergeBestPracticesPageHeaderTitle {
            get {
                return ResourceManager.GetString("MergeBestPracticesPageHeaderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merged.
        /// </summary>
        internal static string Merged {
            get {
                return ResourceManager.GetString("Merged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the options for the merge process.
        /// </summary>
        internal static string MergeOptionsHeaderMessage {
            get {
                return ResourceManager.GetString("MergeOptionsHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the merge options.
        /// </summary>
        internal static string MergeOptionsHeaderTitle {
            get {
                return ResourceManager.GetString("MergeOptionsHeaderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the revision(s) containing the changes to merge..
        /// </summary>
        internal static string MergeRevisionsSelectionPageMessage {
            get {
                return ResourceManager.GetString("MergeRevisionsSelectionPageMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the revisions.
        /// </summary>
        internal static string MergeRevisionsSelectionPageTitle {
            get {
                return ResourceManager.GetString("MergeRevisionsSelectionPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the merge source.
        /// </summary>
        internal static string MergeSourceHeaderTitle {
            get {
                return ResourceManager.GetString("MergeSourceHeaderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location containing the items to be blocked from being merged..
        /// </summary>
        internal static string MergeSourceManuallyRecordPageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeSourceManuallyRecordPageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location containing the items to unblock and allow for being merged..
        /// </summary>
        internal static string MergeSourceManuallyRemovePageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeSourceManuallyRemovePageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location containing the items to merge..
        /// </summary>
        internal static string MergeSourceRangeOfRevisionsPageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeSourceRangeOfRevisionsPageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location of the branch to reintegrate..
        /// </summary>
        internal static string MergeSourceReintegratePageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeSourceReintegratePageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the URL and revisions containing the items to merge..
        /// </summary>
        internal static string MergeSourceTwoDifferentTreesPageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeSourceTwoDifferentTreesPageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please review your merge configuration below and feel free to revisit previous pages to make any necessary changes..
        /// </summary>
        internal static string MergeSummaryPageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeSummaryPageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merge Summary.
        /// </summary>
        internal static string MergeSummaryPageHeaderTitle {
            get {
                return ResourceManager.GetString("MergeSummaryPageHeaderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of merge to perform.
        /// </summary>
        internal static string MergeTypePageHeaderMessage {
            get {
                return ResourceManager.GetString("MergeTypePageHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the merge type.
        /// </summary>
        internal static string MergeTypePageHeaderTitle {
            get {
                return ResourceManager.GetString("MergeTypePageHeaderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap MergeWizardHeaderImage {
            get {
                object obj = ResourceManager.GetObject("MergeWizardHeaderImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merge Wizard.
        /// </summary>
        internal static string MergeWizardTitle {
            get {
                return ResourceManager.GetString("MergeWizardTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merging.
        /// </summary>
        internal static string MergingTitle {
            get {
                return ResourceManager.GetString("MergingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modified.
        /// </summary>
        internal static string Modified {
            get {
                return ResourceManager.GetString("Modified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No.
        /// </summary>
        internal static string No {
            get {
                return ResourceManager.GetString("No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter a url where to merge from..
        /// </summary>
        internal static string NoFromUrl {
            get {
                return ResourceManager.GetString("NoFromUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No log entries available..
        /// </summary>
        internal static string NoLogItems {
            get {
                return ResourceManager.GetString("NoLogItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no revisions to unblock from the selected path..
        /// </summary>
        internal static string NoRevisionsToUnblock {
            get {
                return ResourceManager.GetString("NoRevisionsToUnblock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to N/A.
        /// </summary>
        internal static string NotApplicableShort {
            get {
                return ResourceManager.GetString("NotApplicableShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Working copy is not ready for merge..
        /// </summary>
        internal static string NotReadyForMerge {
            get {
                return ResourceManager.GetString("NotReadyForMerge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties.
        /// </summary>
        internal static string Properties {
            get {
                return ResourceManager.GetString("Properties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this method to catch-up a feature branch with the changes in trunk or another branch.  You can merge a specific set of revisions or all eligible revisions..
        /// </summary>
        internal static string RangeOfRevisionsDescription {
            get {
                return ResourceManager.GetString("RangeOfRevisionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap RangeOfRevisionsImage {
            get {
                object obj = ResourceManager.GetObject("RangeOfRevisionsImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Working copy is ready for merge..
        /// </summary>
        internal static string ReadyForMerge {
            get {
                return ResourceManager.GetString("ReadyForMerge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this method to merge the changes in a feature branch back to trunk or the location the branch was created from.  To use this method the working copy must not have any local modifications.  It must be at a single revision.  It must be a complete working copy and not have any switched children.  Finally, the revision of the working copy must be greater than or equal to the last revision the branch was synchronized to..
        /// </summary>
        internal static string ReintegrateABranchDescription {
            get {
                return ResourceManager.GetString("ReintegrateABranchDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ReintegrateABranchImage {
            get {
                object obj = ResourceManager.GetObject("ReintegrateABranchImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replaced.
        /// </summary>
        internal static string Replaced {
            get {
                return ResourceManager.GetString("Replaced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolved.
        /// </summary>
        internal static string Resolved {
            get {
                return ResourceManager.GetString("Resolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipped.
        /// </summary>
        internal static string Skipped {
            get {
                return ResourceManager.GetString("Skipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap SuccessImage {
            get {
                object obj = ResourceManager.GetObject("SuccessImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Immediate children, including folders.
        /// </summary>
        internal static string SvnDepthChildren {
            get {
                return ResourceManager.GetString("SvnDepthChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only this item.
        /// </summary>
        internal static string SvnDepthEmpty {
            get {
                return ResourceManager.GetString("SvnDepthEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only file children.
        /// </summary>
        internal static string SvnDepthFiles {
            get {
                return ResourceManager.GetString("SvnDepthFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fully recursive.
        /// </summary>
        internal static string SvnDepthInfinity {
            get {
                return ResourceManager.GetString("SvnDepthInfinity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Working copy.
        /// </summary>
        internal static string SvnDepthUnknown {
            get {
                return ResourceManager.GetString("SvnDepthUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this method to merge the differences between two URL and revision pairs into the current location.  This could be used as an alternative to the reintegrate merge scenario when you want to control the specific path and revisions that are being compared for the merge input..
        /// </summary>
        internal static string TwoDifferentTreesDescription {
            get {
                return ResourceManager.GetString("TwoDifferentTreesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap TwoDifferentTreesImage {
            get {
                object obj = ResourceManager.GetObject("TwoDifferentTreesImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unchanged.
        /// </summary>
        internal static string Unchanged {
            get {
                return ResourceManager.GetString("Unchanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updated.
        /// </summary>
        internal static string Updated {
            get {
                return ResourceManager.GetString("Updated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap WarningIcon {
            get {
                object obj = ResourceManager.GetObject("WarningIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes.
        /// </summary>
        internal static string Yes {
            get {
                return ResourceManager.GetString("Yes", resourceCulture);
            }
        }
    }
}
