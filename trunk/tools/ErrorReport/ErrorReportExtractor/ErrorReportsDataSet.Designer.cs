//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ErrorReportExtractor {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ErrorReportsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ErrorReportsDataSet : System.Data.DataSet {
        
        private ErrorReportItemsDataTable tableErrorReportItems;
        
        private StackTraceLinesDataTable tableStackTraceLines;
        
        private ImportErrorItemDataTable tableImportErrorItem;
        
        private System.Data.DataRelation relationFK_StackTraceLines_ErrorReportItems;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ErrorReportsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ErrorReportsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ErrorReportItems"] != null)) {
                    base.Tables.Add(new ErrorReportItemsDataTable(ds.Tables["ErrorReportItems"]));
                }
                if ((ds.Tables["StackTraceLines"] != null)) {
                    base.Tables.Add(new StackTraceLinesDataTable(ds.Tables["StackTraceLines"]));
                }
                if ((ds.Tables["ImportErrorItem"] != null)) {
                    base.Tables.Add(new ImportErrorItemDataTable(ds.Tables["ImportErrorItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorReportItemsDataTable ErrorReportItems {
            get {
                return this.tableErrorReportItems;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StackTraceLinesDataTable StackTraceLines {
            get {
                return this.tableStackTraceLines;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImportErrorItemDataTable ImportErrorItem {
            get {
                return this.tableImportErrorItem;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ErrorReportsDataSet cln = ((ErrorReportsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ErrorReportItems"] != null)) {
                    base.Tables.Add(new ErrorReportItemsDataTable(ds.Tables["ErrorReportItems"]));
                }
                if ((ds.Tables["StackTraceLines"] != null)) {
                    base.Tables.Add(new StackTraceLinesDataTable(ds.Tables["StackTraceLines"]));
                }
                if ((ds.Tables["ImportErrorItem"] != null)) {
                    base.Tables.Add(new ImportErrorItemDataTable(ds.Tables["ImportErrorItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableErrorReportItems = ((ErrorReportItemsDataTable)(base.Tables["ErrorReportItems"]));
            if ((initTable == true)) {
                if ((this.tableErrorReportItems != null)) {
                    this.tableErrorReportItems.InitVars();
                }
            }
            this.tableStackTraceLines = ((StackTraceLinesDataTable)(base.Tables["StackTraceLines"]));
            if ((initTable == true)) {
                if ((this.tableStackTraceLines != null)) {
                    this.tableStackTraceLines.InitVars();
                }
            }
            this.tableImportErrorItem = ((ImportErrorItemDataTable)(base.Tables["ImportErrorItem"]));
            if ((initTable == true)) {
                if ((this.tableImportErrorItem != null)) {
                    this.tableImportErrorItem.InitVars();
                }
            }
            this.relationFK_StackTraceLines_ErrorReportItems = this.Relations["FK_StackTraceLines_ErrorReportItems"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ErrorReportsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ErrorReportsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableErrorReportItems = new ErrorReportItemsDataTable();
            base.Tables.Add(this.tableErrorReportItems);
            this.tableStackTraceLines = new StackTraceLinesDataTable();
            base.Tables.Add(this.tableStackTraceLines);
            this.tableImportErrorItem = new ImportErrorItemDataTable();
            base.Tables.Add(this.tableImportErrorItem);
            this.relationFK_StackTraceLines_ErrorReportItems = new System.Data.DataRelation("FK_StackTraceLines_ErrorReportItems", new System.Data.DataColumn[] {
                        this.tableErrorReportItems.IDColumn}, new System.Data.DataColumn[] {
                        this.tableStackTraceLines.ErrorReportItemColumn}, false);
            this.Relations.Add(this.relationFK_StackTraceLines_ErrorReportItems);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeErrorReportItems() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStackTraceLines() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImportErrorItem() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ErrorReportsDataSet ds = new ErrorReportsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ErrorReportItemsRowChangeEventHandler(object sender, ErrorReportItemsRowChangeEvent e);
        
        public delegate void StackTraceLinesRowChangeEventHandler(object sender, StackTraceLinesRowChangeEvent e);
        
        public delegate void ImportErrorItemRowChangeEventHandler(object sender, ImportErrorItemRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ErrorReportItemsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnReceivedTime;
            
            private System.Data.DataColumn columnSubmitterEmail;
            
            private System.Data.DataColumn columnBody;
            
            private System.Data.DataColumn columnSubject;
            
            private System.Data.DataColumn columnExceptionType;
            
            private System.Data.DataColumn columnExceptionMessage;
            
            private System.Data.DataColumn columnStackTrace;
            
            private System.Data.DataColumn columnMajorVersion;
            
            private System.Data.DataColumn columnMinorVersion;
            
            private System.Data.DataColumn columnPatchVersion;
            
            private System.Data.DataColumn columnRevision;
            
            private System.Data.DataColumn columnRepliedTo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsDataTable() {
                this.TableName = "ErrorReportItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorReportItemsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ErrorReportItemsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceivedTimeColumn {
                get {
                    return this.columnReceivedTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubmitterEmailColumn {
                get {
                    return this.columnSubmitterEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionTypeColumn {
                get {
                    return this.columnExceptionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionMessageColumn {
                get {
                    return this.columnExceptionMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StackTraceColumn {
                get {
                    return this.columnStackTrace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MajorVersionColumn {
                get {
                    return this.columnMajorVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinorVersionColumn {
                get {
                    return this.columnMinorVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PatchVersionColumn {
                get {
                    return this.columnPatchVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RevisionColumn {
                get {
                    return this.columnRevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepliedToColumn {
                get {
                    return this.columnRepliedTo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow this[int index] {
                get {
                    return ((ErrorReportItemsRow)(this.Rows[index]));
                }
            }
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowChanging;
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowChanged;
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowDeleting;
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddErrorReportItemsRow(ErrorReportItemsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow AddErrorReportItemsRow(string ID, System.DateTime ReceivedTime, string SubmitterEmail, string Body, string Subject, string ExceptionType, string ExceptionMessage, string StackTrace, int MajorVersion, int MinorVersion, int PatchVersion, int Revision, bool RepliedTo) {
                ErrorReportItemsRow rowErrorReportItemsRow = ((ErrorReportItemsRow)(this.NewRow()));
                rowErrorReportItemsRow.ItemArray = new object[] {
                        ID,
                        ReceivedTime,
                        SubmitterEmail,
                        Body,
                        Subject,
                        ExceptionType,
                        ExceptionMessage,
                        StackTrace,
                        MajorVersion,
                        MinorVersion,
                        PatchVersion,
                        Revision,
                        RepliedTo};
                this.Rows.Add(rowErrorReportItemsRow);
                return rowErrorReportItemsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow FindByID(string ID) {
                return ((ErrorReportItemsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ErrorReportItemsDataTable cln = ((ErrorReportItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ErrorReportItemsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnReceivedTime = base.Columns["ReceivedTime"];
                this.columnSubmitterEmail = base.Columns["SubmitterEmail"];
                this.columnBody = base.Columns["Body"];
                this.columnSubject = base.Columns["Subject"];
                this.columnExceptionType = base.Columns["ExceptionType"];
                this.columnExceptionMessage = base.Columns["ExceptionMessage"];
                this.columnStackTrace = base.Columns["StackTrace"];
                this.columnMajorVersion = base.Columns["MajorVersion"];
                this.columnMinorVersion = base.Columns["MinorVersion"];
                this.columnPatchVersion = base.Columns["PatchVersion"];
                this.columnRevision = base.Columns["Revision"];
                this.columnRepliedTo = base.Columns["RepliedTo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnReceivedTime = new System.Data.DataColumn("ReceivedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceivedTime);
                this.columnSubmitterEmail = new System.Data.DataColumn("SubmitterEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubmitterEmail);
                this.columnBody = new System.Data.DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnSubject = new System.Data.DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnExceptionType = new System.Data.DataColumn("ExceptionType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionType);
                this.columnExceptionMessage = new System.Data.DataColumn("ExceptionMessage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionMessage);
                this.columnStackTrace = new System.Data.DataColumn("StackTrace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStackTrace);
                this.columnMajorVersion = new System.Data.DataColumn("MajorVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMajorVersion);
                this.columnMinorVersion = new System.Data.DataColumn("MinorVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinorVersion);
                this.columnPatchVersion = new System.Data.DataColumn("PatchVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatchVersion);
                this.columnRevision = new System.Data.DataColumn("Revision", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevision);
                this.columnRepliedTo = new System.Data.DataColumn("RepliedTo", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepliedTo);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.MaxLength = 250;
                this.columnSubmitterEmail.MaxLength = 2147483647;
                this.columnBody.MaxLength = 2147483647;
                this.columnSubject.MaxLength = 2147483647;
                this.columnExceptionType.MaxLength = 2147483647;
                this.columnExceptionMessage.MaxLength = 2147483647;
                this.columnStackTrace.MaxLength = 2147483647;
                this.columnRepliedTo.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow NewErrorReportItemsRow() {
                return ((ErrorReportItemsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ErrorReportItemsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ErrorReportItemsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorReportItemsRowChanged != null)) {
                    this.ErrorReportItemsRowChanged(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorReportItemsRowChanging != null)) {
                    this.ErrorReportItemsRowChanging(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorReportItemsRowDeleted != null)) {
                    this.ErrorReportItemsRowDeleted(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorReportItemsRowDeleting != null)) {
                    this.ErrorReportItemsRowDeleting(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveErrorReportItemsRow(ErrorReportItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ErrorReportItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StackTraceLinesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnErrorReportItem;
            
            private System.Data.DataColumn columnMethodName;
            
            private System.Data.DataColumn columnParameters;
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnLineNumber;
            
            private System.Data.DataColumn columnSequenceNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesDataTable() {
                this.TableName = "StackTraceLines";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StackTraceLinesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StackTraceLinesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorReportItemColumn {
                get {
                    return this.columnErrorReportItem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MethodNameColumn {
                get {
                    return this.columnMethodName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParametersColumn {
                get {
                    return this.columnParameters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineNumberColumn {
                get {
                    return this.columnLineNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SequenceNumberColumn {
                get {
                    return this.columnSequenceNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow this[int index] {
                get {
                    return ((StackTraceLinesRow)(this.Rows[index]));
                }
            }
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowChanging;
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowChanged;
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowDeleting;
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStackTraceLinesRow(StackTraceLinesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow AddStackTraceLinesRow(ErrorReportItemsRow parentErrorReportItemsRowByFK_StackTraceLines_ErrorReportItems, string MethodName, string Parameters, string Filename, int LineNumber, int SequenceNumber) {
                StackTraceLinesRow rowStackTraceLinesRow = ((StackTraceLinesRow)(this.NewRow()));
                rowStackTraceLinesRow.ItemArray = new object[] {
                        parentErrorReportItemsRowByFK_StackTraceLines_ErrorReportItems[0],
                        MethodName,
                        Parameters,
                        Filename,
                        LineNumber,
                        SequenceNumber};
                this.Rows.Add(rowStackTraceLinesRow);
                return rowStackTraceLinesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StackTraceLinesDataTable cln = ((StackTraceLinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StackTraceLinesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorReportItem = base.Columns["ErrorReportItem"];
                this.columnMethodName = base.Columns["MethodName"];
                this.columnParameters = base.Columns["Parameters"];
                this.columnFilename = base.Columns["Filename"];
                this.columnLineNumber = base.Columns["LineNumber"];
                this.columnSequenceNumber = base.Columns["SequenceNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorReportItem = new System.Data.DataColumn("ErrorReportItem", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorReportItem);
                this.columnMethodName = new System.Data.DataColumn("MethodName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMethodName);
                this.columnParameters = new System.Data.DataColumn("Parameters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParameters);
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilename);
                this.columnLineNumber = new System.Data.DataColumn("LineNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineNumber);
                this.columnSequenceNumber = new System.Data.DataColumn("SequenceNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNumber);
                this.columnErrorReportItem.AllowDBNull = false;
                this.columnErrorReportItem.MaxLength = 250;
                this.columnMethodName.MaxLength = 2147483647;
                this.columnParameters.MaxLength = 2147483647;
                this.columnFilename.MaxLength = 2147483647;
                this.columnSequenceNumber.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow NewStackTraceLinesRow() {
                return ((StackTraceLinesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StackTraceLinesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StackTraceLinesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StackTraceLinesRowChanged != null)) {
                    this.StackTraceLinesRowChanged(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StackTraceLinesRowChanging != null)) {
                    this.StackTraceLinesRowChanging(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StackTraceLinesRowDeleted != null)) {
                    this.StackTraceLinesRowDeleted(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StackTraceLinesRowDeleting != null)) {
                    this.StackTraceLinesRowDeleting(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStackTraceLinesRow(StackTraceLinesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StackTraceLinesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImportErrorItemDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnColumn1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImportErrorItemDataTable() {
                this.TableName = "ImportErrorItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImportErrorItemDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImportErrorItemDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImportErrorItemRow this[int index] {
                get {
                    return ((ImportErrorItemRow)(this.Rows[index]));
                }
            }
            
            public event ImportErrorItemRowChangeEventHandler ImportErrorItemRowChanging;
            
            public event ImportErrorItemRowChangeEventHandler ImportErrorItemRowChanged;
            
            public event ImportErrorItemRowChangeEventHandler ImportErrorItemRowDeleting;
            
            public event ImportErrorItemRowChangeEventHandler ImportErrorItemRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImportErrorItemRow(ImportErrorItemRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImportErrorItemRow AddImportErrorItemRow(int Column1) {
                ImportErrorItemRow rowImportErrorItemRow = ((ImportErrorItemRow)(this.NewRow()));
                rowImportErrorItemRow.ItemArray = new object[] {
                        Column1};
                this.Rows.Add(rowImportErrorItemRow);
                return rowImportErrorItemRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImportErrorItemDataTable cln = ((ImportErrorItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImportErrorItemDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColumn1 = base.Columns["Column1"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColumn1 = new System.Data.DataColumn("Column1", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnColumn1.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImportErrorItemRow NewImportErrorItemRow() {
                return ((ImportErrorItemRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImportErrorItemRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImportErrorItemRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImportErrorItemRowChanged != null)) {
                    this.ImportErrorItemRowChanged(this, new ImportErrorItemRowChangeEvent(((ImportErrorItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImportErrorItemRowChanging != null)) {
                    this.ImportErrorItemRowChanging(this, new ImportErrorItemRowChangeEvent(((ImportErrorItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImportErrorItemRowDeleted != null)) {
                    this.ImportErrorItemRowDeleted(this, new ImportErrorItemRowChangeEvent(((ImportErrorItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImportErrorItemRowDeleting != null)) {
                    this.ImportErrorItemRowDeleting(this, new ImportErrorItemRowChangeEvent(((ImportErrorItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImportErrorItemRow(ImportErrorItemRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImportErrorItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ErrorReportItemsRow : System.Data.DataRow {
            
            private ErrorReportItemsDataTable tableErrorReportItems;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorReportItemsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableErrorReportItems = ((ErrorReportItemsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableErrorReportItems.IDColumn]));
                }
                set {
                    this[this.tableErrorReportItems.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReceivedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableErrorReportItems.ReceivedTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReceivedTime\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ReceivedTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubmitterEmail {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.SubmitterEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SubmitterEmail\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.SubmitterEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.BodyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Body\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.BodyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.SubjectColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Subject\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.SubjectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionType {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.ExceptionTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionType\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ExceptionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.ExceptionMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionMessage\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ExceptionMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StackTrace {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.StackTraceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StackTrace\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.StackTraceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MajorVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.MajorVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MajorVersion\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.MajorVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinorVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.MinorVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MinorVersion\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.MinorVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PatchVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.PatchVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PatchVersion\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.PatchVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Revision {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.RevisionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Revision\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.RevisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RepliedTo {
                get {
                    return ((bool)(this[this.tableErrorReportItems.RepliedToColumn]));
                }
                set {
                    this[this.tableErrorReportItems.RepliedToColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedTimeNull() {
                return this.IsNull(this.tableErrorReportItems.ReceivedTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedTimeNull() {
                this[this.tableErrorReportItems.ReceivedTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubmitterEmailNull() {
                return this.IsNull(this.tableErrorReportItems.SubmitterEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubmitterEmailNull() {
                this[this.tableErrorReportItems.SubmitterEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBodyNull() {
                return this.IsNull(this.tableErrorReportItems.BodyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBodyNull() {
                this[this.tableErrorReportItems.BodyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableErrorReportItems.SubjectColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableErrorReportItems.SubjectColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionTypeNull() {
                return this.IsNull(this.tableErrorReportItems.ExceptionTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionTypeNull() {
                this[this.tableErrorReportItems.ExceptionTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionMessageNull() {
                return this.IsNull(this.tableErrorReportItems.ExceptionMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionMessageNull() {
                this[this.tableErrorReportItems.ExceptionMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStackTraceNull() {
                return this.IsNull(this.tableErrorReportItems.StackTraceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStackTraceNull() {
                this[this.tableErrorReportItems.StackTraceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMajorVersionNull() {
                return this.IsNull(this.tableErrorReportItems.MajorVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMajorVersionNull() {
                this[this.tableErrorReportItems.MajorVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinorVersionNull() {
                return this.IsNull(this.tableErrorReportItems.MinorVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinorVersionNull() {
                this[this.tableErrorReportItems.MinorVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatchVersionNull() {
                return this.IsNull(this.tableErrorReportItems.PatchVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatchVersionNull() {
                this[this.tableErrorReportItems.PatchVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisionNull() {
                return this.IsNull(this.tableErrorReportItems.RevisionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisionNull() {
                this[this.tableErrorReportItems.RevisionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow[] GetStackTraceLinesRows() {
                return ((StackTraceLinesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_StackTraceLines_ErrorReportItems"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StackTraceLinesRow : System.Data.DataRow {
            
            private StackTraceLinesDataTable tableStackTraceLines;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StackTraceLinesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStackTraceLines = ((StackTraceLinesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorReportItem {
                get {
                    return ((string)(this[this.tableStackTraceLines.ErrorReportItemColumn]));
                }
                set {
                    this[this.tableStackTraceLines.ErrorReportItemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MethodName {
                get {
                    try {
                        return ((string)(this[this.tableStackTraceLines.MethodNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MethodName\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.MethodNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameters {
                get {
                    try {
                        return ((string)(this[this.tableStackTraceLines.ParametersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parameters\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.ParametersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tableStackTraceLines.FilenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filename\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineNumber {
                get {
                    try {
                        return ((int)(this[this.tableStackTraceLines.LineNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LineNumber\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.LineNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequenceNumber {
                get {
                    return ((int)(this[this.tableStackTraceLines.SequenceNumberColumn]));
                }
                set {
                    this[this.tableStackTraceLines.SequenceNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow ErrorReportItemsRow {
                get {
                    return ((ErrorReportItemsRow)(this.GetParentRow(this.Table.ParentRelations["FK_StackTraceLines_ErrorReportItems"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_StackTraceLines_ErrorReportItems"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMethodNameNull() {
                return this.IsNull(this.tableStackTraceLines.MethodNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMethodNameNull() {
                this[this.tableStackTraceLines.MethodNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParametersNull() {
                return this.IsNull(this.tableStackTraceLines.ParametersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParametersNull() {
                this[this.tableStackTraceLines.ParametersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilenameNull() {
                return this.IsNull(this.tableStackTraceLines.FilenameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilenameNull() {
                this[this.tableStackTraceLines.FilenameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNumberNull() {
                return this.IsNull(this.tableStackTraceLines.LineNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNumberNull() {
                this[this.tableStackTraceLines.LineNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImportErrorItemRow : System.Data.DataRow {
            
            private ImportErrorItemDataTable tableImportErrorItem;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImportErrorItemRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImportErrorItem = ((ImportErrorItemDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Column1 {
                get {
                    try {
                        return ((int)(this[this.tableImportErrorItem.Column1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column1\' in table \'ImportErrorItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImportErrorItem.Column1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tableImportErrorItem.Column1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tableImportErrorItem.Column1Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ErrorReportItemsRowChangeEvent : System.EventArgs {
            
            private ErrorReportItemsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRowChangeEvent(ErrorReportItemsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StackTraceLinesRowChangeEvent : System.EventArgs {
            
            private StackTraceLinesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRowChangeEvent(StackTraceLinesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImportErrorItemRowChangeEvent : System.EventArgs {
            
            private ImportErrorItemRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImportErrorItemRowChangeEvent(ImportErrorItemRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImportErrorItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ErrorReportExtractor.ErrorReportsDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ErrorReportItemsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ErrorReportItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ErrorReportItems";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ReceivedTime", "ReceivedTime");
            tableMapping.ColumnMappings.Add("SubmitterEmail", "SubmitterEmail");
            tableMapping.ColumnMappings.Add("Body", "Body");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("ExceptionType", "ExceptionType");
            tableMapping.ColumnMappings.Add("ExceptionMessage", "ExceptionMessage");
            tableMapping.ColumnMappings.Add("StackTrace", "StackTrace");
            tableMapping.ColumnMappings.Add("MajorVersion", "MajorVersion");
            tableMapping.ColumnMappings.Add("MinorVersion", "MinorVersion");
            tableMapping.ColumnMappings.Add("PatchVersion", "PatchVersion");
            tableMapping.ColumnMappings.Add("Revision", "Revision");
            tableMapping.ColumnMappings.Add("RepliedTo", "RepliedTo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ErrorReportItems] WHERE (([ID] = @Original_ID) AND ((@IsNull_ReceivedTime = 1 AND [ReceivedTime] IS NULL) OR ([ReceivedTime] = @Original_ReceivedTime)) AND ((@IsNull_MajorVersion = 1 AND [MajorVersion] IS NULL) OR ([MajorVersion] = @Original_MajorVersion)) AND ((@IsNull_MinorVersion = 1 AND [MinorVersion] IS NULL) OR ([MinorVersion] = @Original_MinorVersion)) AND ((@IsNull_PatchVersion = 1 AND [PatchVersion] IS NULL) OR ([PatchVersion] = @Original_PatchVersion)) AND ((@IsNull_Revision = 1 AND [Revision] IS NULL) OR ([Revision] = @Original_Revision)) AND ([RepliedTo] = @Original_RepliedTo))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ReceivedTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceivedTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ReceivedTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceivedTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RepliedTo", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RepliedTo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ErrorReportItems] ([ID], [ReceivedTime], [SubmitterEmail], [Body], [Subject], [ExceptionType], [ExceptionMessage], [StackTrace], [MajorVersion], [MinorVersion], [PatchVersion], [Revision], [RepliedTo]) VALUES (@ID, @ReceivedTime, @SubmitterEmail, @Body, @Subject, @ExceptionType, @ExceptionMessage, @StackTrace, @MajorVersion, @MinorVersion, @PatchVersion, @Revision, @RepliedTo);
SELECT ID, ReceivedTime, SubmitterEmail, Body, Subject, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, RepliedTo FROM ErrorReportItems WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceivedTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceivedTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubmitterEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SubmitterEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Subject", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "StackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepliedTo", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RepliedTo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ErrorReportItems] SET [ID] = @ID, [ReceivedTime] = @ReceivedTime, [SubmitterEmail] = @SubmitterEmail, [Body] = @Body, [Subject] = @Subject, [ExceptionType] = @ExceptionType, [ExceptionMessage] = @ExceptionMessage, [StackTrace] = @StackTrace, [MajorVersion] = @MajorVersion, [MinorVersion] = @MinorVersion, [PatchVersion] = @PatchVersion, [Revision] = @Revision, [RepliedTo] = @RepliedTo WHERE (([ID] = @Original_ID) AND ((@IsNull_ReceivedTime = 1 AND [ReceivedTime] IS NULL) OR ([ReceivedTime] = @Original_ReceivedTime)) AND ((@IsNull_MajorVersion = 1 AND [MajorVersion] IS NULL) OR ([MajorVersion] = @Original_MajorVersion)) AND ((@IsNull_MinorVersion = 1 AND [MinorVersion] IS NULL) OR ([MinorVersion] = @Original_MinorVersion)) AND ((@IsNull_PatchVersion = 1 AND [PatchVersion] IS NULL) OR ([PatchVersion] = @Original_PatchVersion)) AND ((@IsNull_Revision = 1 AND [Revision] IS NULL) OR ([Revision] = @Original_Revision)) AND ([RepliedTo] = @Original_RepliedTo));
SELECT ID, ReceivedTime, SubmitterEmail, Body, Subject, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, RepliedTo FROM ErrorReportItems WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceivedTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceivedTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubmitterEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SubmitterEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Subject", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "StackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepliedTo", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RepliedTo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ReceivedTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceivedTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ReceivedTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceivedTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RepliedTo", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RepliedTo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ReceivedTime, SubmitterEmail, Body, Subject, ExceptionType, ExceptionM" +
                "essage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, RepliedT" +
                "o FROM dbo.ErrorReportItems";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.ErrorReportItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.ErrorReportItemsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorReportsDataSet.ErrorReportItemsDataTable dataTable = new ErrorReportsDataSet.ErrorReportItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet.ErrorReportItemsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ErrorReportItems");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_ID, System.Nullable<System.DateTime> Original_ReceivedTime, System.Nullable<int> Original_MajorVersion, System.Nullable<int> Original_MinorVersion, System.Nullable<int> Original_PatchVersion, System.Nullable<int> Original_Revision, bool Original_RepliedTo) {
            if ((Original_ID == null)) {
                throw new System.ArgumentNullException("Original_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ID));
            }
            if ((Original_ReceivedTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_ReceivedTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_MajorVersion.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_MajorVersion.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_MinorVersion.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_MinorVersion.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_PatchVersion.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_PatchVersion.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_Revision.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_Revision.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_RepliedTo));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ID, System.Nullable<System.DateTime> ReceivedTime, string SubmitterEmail, string Body, string Subject, string ExceptionType, string ExceptionMessage, string StackTrace, System.Nullable<int> MajorVersion, System.Nullable<int> MinorVersion, System.Nullable<int> PatchVersion, System.Nullable<int> Revision, bool RepliedTo) {
            if ((ID == null)) {
                throw new System.ArgumentNullException("ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ID));
            }
            if ((ReceivedTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(ReceivedTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((SubmitterEmail == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SubmitterEmail));
            }
            if ((Body == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Body));
            }
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((ExceptionType == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(MajorVersion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(MinorVersion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(PatchVersion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(Revision.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(RepliedTo));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ID, 
                    System.Nullable<System.DateTime> ReceivedTime, 
                    string SubmitterEmail, 
                    string Body, 
                    string Subject, 
                    string ExceptionType, 
                    string ExceptionMessage, 
                    string StackTrace, 
                    System.Nullable<int> MajorVersion, 
                    System.Nullable<int> MinorVersion, 
                    System.Nullable<int> PatchVersion, 
                    System.Nullable<int> Revision, 
                    bool RepliedTo, 
                    string Original_ID, 
                    System.Nullable<System.DateTime> Original_ReceivedTime, 
                    System.Nullable<int> Original_MajorVersion, 
                    System.Nullable<int> Original_MinorVersion, 
                    System.Nullable<int> Original_PatchVersion, 
                    System.Nullable<int> Original_Revision, 
                    bool Original_RepliedTo) {
            if ((ID == null)) {
                throw new System.ArgumentNullException("ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ID));
            }
            if ((ReceivedTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(ReceivedTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((SubmitterEmail == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SubmitterEmail));
            }
            if ((Body == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Body));
            }
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((ExceptionType == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(MajorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(MinorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(PatchVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Revision.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(RepliedTo));
            if ((Original_ID == null)) {
                throw new System.ArgumentNullException("Original_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ID));
            }
            if ((Original_ReceivedTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_ReceivedTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_MajorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_MajorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Original_MinorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_MinorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_PatchVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_PatchVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((Original_Revision.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_Revision.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_RepliedTo));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StackTraceLinesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StackTraceLinesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StackTraceLines";
            tableMapping.ColumnMappings.Add("ErrorReportItem", "ErrorReportItem");
            tableMapping.ColumnMappings.Add("MethodName", "MethodName");
            tableMapping.ColumnMappings.Add("Parameters", "Parameters");
            tableMapping.ColumnMappings.Add("Filename", "Filename");
            tableMapping.ColumnMappings.Add("LineNumber", "LineNumber");
            tableMapping.ColumnMappings.Add("SequenceNumber", "SequenceNumber");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[StackTraceLines] ([ErrorReportItem], [MethodName], [Parameters" +
                "], [Filename], [LineNumber], [SequenceNumber]) VALUES (@ErrorReportItem, @Method" +
                "Name, @Parameters, @Filename, @LineNumber, @SequenceNumber)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportItem", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MethodName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MethodName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Parameters", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Parameters", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Filename", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Filename", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LineNumber", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LineNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SequenceNumber", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SequenceNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ErrorReportItem, MethodName, Parameters, Filename, LineNumber, SequenceNum" +
                "ber FROM dbo.StackTraceLines";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.StackTraceLinesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.StackTraceLinesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorReportsDataSet.StackTraceLinesDataTable dataTable = new ErrorReportsDataSet.StackTraceLinesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet.StackTraceLinesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "StackTraceLines");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ErrorReportItem, string MethodName, string Parameters, string Filename, System.Nullable<int> LineNumber, int SequenceNumber) {
            if ((ErrorReportItem == null)) {
                throw new System.ArgumentNullException("ErrorReportItem");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ErrorReportItem));
            }
            if ((MethodName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MethodName));
            }
            if ((Parameters == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameters));
            }
            if ((Filename == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Filename));
            }
            if ((LineNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(LineNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(SequenceNumber));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ImportErrorItemTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImportErrorItemTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ImportErrorItem";
            tableMapping.ColumnMappings.Add("Column1", "Column1");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ImportErrorItem";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 250, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceivedTime", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubmitterEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepliedTo", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.ImportErrorItemDataTable dataTable, string ID, System.Nullable<System.DateTime> ReceivedTime, string SubmitterEmail, string Body, string Subject, string ExceptionType, string ExceptionMessage, string StackTrace, System.Nullable<int> MajorVersion, System.Nullable<int> MinorVersion, System.Nullable<int> PatchVersion, System.Nullable<int> Revision, System.Nullable<bool> RepliedTo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ID == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ID));
            }
            if ((ReceivedTime.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceivedTime.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((SubmitterEmail == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(SubmitterEmail));
            }
            if ((Body == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Body));
            }
            if ((Subject == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(Subject));
            }
            if ((ExceptionType == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(MajorVersion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(MinorVersion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((int)(PatchVersion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[12].Value = ((int)(Revision.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((RepliedTo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[13].Value = ((bool)(RepliedTo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.ImportErrorItemDataTable GetData(string ID, System.Nullable<System.DateTime> ReceivedTime, string SubmitterEmail, string Body, string Subject, string ExceptionType, string ExceptionMessage, string StackTrace, System.Nullable<int> MajorVersion, System.Nullable<int> MinorVersion, System.Nullable<int> PatchVersion, System.Nullable<int> Revision, System.Nullable<bool> RepliedTo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ID == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ID));
            }
            if ((ReceivedTime.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceivedTime.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((SubmitterEmail == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(SubmitterEmail));
            }
            if ((Body == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Body));
            }
            if ((Subject == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(Subject));
            }
            if ((ExceptionType == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(MajorVersion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(MinorVersion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((int)(PatchVersion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[12].Value = ((int)(Revision.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((RepliedTo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[13].Value = ((bool)(RepliedTo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[13].Value = System.DBNull.Value;
            }
            ErrorReportsDataSet.ImportErrorItemDataTable dataTable = new ErrorReportsDataSet.ImportErrorItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591