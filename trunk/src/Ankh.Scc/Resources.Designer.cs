//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ankh.Scc {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Ankh.Scc.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add to Sub&amp;version.
        /// </summary>
        internal static string AddToSubversionCommandName {
            get {
                return ResourceManager.GetString("AddToSubversionCommandName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Merge Completed?.
        /// </summary>
        internal static string MergeCompleted {
            get {
                return ResourceManager.GetString("MergeCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path &apos;{0}&apos; is currently blocked by subversion; do you have a file with a case-only-different name?.
        /// </summary>
        internal static string PathXBlocked {
            get {
                return ResourceManager.GetString("PathXBlocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path &apos;{0}&apos; is in a subversion administrative area. This file shouldn&apos;t be added to subversion..
        /// </summary>
        internal static string SvnPathXBlocked {
            get {
                return ResourceManager.GetString("SvnPathXBlocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is marked as Conflicted..
        /// </summary>
        internal static string ToolTipConflict {
            get {
                return ResourceManager.GetString("ToolTipConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This directory does not exist on disk. Instead there is a file with the same name.
        /// </summary>
        internal static string ToolTipDirObstructed {
            get {
                return ResourceManager.GetString("ToolTipDirObstructed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file does not exist on disk..
        /// </summary>
        internal static string ToolTipDoesNotExist {
            get {
                return ResourceManager.GetString("ToolTipDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file does not exist on disk. Instead there is a directory with the same name.
        /// </summary>
        internal static string ToolTipFileObstructed {
            get {
                return ResourceManager.GetString("ToolTipFileObstructed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is explicitly ignored by subversion..
        /// </summary>
        internal static string ToolTipIgnored {
            get {
                return ResourceManager.GetString("ToolTipIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have exclusively locked this file..
        /// </summary>
        internal static string ToolTipLocked {
            get {
                return ResourceManager.GetString("ToolTipLocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is modified.
        /// </summary>
        internal static string ToolTipModified {
            get {
                return ResourceManager.GetString("ToolTipModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file must be locked before it can be edited..
        /// </summary>
        internal static string ToolTipMustLock {
            get {
                return ResourceManager.GetString("ToolTipMustLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subversion detected an unsupported working copy version while checking the status of &apos;{0}&apos;. Most likely you upgraded another Subversion client (e.g. TortoiseSVN or the SVN client) to a newer version without upgrading your AnkhSVN. Please visit http://ankhsvn.net/ to find out about newer AnkhSVN versions supporting this Working Copy.
        ///
        ///Most likely AnkhSVN will not work correctly on this and other upgraded working copies until you upgrade to a newer version..
        /// </summary>
        internal static string UnsupportedWorkingCopyFound {
            get {
                return ResourceManager.GetString("UnsupportedWorkingCopyFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subversion detected a working copy that needs an explicit upgrade in &apos;{0}&apos;. 
        ///
        ///While this working copy is not upgraded all files in this working copy will appear as new. 
        ///
        ///When a working copy is upgraded it can no longer be used by Subversion clients that weren&apos;t designed for this (or later) working copy formats.
        ///
        ///Further working copy upgrade required warnings are suppressed until after you restart Visual Studio..
        /// </summary>
        internal static string UpgradeRequired {
            get {
                return ResourceManager.GetString("UpgradeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your external merge tool saved &apos;{0}&apos;.
        ///Would you like to mark this conflicted file as resolved?.
        /// </summary>
        internal static string YourMergeToolSavedXWouldYouLikeItMarkedAsResolved {
            get {
                return ResourceManager.GetString("YourMergeToolSavedXWouldYouLikeItMarkedAsResolved", resourceCulture);
            }
        }
    }
}
