<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Added" xml:space="preserve">
    <value>Added</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="ChangedPath" xml:space="preserve">
    <value>Changed Path</value>
  </data>
  <data name="Conflicted" xml:space="preserve">
    <value>Conflicted</value>
  </data>
  <data name="ConflictHandlingBase" xml:space="preserve">
    <value>Resolve the conflict with the pre-merge base version of the file.</value>
  </data>
  <data name="ConflictHandlingMark" xml:space="preserve">
    <value>Mark each conflict and let me resolve later</value>
  </data>
  <data name="ConflictHandlingMine" xml:space="preserve">
    <value>Resolve the conflict using my version of the file</value>
  </data>
  <data name="ConflictHandlingPrompt" xml:space="preserve">
    <value>Prompt me for each conflict and let me decide</value>
  </data>
  <data name="ConflictHandlingTheirs" xml:space="preserve">
    <value>Resolve the conflict using the repository version of the file</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ErrorImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\Error.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Existed" xml:space="preserve">
    <value>Existed</value>
  </data>
  <data name="HEAD" xml:space="preserve">
    <value>HEAD</value>
  </data>
  <data name="InvalidFromRevision" xml:space="preserve">
    <value>Invalid from revision.</value>
  </data>
  <data name="InvalidFromUrl" xml:space="preserve">
    <value>Invalid from url.</value>
  </data>
  <data name="InvalidToRevision" xml:space="preserve">
    <value>Invalid to revision.</value>
  </data>
  <data name="InvalidToUrl" xml:space="preserve">
    <value>Invalid to url.</value>
  </data>
  <data name="LoadingMergeSources" xml:space="preserve">
    <value>Please wait while the suggested merge sources are retrieved...</value>
  </data>
  <data name="ManuallyRecordDescription" xml:space="preserve">
    <value>Use this method to block a revision or range of revisions from being merged into this location.  For example, you might want to do this if the changes in the branch have already been manually applied to this location or you do not intend to ever merge the changes from the branch into this location.</value>
  </data>
  <data name="ManuallyRecordImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\ManuallyRecord.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ManuallyRemoveDescription" xml:space="preserve">
    <value>Use this method to unblock a revision or range of revisions that have previously been blocked from this location.  You might also use this option to manually remove the record of some revisions having been merged so that they can be merged again.</value>
  </data>
  <data name="ManuallyRemoveImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\ManuallyRemove.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MergeBestPracticesPageHeaderMessage" xml:space="preserve">
    <value>The working copy is not ready for merge.</value>
  </data>
  <data name="MergeBestPracticesPageHeaderTitle" xml:space="preserve">
    <value>Best Practices</value>
  </data>
  <data name="Merged" xml:space="preserve">
    <value>Merged</value>
  </data>
  <data name="MergeOptionsHeaderMessage" xml:space="preserve">
    <value>Specify the options for the merge process</value>
  </data>
  <data name="MergeOptionsHeaderTitle" xml:space="preserve">
    <value>Select the merge options</value>
  </data>
  <data name="MergeRevisionsSelectionPageMessage" xml:space="preserve">
    <value>Specify the revision(s) containing the changes to merge.</value>
  </data>
  <data name="MergeRevisionsSelectionPageTitle" xml:space="preserve">
    <value>Select the revisions</value>
  </data>
  <data name="MergeSourceHeaderTitle" xml:space="preserve">
    <value>Select the merge source</value>
  </data>
  <data name="MergeSourceManuallyRecordPageHeaderMessage" xml:space="preserve">
    <value>Specify the location containing the items to be blocked from being merged.</value>
  </data>
  <data name="MergeSourceManuallyRemovePageHeaderMessage" xml:space="preserve">
    <value>Specify the location containing the items to unblock and allow for being merged.</value>
  </data>
  <data name="MergeSourceRangeOfRevisionsPageHeaderMessage" xml:space="preserve">
    <value>Specify the location containing the items to merge.</value>
  </data>
  <data name="MergeSourceReintegratePageHeaderMessage" xml:space="preserve">
    <value>Specify the location of the branch to reintegrate.</value>
  </data>
  <data name="MergeSourceTwoDifferentTreesPageHeaderMessage" xml:space="preserve">
    <value>Specify the URL and revisions containing the items to merge.</value>
  </data>
  <data name="MergeSummaryPageHeaderMessage" xml:space="preserve">
    <value>Please review your merge configuration below and feel free to revisit previous pages to make any necessary changes.</value>
  </data>
  <data name="MergeSummaryPageHeaderTitle" xml:space="preserve">
    <value>Merge Summary</value>
  </data>
  <data name="MergeTypePageHeaderMessage" xml:space="preserve">
    <value>Select the type of merge to perform</value>
  </data>
  <data name="MergeTypePageHeaderTitle" xml:space="preserve">
    <value>Select the merge type</value>
  </data>
  <data name="MergeWizardHeaderImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\MergeWizardHeader.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MergeWizardIcon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\MergeWizard.ico;System.Drawing.Icon, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MergeWizardTitle" xml:space="preserve">
    <value>Merge Wizard</value>
  </data>
  <data name="MergingTitle" xml:space="preserve">
    <value>Merging...</value>
  </data>
  <data name="Modified" xml:space="preserve">
    <value>Modified</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoRevisionsToUnblock" xml:space="preserve">
    <value>There are no revisions to unblock from the selected path.</value>
  </data>
  <data name="NotApplicableShort" xml:space="preserve">
    <value>N/A</value>
  </data>
  <data name="NotReadyForMerge" xml:space="preserve">
    <value>Working copy is not ready for merge.</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="RangeOfRevisionsDescription" xml:space="preserve">
    <value>Use this method to catch-up a feature branch with the changes in trunk or another branch.  You can merge a specific set of revisions or all eligible revisions.</value>
  </data>
  <data name="RangeOfRevisionsImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\RangeOfRevisions.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ReadyForMerge" xml:space="preserve">
    <value>Working copy is ready for merge.</value>
  </data>
  <data name="ReintegrateABranchDescription" xml:space="preserve">
    <value>Use this method to merge the changes in a feature branch back to trunk or the location the branch was created from.  To use this method the working copy must not have any local modifications.  It must be at a single revision.  It must be a complete working copy and not have any switched children.  Finally, the revision of the working copy must be greater than or equal to the last revision the branch was synchronized to.</value>
  </data>
  <data name="ReintegrateABranchImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\ReintegrateABranch.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Replaced" xml:space="preserve">
    <value>Replaced</value>
  </data>
  <data name="Resolved" xml:space="preserve">
    <value>Resolved</value>
  </data>
  <data name="Skipped" xml:space="preserve">
    <value>Skipped</value>
  </data>
  <data name="SuccessImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\Success.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SvnDepthChildren" xml:space="preserve">
    <value>Immediate children, including folders</value>
  </data>
  <data name="SvnDepthEmpty" xml:space="preserve">
    <value>Only this item</value>
  </data>
  <data name="SvnDepthFiles" xml:space="preserve">
    <value>Only file children</value>
  </data>
  <data name="SvnDepthInfinity" xml:space="preserve">
    <value>Fully recursive</value>
  </data>
  <data name="SvnDepthUnknown" xml:space="preserve">
    <value>Working copy</value>
  </data>
  <data name="TwoDifferentTreesDescription" xml:space="preserve">
    <value>Use this method to merge the differences between two URL and revision pairs into the current location.  This could be used as an alternative to the reintegrate merge scenario when you want to control the specific path and revisions that are being compared for the merge input.</value>
  </data>
  <data name="TwoDifferentTreesImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>images\TwoDifferentTrees.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Unchanged" xml:space="preserve">
    <value>Unchanged</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>