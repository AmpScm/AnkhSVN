//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ErrorReportExtractor {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ErrorReportsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ErrorReportsDataSet : System.Data.DataSet {
        
        private ErrorReportsDataTable tableErrorReports;
        
        private MailItemsDataTable tableMailItems;
        
        private StackTraceLinesDataTable tableStackTraceLines;
        
        private ErrorReportItemsDataTable tableErrorReportItems;
        
        private System.Data.DataRelation relationFK_ErrorReplies_ErrorReplies;
        
        private System.Data.DataRelation relationFK_ErrorReports_MailItems;
        
        private System.Data.DataRelation relationFK_StackTraceLines_ErrorReports;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ErrorReportsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ErrorReportsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ErrorReports"] != null)) {
                    base.Tables.Add(new ErrorReportsDataTable(ds.Tables["ErrorReports"]));
                }
                if ((ds.Tables["MailItems"] != null)) {
                    base.Tables.Add(new MailItemsDataTable(ds.Tables["MailItems"]));
                }
                if ((ds.Tables["StackTraceLines"] != null)) {
                    base.Tables.Add(new StackTraceLinesDataTable(ds.Tables["StackTraceLines"]));
                }
                if ((ds.Tables["ErrorReportItems"] != null)) {
                    base.Tables.Add(new ErrorReportItemsDataTable(ds.Tables["ErrorReportItems"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorReportsDataTable ErrorReports {
            get {
                return this.tableErrorReports;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailItemsDataTable MailItems {
            get {
                return this.tableMailItems;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StackTraceLinesDataTable StackTraceLines {
            get {
                return this.tableStackTraceLines;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorReportItemsDataTable ErrorReportItems {
            get {
                return this.tableErrorReportItems;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ErrorReportsDataSet cln = ((ErrorReportsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ErrorReports"] != null)) {
                    base.Tables.Add(new ErrorReportsDataTable(ds.Tables["ErrorReports"]));
                }
                if ((ds.Tables["MailItems"] != null)) {
                    base.Tables.Add(new MailItemsDataTable(ds.Tables["MailItems"]));
                }
                if ((ds.Tables["StackTraceLines"] != null)) {
                    base.Tables.Add(new StackTraceLinesDataTable(ds.Tables["StackTraceLines"]));
                }
                if ((ds.Tables["ErrorReportItems"] != null)) {
                    base.Tables.Add(new ErrorReportItemsDataTable(ds.Tables["ErrorReportItems"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableErrorReports = ((ErrorReportsDataTable)(base.Tables["ErrorReports"]));
            if ((initTable == true)) {
                if ((this.tableErrorReports != null)) {
                    this.tableErrorReports.InitVars();
                }
            }
            this.tableMailItems = ((MailItemsDataTable)(base.Tables["MailItems"]));
            if ((initTable == true)) {
                if ((this.tableMailItems != null)) {
                    this.tableMailItems.InitVars();
                }
            }
            this.tableStackTraceLines = ((StackTraceLinesDataTable)(base.Tables["StackTraceLines"]));
            if ((initTable == true)) {
                if ((this.tableStackTraceLines != null)) {
                    this.tableStackTraceLines.InitVars();
                }
            }
            this.tableErrorReportItems = ((ErrorReportItemsDataTable)(base.Tables["ErrorReportItems"]));
            if ((initTable == true)) {
                if ((this.tableErrorReportItems != null)) {
                    this.tableErrorReportItems.InitVars();
                }
            }
            this.relationFK_ErrorReplies_ErrorReplies = this.Relations["FK_ErrorReplies_ErrorReplies"];
            this.relationFK_ErrorReports_MailItems = this.Relations["FK_ErrorReports_MailItems"];
            this.relationFK_StackTraceLines_ErrorReports = this.Relations["FK_StackTraceLines_ErrorReports"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ErrorReportsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ErrorReportsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableErrorReports = new ErrorReportsDataTable();
            base.Tables.Add(this.tableErrorReports);
            this.tableMailItems = new MailItemsDataTable();
            base.Tables.Add(this.tableMailItems);
            this.tableStackTraceLines = new StackTraceLinesDataTable();
            base.Tables.Add(this.tableStackTraceLines);
            this.tableErrorReportItems = new ErrorReportItemsDataTable();
            base.Tables.Add(this.tableErrorReportItems);
            this.relationFK_ErrorReplies_ErrorReplies = new System.Data.DataRelation("FK_ErrorReplies_ErrorReplies", new System.Data.DataColumn[] {
                        this.tableMailItems.IDColumn}, new System.Data.DataColumn[] {
                        this.tableMailItems.ParentReplyColumn}, false);
            this.Relations.Add(this.relationFK_ErrorReplies_ErrorReplies);
            this.relationFK_ErrorReports_MailItems = new System.Data.DataRelation("FK_ErrorReports_MailItems", new System.Data.DataColumn[] {
                        this.tableMailItems.IDColumn}, new System.Data.DataColumn[] {
                        this.tableErrorReports.MailItemIDColumn}, false);
            this.Relations.Add(this.relationFK_ErrorReports_MailItems);
            this.relationFK_StackTraceLines_ErrorReports = new System.Data.DataRelation("FK_StackTraceLines_ErrorReports", new System.Data.DataColumn[] {
                        this.tableErrorReports.IDColumn}, new System.Data.DataColumn[] {
                        this.tableStackTraceLines.ErrorReportItemColumn}, false);
            this.Relations.Add(this.relationFK_StackTraceLines_ErrorReports);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeErrorReports() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMailItems() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStackTraceLines() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeErrorReportItems() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ErrorReportsDataSet ds = new ErrorReportsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ErrorReportsRowChangeEventHandler(object sender, ErrorReportsRowChangeEvent e);
        
        public delegate void MailItemsRowChangeEventHandler(object sender, MailItemsRowChangeEvent e);
        
        public delegate void StackTraceLinesRowChangeEventHandler(object sender, StackTraceLinesRowChangeEvent e);
        
        public delegate void ErrorReportItemsRowChangeEventHandler(object sender, ErrorReportItemsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ErrorReportsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnExceptionType;
            
            private System.Data.DataColumn columnExceptionMessage;
            
            private System.Data.DataColumn columnStackTrace;
            
            private System.Data.DataColumn columnMajorVersion;
            
            private System.Data.DataColumn columnMinorVersion;
            
            private System.Data.DataColumn columnPatchVersion;
            
            private System.Data.DataColumn columnRevision;
            
            private System.Data.DataColumn columnErrorReportItemID;
            
            private System.Data.DataColumn columnMailItemID;
            
            private System.Data.DataColumn columnDTEVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsDataTable() {
                this.TableName = "ErrorReports";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorReportsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ErrorReportsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionTypeColumn {
                get {
                    return this.columnExceptionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionMessageColumn {
                get {
                    return this.columnExceptionMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StackTraceColumn {
                get {
                    return this.columnStackTrace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MajorVersionColumn {
                get {
                    return this.columnMajorVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinorVersionColumn {
                get {
                    return this.columnMinorVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PatchVersionColumn {
                get {
                    return this.columnPatchVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RevisionColumn {
                get {
                    return this.columnRevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorReportItemIDColumn {
                get {
                    return this.columnErrorReportItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailItemIDColumn {
                get {
                    return this.columnMailItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DTEVersionColumn {
                get {
                    return this.columnDTEVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow this[int index] {
                get {
                    return ((ErrorReportsRow)(this.Rows[index]));
                }
            }
            
            public event ErrorReportsRowChangeEventHandler ErrorReportsRowChanging;
            
            public event ErrorReportsRowChangeEventHandler ErrorReportsRowChanged;
            
            public event ErrorReportsRowChangeEventHandler ErrorReportsRowDeleting;
            
            public event ErrorReportsRowChangeEventHandler ErrorReportsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddErrorReportsRow(ErrorReportsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow AddErrorReportsRow(string ExceptionType, string ExceptionMessage, string StackTrace, int MajorVersion, int MinorVersion, int PatchVersion, int Revision, string ErrorReportItemID, MailItemsRow parentMailItemsRowByFK_ErrorReports_MailItems, string DTEVersion) {
                ErrorReportsRow rowErrorReportsRow = ((ErrorReportsRow)(this.NewRow()));
                rowErrorReportsRow.ItemArray = new object[] {
                        null,
                        ExceptionType,
                        ExceptionMessage,
                        StackTrace,
                        MajorVersion,
                        MinorVersion,
                        PatchVersion,
                        Revision,
                        ErrorReportItemID,
                        parentMailItemsRowByFK_ErrorReports_MailItems[0],
                        DTEVersion};
                this.Rows.Add(rowErrorReportsRow);
                return rowErrorReportsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow FindByID(int ID) {
                return ((ErrorReportsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ErrorReportsDataTable cln = ((ErrorReportsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ErrorReportsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnExceptionType = base.Columns["ExceptionType"];
                this.columnExceptionMessage = base.Columns["ExceptionMessage"];
                this.columnStackTrace = base.Columns["StackTrace"];
                this.columnMajorVersion = base.Columns["MajorVersion"];
                this.columnMinorVersion = base.Columns["MinorVersion"];
                this.columnPatchVersion = base.Columns["PatchVersion"];
                this.columnRevision = base.Columns["Revision"];
                this.columnErrorReportItemID = base.Columns["ErrorReportItemID"];
                this.columnMailItemID = base.Columns["MailItemID"];
                this.columnDTEVersion = base.Columns["DTEVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnExceptionType = new System.Data.DataColumn("ExceptionType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionType);
                this.columnExceptionMessage = new System.Data.DataColumn("ExceptionMessage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionMessage);
                this.columnStackTrace = new System.Data.DataColumn("StackTrace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStackTrace);
                this.columnMajorVersion = new System.Data.DataColumn("MajorVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMajorVersion);
                this.columnMinorVersion = new System.Data.DataColumn("MinorVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinorVersion);
                this.columnPatchVersion = new System.Data.DataColumn("PatchVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatchVersion);
                this.columnRevision = new System.Data.DataColumn("Revision", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevision);
                this.columnErrorReportItemID = new System.Data.DataColumn("ErrorReportItemID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorReportItemID);
                this.columnMailItemID = new System.Data.DataColumn("MailItemID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailItemID);
                this.columnDTEVersion = new System.Data.DataColumn("DTEVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTEVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnExceptionType.MaxLength = 2147483647;
                this.columnExceptionMessage.MaxLength = 2147483647;
                this.columnStackTrace.MaxLength = 2147483647;
                this.columnErrorReportItemID.MaxLength = 250;
                this.columnDTEVersion.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow NewErrorReportsRow() {
                return ((ErrorReportsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ErrorReportsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ErrorReportsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorReportsRowChanged != null)) {
                    this.ErrorReportsRowChanged(this, new ErrorReportsRowChangeEvent(((ErrorReportsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorReportsRowChanging != null)) {
                    this.ErrorReportsRowChanging(this, new ErrorReportsRowChangeEvent(((ErrorReportsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorReportsRowDeleted != null)) {
                    this.ErrorReportsRowDeleted(this, new ErrorReportsRowChangeEvent(((ErrorReportsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorReportsRowDeleting != null)) {
                    this.ErrorReportsRowDeleting(this, new ErrorReportsRowChangeEvent(((ErrorReportsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveErrorReportsRow(ErrorReportsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ErrorReportsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MailItemsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnBody;
            
            private System.Data.DataColumn columnSenderName;
            
            private System.Data.DataColumn columnSenderEmail;
            
            private System.Data.DataColumn columnRecipientName;
            
            private System.Data.DataColumn columnRecipientEmail;
            
            private System.Data.DataColumn columnParentReply;
            
            private System.Data.DataColumn columnTime;
            
            private System.Data.DataColumn columnMailID;
            
            private System.Data.DataColumn columnErrorReportID;
            
            private System.Data.DataColumn columnRead;
            
            private System.Data.DataColumn columnNumItemsInThread;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsDataTable() {
                this.TableName = "MailItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MailItemsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MailItemsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderNameColumn {
                get {
                    return this.columnSenderName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderEmailColumn {
                get {
                    return this.columnSenderEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecipientNameColumn {
                get {
                    return this.columnRecipientName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecipientEmailColumn {
                get {
                    return this.columnRecipientEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParentReplyColumn {
                get {
                    return this.columnParentReply;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailIDColumn {
                get {
                    return this.columnMailID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorReportIDColumn {
                get {
                    return this.columnErrorReportID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadColumn {
                get {
                    return this.columnRead;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumItemsInThreadColumn {
                get {
                    return this.columnNumItemsInThread;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow this[int index] {
                get {
                    return ((MailItemsRow)(this.Rows[index]));
                }
            }
            
            public event MailItemsRowChangeEventHandler MailItemsRowChanging;
            
            public event MailItemsRowChangeEventHandler MailItemsRowChanged;
            
            public event MailItemsRowChangeEventHandler MailItemsRowDeleting;
            
            public event MailItemsRowChangeEventHandler MailItemsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMailItemsRow(MailItemsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow AddMailItemsRow(string Body, string SenderName, string SenderEmail, string RecipientName, string RecipientEmail, MailItemsRow parentMailItemsRowByFK_ErrorReplies_ErrorReplies, System.DateTime Time, string MailID, int ErrorReportID, bool Read, int NumItemsInThread) {
                MailItemsRow rowMailItemsRow = ((MailItemsRow)(this.NewRow()));
                rowMailItemsRow.ItemArray = new object[] {
                        null,
                        Body,
                        SenderName,
                        SenderEmail,
                        RecipientName,
                        RecipientEmail,
                        parentMailItemsRowByFK_ErrorReplies_ErrorReplies[0],
                        Time,
                        MailID,
                        ErrorReportID,
                        Read,
                        NumItemsInThread};
                this.Rows.Add(rowMailItemsRow);
                return rowMailItemsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow FindByID(int ID) {
                return ((MailItemsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MailItemsDataTable cln = ((MailItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MailItemsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBody = base.Columns["Body"];
                this.columnSenderName = base.Columns["SenderName"];
                this.columnSenderEmail = base.Columns["SenderEmail"];
                this.columnRecipientName = base.Columns["RecipientName"];
                this.columnRecipientEmail = base.Columns["RecipientEmail"];
                this.columnParentReply = base.Columns["ParentReply"];
                this.columnTime = base.Columns["Time"];
                this.columnMailID = base.Columns["MailID"];
                this.columnErrorReportID = base.Columns["ErrorReportID"];
                this.columnRead = base.Columns["Read"];
                this.columnNumItemsInThread = base.Columns["NumItemsInThread"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBody = new System.Data.DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnSenderName = new System.Data.DataColumn("SenderName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderName);
                this.columnSenderEmail = new System.Data.DataColumn("SenderEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderEmail);
                this.columnRecipientName = new System.Data.DataColumn("RecipientName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecipientName);
                this.columnRecipientEmail = new System.Data.DataColumn("RecipientEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecipientEmail);
                this.columnParentReply = new System.Data.DataColumn("ParentReply", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentReply);
                this.columnTime = new System.Data.DataColumn("Time", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnMailID = new System.Data.DataColumn("MailID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailID);
                this.columnErrorReportID = new System.Data.DataColumn("ErrorReportID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorReportID);
                this.columnRead = new System.Data.DataColumn("Read", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRead);
                this.columnNumItemsInThread = new System.Data.DataColumn("NumItemsInThread", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumItemsInThread);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnBody.AllowDBNull = false;
                this.columnBody.MaxLength = 2147483647;
                this.columnSenderName.MaxLength = 2147483647;
                this.columnSenderEmail.AllowDBNull = false;
                this.columnSenderEmail.MaxLength = 2147483647;
                this.columnRecipientName.MaxLength = 2147483647;
                this.columnRecipientEmail.MaxLength = 2147483647;
                this.columnTime.AllowDBNull = false;
                this.columnMailID.MaxLength = 250;
                this.columnRead.AllowDBNull = false;
                this.columnNumItemsInThread.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow NewMailItemsRow() {
                return ((MailItemsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MailItemsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MailItemsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailItemsRowChanged != null)) {
                    this.MailItemsRowChanged(this, new MailItemsRowChangeEvent(((MailItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailItemsRowChanging != null)) {
                    this.MailItemsRowChanging(this, new MailItemsRowChangeEvent(((MailItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailItemsRowDeleted != null)) {
                    this.MailItemsRowDeleted(this, new MailItemsRowChangeEvent(((MailItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailItemsRowDeleting != null)) {
                    this.MailItemsRowDeleting(this, new MailItemsRowChangeEvent(((MailItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMailItemsRow(MailItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MailItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StackTraceLinesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOldErrorReportItem;
            
            private System.Data.DataColumn columnMethodName;
            
            private System.Data.DataColumn columnParameters;
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnLineNumber;
            
            private System.Data.DataColumn columnSequenceNumber;
            
            private System.Data.DataColumn columnErrorReportItem;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesDataTable() {
                this.TableName = "StackTraceLines";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StackTraceLinesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StackTraceLinesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldErrorReportItemColumn {
                get {
                    return this.columnOldErrorReportItem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MethodNameColumn {
                get {
                    return this.columnMethodName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParametersColumn {
                get {
                    return this.columnParameters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineNumberColumn {
                get {
                    return this.columnLineNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SequenceNumberColumn {
                get {
                    return this.columnSequenceNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorReportItemColumn {
                get {
                    return this.columnErrorReportItem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow this[int index] {
                get {
                    return ((StackTraceLinesRow)(this.Rows[index]));
                }
            }
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowChanging;
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowChanged;
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowDeleting;
            
            public event StackTraceLinesRowChangeEventHandler StackTraceLinesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStackTraceLinesRow(StackTraceLinesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow AddStackTraceLinesRow(string OldErrorReportItem, string MethodName, string Parameters, string Filename, int LineNumber, int SequenceNumber, ErrorReportsRow parentErrorReportsRowByFK_StackTraceLines_ErrorReports) {
                StackTraceLinesRow rowStackTraceLinesRow = ((StackTraceLinesRow)(this.NewRow()));
                rowStackTraceLinesRow.ItemArray = new object[] {
                        OldErrorReportItem,
                        MethodName,
                        Parameters,
                        Filename,
                        LineNumber,
                        SequenceNumber,
                        parentErrorReportsRowByFK_StackTraceLines_ErrorReports[0]};
                this.Rows.Add(rowStackTraceLinesRow);
                return rowStackTraceLinesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StackTraceLinesDataTable cln = ((StackTraceLinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StackTraceLinesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOldErrorReportItem = base.Columns["OldErrorReportItem"];
                this.columnMethodName = base.Columns["MethodName"];
                this.columnParameters = base.Columns["Parameters"];
                this.columnFilename = base.Columns["Filename"];
                this.columnLineNumber = base.Columns["LineNumber"];
                this.columnSequenceNumber = base.Columns["SequenceNumber"];
                this.columnErrorReportItem = base.Columns["ErrorReportItem"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOldErrorReportItem = new System.Data.DataColumn("OldErrorReportItem", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldErrorReportItem);
                this.columnMethodName = new System.Data.DataColumn("MethodName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMethodName);
                this.columnParameters = new System.Data.DataColumn("Parameters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParameters);
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilename);
                this.columnLineNumber = new System.Data.DataColumn("LineNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineNumber);
                this.columnSequenceNumber = new System.Data.DataColumn("SequenceNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNumber);
                this.columnErrorReportItem = new System.Data.DataColumn("ErrorReportItem", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorReportItem);
                this.columnOldErrorReportItem.AllowDBNull = false;
                this.columnOldErrorReportItem.MaxLength = 250;
                this.columnMethodName.MaxLength = 2147483647;
                this.columnParameters.MaxLength = 2147483647;
                this.columnFilename.MaxLength = 2147483647;
                this.columnSequenceNumber.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow NewStackTraceLinesRow() {
                return ((StackTraceLinesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StackTraceLinesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StackTraceLinesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StackTraceLinesRowChanged != null)) {
                    this.StackTraceLinesRowChanged(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StackTraceLinesRowChanging != null)) {
                    this.StackTraceLinesRowChanging(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StackTraceLinesRowDeleted != null)) {
                    this.StackTraceLinesRowDeleted(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StackTraceLinesRowDeleting != null)) {
                    this.StackTraceLinesRowDeleting(this, new StackTraceLinesRowChangeEvent(((StackTraceLinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStackTraceLinesRow(StackTraceLinesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StackTraceLinesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ErrorReportItemsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnExceptionType;
            
            private System.Data.DataColumn columnExceptionMessage;
            
            private System.Data.DataColumn columnStackTrace;
            
            private System.Data.DataColumn columnMajorVersion;
            
            private System.Data.DataColumn columnMinorVersion;
            
            private System.Data.DataColumn columnPatchVersion;
            
            private System.Data.DataColumn columnRevision;
            
            private System.Data.DataColumn columnErrorReportItemID;
            
            private System.Data.DataColumn columnMailItemID;
            
            private System.Data.DataColumn columnBody;
            
            private System.Data.DataColumn columnSenderName;
            
            private System.Data.DataColumn columnSenderEmail;
            
            private System.Data.DataColumn columnRecipientName;
            
            private System.Data.DataColumn columnRecipientEmail;
            
            private System.Data.DataColumn columnParentReply;
            
            private System.Data.DataColumn columnTime;
            
            private System.Data.DataColumn columnMailID;
            
            private System.Data.DataColumn columnSubject;
            
            private System.Data.DataColumn columnReplyCount;
            
            private System.Data.DataColumn columnRead;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsDataTable() {
                this.TableName = "ErrorReportItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorReportItemsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ErrorReportItemsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionTypeColumn {
                get {
                    return this.columnExceptionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExceptionMessageColumn {
                get {
                    return this.columnExceptionMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StackTraceColumn {
                get {
                    return this.columnStackTrace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MajorVersionColumn {
                get {
                    return this.columnMajorVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinorVersionColumn {
                get {
                    return this.columnMinorVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PatchVersionColumn {
                get {
                    return this.columnPatchVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RevisionColumn {
                get {
                    return this.columnRevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorReportItemIDColumn {
                get {
                    return this.columnErrorReportItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailItemIDColumn {
                get {
                    return this.columnMailItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderNameColumn {
                get {
                    return this.columnSenderName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderEmailColumn {
                get {
                    return this.columnSenderEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecipientNameColumn {
                get {
                    return this.columnRecipientName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecipientEmailColumn {
                get {
                    return this.columnRecipientEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParentReplyColumn {
                get {
                    return this.columnParentReply;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailIDColumn {
                get {
                    return this.columnMailID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReplyCountColumn {
                get {
                    return this.columnReplyCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadColumn {
                get {
                    return this.columnRead;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow this[int index] {
                get {
                    return ((ErrorReportItemsRow)(this.Rows[index]));
                }
            }
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowChanging;
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowChanged;
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowDeleting;
            
            public event ErrorReportItemsRowChangeEventHandler ErrorReportItemsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddErrorReportItemsRow(ErrorReportItemsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow AddErrorReportItemsRow(
                        int ID, 
                        string ExceptionType, 
                        string ExceptionMessage, 
                        string StackTrace, 
                        int MajorVersion, 
                        int MinorVersion, 
                        int PatchVersion, 
                        int Revision, 
                        string ErrorReportItemID, 
                        int MailItemID, 
                        string Body, 
                        string SenderName, 
                        string SenderEmail, 
                        string RecipientName, 
                        string RecipientEmail, 
                        int ParentReply, 
                        System.DateTime Time, 
                        string MailID, 
                        string Subject, 
                        int ReplyCount, 
                        bool Read) {
                ErrorReportItemsRow rowErrorReportItemsRow = ((ErrorReportItemsRow)(this.NewRow()));
                rowErrorReportItemsRow.ItemArray = new object[] {
                        ID,
                        ExceptionType,
                        ExceptionMessage,
                        StackTrace,
                        MajorVersion,
                        MinorVersion,
                        PatchVersion,
                        Revision,
                        ErrorReportItemID,
                        MailItemID,
                        Body,
                        SenderName,
                        SenderEmail,
                        RecipientName,
                        RecipientEmail,
                        ParentReply,
                        Time,
                        MailID,
                        Subject,
                        ReplyCount,
                        Read};
                this.Rows.Add(rowErrorReportItemsRow);
                return rowErrorReportItemsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow FindByID(int ID) {
                return ((ErrorReportItemsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ErrorReportItemsDataTable cln = ((ErrorReportItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ErrorReportItemsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnExceptionType = base.Columns["ExceptionType"];
                this.columnExceptionMessage = base.Columns["ExceptionMessage"];
                this.columnStackTrace = base.Columns["StackTrace"];
                this.columnMajorVersion = base.Columns["MajorVersion"];
                this.columnMinorVersion = base.Columns["MinorVersion"];
                this.columnPatchVersion = base.Columns["PatchVersion"];
                this.columnRevision = base.Columns["Revision"];
                this.columnErrorReportItemID = base.Columns["ErrorReportItemID"];
                this.columnMailItemID = base.Columns["MailItemID"];
                this.columnBody = base.Columns["Body"];
                this.columnSenderName = base.Columns["SenderName"];
                this.columnSenderEmail = base.Columns["SenderEmail"];
                this.columnRecipientName = base.Columns["RecipientName"];
                this.columnRecipientEmail = base.Columns["RecipientEmail"];
                this.columnParentReply = base.Columns["ParentReply"];
                this.columnTime = base.Columns["Time"];
                this.columnMailID = base.Columns["MailID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnReplyCount = base.Columns["ReplyCount"];
                this.columnRead = base.Columns["Read"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnExceptionType = new System.Data.DataColumn("ExceptionType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionType);
                this.columnExceptionMessage = new System.Data.DataColumn("ExceptionMessage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptionMessage);
                this.columnStackTrace = new System.Data.DataColumn("StackTrace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStackTrace);
                this.columnMajorVersion = new System.Data.DataColumn("MajorVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMajorVersion);
                this.columnMinorVersion = new System.Data.DataColumn("MinorVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinorVersion);
                this.columnPatchVersion = new System.Data.DataColumn("PatchVersion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatchVersion);
                this.columnRevision = new System.Data.DataColumn("Revision", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevision);
                this.columnErrorReportItemID = new System.Data.DataColumn("ErrorReportItemID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorReportItemID);
                this.columnMailItemID = new System.Data.DataColumn("MailItemID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailItemID);
                this.columnBody = new System.Data.DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnSenderName = new System.Data.DataColumn("SenderName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderName);
                this.columnSenderEmail = new System.Data.DataColumn("SenderEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderEmail);
                this.columnRecipientName = new System.Data.DataColumn("RecipientName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecipientName);
                this.columnRecipientEmail = new System.Data.DataColumn("RecipientEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecipientEmail);
                this.columnParentReply = new System.Data.DataColumn("ParentReply", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentReply);
                this.columnTime = new System.Data.DataColumn("Time", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnMailID = new System.Data.DataColumn("MailID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailID);
                this.columnSubject = new System.Data.DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnReplyCount = new System.Data.DataColumn("ReplyCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplyCount);
                this.columnRead = new System.Data.DataColumn("Read", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRead);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnExceptionType.MaxLength = 2147483647;
                this.columnExceptionMessage.MaxLength = 2147483647;
                this.columnStackTrace.MaxLength = 2147483647;
                this.columnErrorReportItemID.MaxLength = 250;
                this.columnBody.AllowDBNull = false;
                this.columnBody.MaxLength = 2147483647;
                this.columnSenderName.MaxLength = 2147483647;
                this.columnSenderEmail.AllowDBNull = false;
                this.columnSenderEmail.MaxLength = 2147483647;
                this.columnRecipientName.MaxLength = 2147483647;
                this.columnRecipientEmail.MaxLength = 2147483647;
                this.columnTime.AllowDBNull = false;
                this.columnMailID.MaxLength = 250;
                this.columnSubject.MaxLength = 2147483647;
                this.columnReplyCount.ReadOnly = true;
                this.columnRead.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow NewErrorReportItemsRow() {
                return ((ErrorReportItemsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ErrorReportItemsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ErrorReportItemsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorReportItemsRowChanged != null)) {
                    this.ErrorReportItemsRowChanged(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorReportItemsRowChanging != null)) {
                    this.ErrorReportItemsRowChanging(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorReportItemsRowDeleted != null)) {
                    this.ErrorReportItemsRowDeleted(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorReportItemsRowDeleting != null)) {
                    this.ErrorReportItemsRowDeleting(this, new ErrorReportItemsRowChangeEvent(((ErrorReportItemsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveErrorReportItemsRow(ErrorReportItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ErrorReportsDataSet ds = new ErrorReportsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ErrorReportItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ErrorReportsRow : System.Data.DataRow {
            
            private ErrorReportsDataTable tableErrorReports;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorReportsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableErrorReports = ((ErrorReportsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableErrorReports.IDColumn]));
                }
                set {
                    this[this.tableErrorReports.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionType {
                get {
                    try {
                        return ((string)(this[this.tableErrorReports.ExceptionTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionType\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.ExceptionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableErrorReports.ExceptionMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionMessage\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.ExceptionMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StackTrace {
                get {
                    try {
                        return ((string)(this[this.tableErrorReports.StackTraceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StackTrace\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.StackTraceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MajorVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReports.MajorVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MajorVersion\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.MajorVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinorVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReports.MinorVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MinorVersion\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.MinorVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PatchVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReports.PatchVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PatchVersion\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.PatchVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Revision {
                get {
                    try {
                        return ((int)(this[this.tableErrorReports.RevisionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Revision\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.RevisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorReportItemID {
                get {
                    try {
                        return ((string)(this[this.tableErrorReports.ErrorReportItemIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ErrorReportItemID\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.ErrorReportItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MailItemID {
                get {
                    try {
                        return ((int)(this[this.tableErrorReports.MailItemIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MailItemID\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.MailItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DTEVersion {
                get {
                    try {
                        return ((string)(this[this.tableErrorReports.DTEVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DTEVersion\' in table \'ErrorReports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReports.DTEVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow MailItemsRow {
                get {
                    return ((MailItemsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ErrorReports_MailItems"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ErrorReports_MailItems"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionTypeNull() {
                return this.IsNull(this.tableErrorReports.ExceptionTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionTypeNull() {
                this[this.tableErrorReports.ExceptionTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionMessageNull() {
                return this.IsNull(this.tableErrorReports.ExceptionMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionMessageNull() {
                this[this.tableErrorReports.ExceptionMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStackTraceNull() {
                return this.IsNull(this.tableErrorReports.StackTraceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStackTraceNull() {
                this[this.tableErrorReports.StackTraceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMajorVersionNull() {
                return this.IsNull(this.tableErrorReports.MajorVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMajorVersionNull() {
                this[this.tableErrorReports.MajorVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinorVersionNull() {
                return this.IsNull(this.tableErrorReports.MinorVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinorVersionNull() {
                this[this.tableErrorReports.MinorVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatchVersionNull() {
                return this.IsNull(this.tableErrorReports.PatchVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatchVersionNull() {
                this[this.tableErrorReports.PatchVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisionNull() {
                return this.IsNull(this.tableErrorReports.RevisionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisionNull() {
                this[this.tableErrorReports.RevisionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorReportItemIDNull() {
                return this.IsNull(this.tableErrorReports.ErrorReportItemIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorReportItemIDNull() {
                this[this.tableErrorReports.ErrorReportItemIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailItemIDNull() {
                return this.IsNull(this.tableErrorReports.MailItemIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailItemIDNull() {
                this[this.tableErrorReports.MailItemIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDTEVersionNull() {
                return this.IsNull(this.tableErrorReports.DTEVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDTEVersionNull() {
                this[this.tableErrorReports.DTEVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow[] GetStackTraceLinesRows() {
                return ((StackTraceLinesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_StackTraceLines_ErrorReports"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MailItemsRow : System.Data.DataRow {
            
            private MailItemsDataTable tableMailItems;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MailItemsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailItems = ((MailItemsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMailItems.IDColumn]));
                }
                set {
                    this[this.tableMailItems.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    return ((string)(this[this.tableMailItems.BodyColumn]));
                }
                set {
                    this[this.tableMailItems.BodyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SenderName {
                get {
                    try {
                        return ((string)(this[this.tableMailItems.SenderNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SenderName\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.SenderNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SenderEmail {
                get {
                    return ((string)(this[this.tableMailItems.SenderEmailColumn]));
                }
                set {
                    this[this.tableMailItems.SenderEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecipientName {
                get {
                    try {
                        return ((string)(this[this.tableMailItems.RecipientNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecipientName\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.RecipientNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecipientEmail {
                get {
                    try {
                        return ((string)(this[this.tableMailItems.RecipientEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecipientEmail\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.RecipientEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentReply {
                get {
                    try {
                        return ((int)(this[this.tableMailItems.ParentReplyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ParentReply\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.ParentReplyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Time {
                get {
                    return ((System.DateTime)(this[this.tableMailItems.TimeColumn]));
                }
                set {
                    this[this.tableMailItems.TimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailID {
                get {
                    try {
                        return ((string)(this[this.tableMailItems.MailIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MailID\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.MailIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorReportID {
                get {
                    try {
                        return ((int)(this[this.tableMailItems.ErrorReportIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ErrorReportID\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.ErrorReportIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Read {
                get {
                    return ((bool)(this[this.tableMailItems.ReadColumn]));
                }
                set {
                    this[this.tableMailItems.ReadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumItemsInThread {
                get {
                    try {
                        return ((int)(this[this.tableMailItems.NumItemsInThreadColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumItemsInThread\' in table \'MailItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailItems.NumItemsInThreadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow MailItemsRowParent {
                get {
                    return ((MailItemsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ErrorReplies_ErrorReplies"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ErrorReplies_ErrorReplies"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSenderNameNull() {
                return this.IsNull(this.tableMailItems.SenderNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSenderNameNull() {
                this[this.tableMailItems.SenderNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecipientNameNull() {
                return this.IsNull(this.tableMailItems.RecipientNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecipientNameNull() {
                this[this.tableMailItems.RecipientNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecipientEmailNull() {
                return this.IsNull(this.tableMailItems.RecipientEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecipientEmailNull() {
                this[this.tableMailItems.RecipientEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentReplyNull() {
                return this.IsNull(this.tableMailItems.ParentReplyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentReplyNull() {
                this[this.tableMailItems.ParentReplyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailIDNull() {
                return this.IsNull(this.tableMailItems.MailIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailIDNull() {
                this[this.tableMailItems.MailIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorReportIDNull() {
                return this.IsNull(this.tableMailItems.ErrorReportIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorReportIDNull() {
                this[this.tableMailItems.ErrorReportIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumItemsInThreadNull() {
                return this.IsNull(this.tableMailItems.NumItemsInThreadColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumItemsInThreadNull() {
                this[this.tableMailItems.NumItemsInThreadColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow[] GetMailItemsRows() {
                return ((MailItemsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ErrorReplies_ErrorReplies"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow[] GetErrorReportsRows() {
                return ((ErrorReportsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ErrorReports_MailItems"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StackTraceLinesRow : System.Data.DataRow {
            
            private StackTraceLinesDataTable tableStackTraceLines;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StackTraceLinesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStackTraceLines = ((StackTraceLinesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldErrorReportItem {
                get {
                    return ((string)(this[this.tableStackTraceLines.OldErrorReportItemColumn]));
                }
                set {
                    this[this.tableStackTraceLines.OldErrorReportItemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MethodName {
                get {
                    try {
                        return ((string)(this[this.tableStackTraceLines.MethodNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MethodName\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.MethodNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameters {
                get {
                    try {
                        return ((string)(this[this.tableStackTraceLines.ParametersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parameters\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.ParametersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tableStackTraceLines.FilenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filename\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineNumber {
                get {
                    try {
                        return ((int)(this[this.tableStackTraceLines.LineNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LineNumber\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.LineNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequenceNumber {
                get {
                    return ((int)(this[this.tableStackTraceLines.SequenceNumberColumn]));
                }
                set {
                    this[this.tableStackTraceLines.SequenceNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorReportItem {
                get {
                    try {
                        return ((int)(this[this.tableStackTraceLines.ErrorReportItemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ErrorReportItem\' in table \'StackTraceLines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStackTraceLines.ErrorReportItemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow ErrorReportsRow {
                get {
                    return ((ErrorReportsRow)(this.GetParentRow(this.Table.ParentRelations["FK_StackTraceLines_ErrorReports"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_StackTraceLines_ErrorReports"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMethodNameNull() {
                return this.IsNull(this.tableStackTraceLines.MethodNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMethodNameNull() {
                this[this.tableStackTraceLines.MethodNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParametersNull() {
                return this.IsNull(this.tableStackTraceLines.ParametersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParametersNull() {
                this[this.tableStackTraceLines.ParametersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilenameNull() {
                return this.IsNull(this.tableStackTraceLines.FilenameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilenameNull() {
                this[this.tableStackTraceLines.FilenameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNumberNull() {
                return this.IsNull(this.tableStackTraceLines.LineNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNumberNull() {
                this[this.tableStackTraceLines.LineNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorReportItemNull() {
                return this.IsNull(this.tableStackTraceLines.ErrorReportItemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorReportItemNull() {
                this[this.tableStackTraceLines.ErrorReportItemColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ErrorReportItemsRow : System.Data.DataRow {
            
            private ErrorReportItemsDataTable tableErrorReportItems;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorReportItemsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableErrorReportItems = ((ErrorReportItemsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableErrorReportItems.IDColumn]));
                }
                set {
                    this[this.tableErrorReportItems.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionType {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.ExceptionTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionType\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ExceptionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.ExceptionMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExceptionMessage\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ExceptionMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StackTrace {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.StackTraceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StackTrace\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.StackTraceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MajorVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.MajorVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MajorVersion\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.MajorVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinorVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.MinorVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MinorVersion\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.MinorVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PatchVersion {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.PatchVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PatchVersion\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.PatchVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Revision {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.RevisionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Revision\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.RevisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorReportItemID {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.ErrorReportItemIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ErrorReportItemID\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ErrorReportItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MailItemID {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.MailItemIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MailItemID\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.MailItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    return ((string)(this[this.tableErrorReportItems.BodyColumn]));
                }
                set {
                    this[this.tableErrorReportItems.BodyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SenderName {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.SenderNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SenderName\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.SenderNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SenderEmail {
                get {
                    return ((string)(this[this.tableErrorReportItems.SenderEmailColumn]));
                }
                set {
                    this[this.tableErrorReportItems.SenderEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecipientName {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.RecipientNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecipientName\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.RecipientNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecipientEmail {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.RecipientEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecipientEmail\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.RecipientEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentReply {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.ParentReplyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ParentReply\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ParentReplyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Time {
                get {
                    return ((System.DateTime)(this[this.tableErrorReportItems.TimeColumn]));
                }
                set {
                    this[this.tableErrorReportItems.TimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailID {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.MailIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MailID\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.MailIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableErrorReportItems.SubjectColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Subject\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.SubjectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReplyCount {
                get {
                    try {
                        return ((int)(this[this.tableErrorReportItems.ReplyCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReplyCount\' in table \'ErrorReportItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorReportItems.ReplyCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Read {
                get {
                    return ((bool)(this[this.tableErrorReportItems.ReadColumn]));
                }
                set {
                    this[this.tableErrorReportItems.ReadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionTypeNull() {
                return this.IsNull(this.tableErrorReportItems.ExceptionTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionTypeNull() {
                this[this.tableErrorReportItems.ExceptionTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionMessageNull() {
                return this.IsNull(this.tableErrorReportItems.ExceptionMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionMessageNull() {
                this[this.tableErrorReportItems.ExceptionMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStackTraceNull() {
                return this.IsNull(this.tableErrorReportItems.StackTraceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStackTraceNull() {
                this[this.tableErrorReportItems.StackTraceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMajorVersionNull() {
                return this.IsNull(this.tableErrorReportItems.MajorVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMajorVersionNull() {
                this[this.tableErrorReportItems.MajorVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinorVersionNull() {
                return this.IsNull(this.tableErrorReportItems.MinorVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinorVersionNull() {
                this[this.tableErrorReportItems.MinorVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatchVersionNull() {
                return this.IsNull(this.tableErrorReportItems.PatchVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatchVersionNull() {
                this[this.tableErrorReportItems.PatchVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisionNull() {
                return this.IsNull(this.tableErrorReportItems.RevisionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisionNull() {
                this[this.tableErrorReportItems.RevisionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorReportItemIDNull() {
                return this.IsNull(this.tableErrorReportItems.ErrorReportItemIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorReportItemIDNull() {
                this[this.tableErrorReportItems.ErrorReportItemIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailItemIDNull() {
                return this.IsNull(this.tableErrorReportItems.MailItemIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailItemIDNull() {
                this[this.tableErrorReportItems.MailItemIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSenderNameNull() {
                return this.IsNull(this.tableErrorReportItems.SenderNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSenderNameNull() {
                this[this.tableErrorReportItems.SenderNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecipientNameNull() {
                return this.IsNull(this.tableErrorReportItems.RecipientNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecipientNameNull() {
                this[this.tableErrorReportItems.RecipientNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecipientEmailNull() {
                return this.IsNull(this.tableErrorReportItems.RecipientEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecipientEmailNull() {
                this[this.tableErrorReportItems.RecipientEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentReplyNull() {
                return this.IsNull(this.tableErrorReportItems.ParentReplyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentReplyNull() {
                this[this.tableErrorReportItems.ParentReplyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailIDNull() {
                return this.IsNull(this.tableErrorReportItems.MailIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailIDNull() {
                this[this.tableErrorReportItems.MailIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableErrorReportItems.SubjectColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableErrorReportItems.SubjectColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplyCountNull() {
                return this.IsNull(this.tableErrorReportItems.ReplyCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplyCountNull() {
                this[this.tableErrorReportItems.ReplyCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ErrorReportsRowChangeEvent : System.EventArgs {
            
            private ErrorReportsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRowChangeEvent(ErrorReportsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MailItemsRowChangeEvent : System.EventArgs {
            
            private MailItemsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRowChangeEvent(MailItemsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StackTraceLinesRowChangeEvent : System.EventArgs {
            
            private StackTraceLinesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRowChangeEvent(StackTraceLinesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StackTraceLinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ErrorReportItemsRowChangeEvent : System.EventArgs {
            
            private ErrorReportItemsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRowChangeEvent(ErrorReportItemsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorReportItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ErrorReportExtractor.ErrorReportsDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ErrorReportsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ErrorReportsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ErrorReports";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ExceptionType", "ExceptionType");
            tableMapping.ColumnMappings.Add("ExceptionMessage", "ExceptionMessage");
            tableMapping.ColumnMappings.Add("StackTrace", "StackTrace");
            tableMapping.ColumnMappings.Add("MajorVersion", "MajorVersion");
            tableMapping.ColumnMappings.Add("MinorVersion", "MinorVersion");
            tableMapping.ColumnMappings.Add("PatchVersion", "PatchVersion");
            tableMapping.ColumnMappings.Add("Revision", "Revision");
            tableMapping.ColumnMappings.Add("ErrorReportItemID", "ErrorReportItemID");
            tableMapping.ColumnMappings.Add("MailItemID", "MailItemID");
            tableMapping.ColumnMappings.Add("DTEVersion", "DTEVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ErrorReports] WHERE (([ID] = @Original_ID) AND ((@IsNull_MajorVersion = 1 AND [MajorVersion] IS NULL) OR ([MajorVersion] = @Original_MajorVersion)) AND ((@IsNull_MinorVersion = 1 AND [MinorVersion] IS NULL) OR ([MinorVersion] = @Original_MinorVersion)) AND ((@IsNull_PatchVersion = 1 AND [PatchVersion] IS NULL) OR ([PatchVersion] = @Original_PatchVersion)) AND ((@IsNull_Revision = 1 AND [Revision] IS NULL) OR ([Revision] = @Original_Revision)) AND ((@IsNull_ErrorReportItemID = 1 AND [ErrorReportItemID] IS NULL) OR ([ErrorReportItemID] = @Original_ErrorReportItemID)) AND ((@IsNull_MailItemID = 1 AND [MailItemID] IS NULL) OR ([MailItemID] = @Original_MailItemID)) AND ((@IsNull_DTEVersion = 1 AND [DTEVersion] IS NULL) OR ([DTEVersion] = @Original_DTEVersion)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ErrorReportItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItemID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ErrorReportItemID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MailItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailItemID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MailItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DTEVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DTEVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ErrorReports] ([ExceptionType], [ExceptionMessage], [StackTrace], [MajorVersion], [MinorVersion], [PatchVersion], [Revision], [ErrorReportItemID], [MailItemID], [DTEVersion]) VALUES (@ExceptionType, @ExceptionMessage, @StackTrace, @MajorVersion, @MinorVersion, @PatchVersion, @Revision, @ErrorReportItemID, @MailItemID, @DTEVersion);
SELECT ID, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, ErrorReportItemID, MailItemID, DTEVersion FROM ErrorReports WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "StackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportItemID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItemID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MailItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailItemID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DTEVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ErrorReports] SET [ExceptionType] = @ExceptionType, [ExceptionMessage] = @ExceptionMessage, [StackTrace] = @StackTrace, [MajorVersion] = @MajorVersion, [MinorVersion] = @MinorVersion, [PatchVersion] = @PatchVersion, [Revision] = @Revision, [ErrorReportItemID] = @ErrorReportItemID, [MailItemID] = @MailItemID, [DTEVersion] = @DTEVersion WHERE (([ID] = @Original_ID) AND ((@IsNull_MajorVersion = 1 AND [MajorVersion] IS NULL) OR ([MajorVersion] = @Original_MajorVersion)) AND ((@IsNull_MinorVersion = 1 AND [MinorVersion] IS NULL) OR ([MinorVersion] = @Original_MinorVersion)) AND ((@IsNull_PatchVersion = 1 AND [PatchVersion] IS NULL) OR ([PatchVersion] = @Original_PatchVersion)) AND ((@IsNull_Revision = 1 AND [Revision] IS NULL) OR ([Revision] = @Original_Revision)) AND ((@IsNull_ErrorReportItemID = 1 AND [ErrorReportItemID] IS NULL) OR ([ErrorReportItemID] = @Original_ErrorReportItemID)) AND ((@IsNull_MailItemID = 1 AND [MailItemID] IS NULL) OR ([MailItemID] = @Original_MailItemID)) AND ((@IsNull_DTEVersion = 1 AND [DTEVersion] IS NULL) OR ([DTEVersion] = @Original_DTEVersion)));
SELECT ID, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, ErrorReportItemID, MailItemID, DTEVersion FROM ErrorReports WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "ExceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "StackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportItemID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItemID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MailItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailItemID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DTEVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MajorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MinorVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PatchVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ErrorReportItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItemID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ErrorReportItemID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MailItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailItemID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MailItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DTEVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DTEVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ID, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVe" +
                "rsion, PatchVersion, Revision, ErrorReportItemID, MailItemID, \r\n                " +
                "      DTEVersion\r\nFROM         ErrorReports";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"UPDATE    ErrorReports
SET              ExceptionType = @ExceptionType, ExceptionMessage = @ExceptionMessage, StackTrace = @StackTrace, MajorVersion = @MajorVersion, 
                      MinorVersion = @MinorVersion, PatchVersion = @PatchVersion, Revision = @Revision, DTEVersion = @DTEVersion
WHERE     (ID = @Original_ID);   
SELECT ID, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, ErrorReportItemID, MailItemID, DTEVersion FROM ErrorReports WHERE (ID = @ID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "ExceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "ExceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "StackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MajorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MinorVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "PatchVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DTEVersion", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DTEVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.ErrorReportsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.ErrorReportsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorReportsDataSet.ErrorReportsDataTable dataTable = new ErrorReportsDataSet.ErrorReportsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet.ErrorReportsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ErrorReports");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, System.Nullable<int> Original_MajorVersion, System.Nullable<int> Original_MinorVersion, System.Nullable<int> Original_PatchVersion, System.Nullable<int> Original_Revision, string Original_ErrorReportItemID, System.Nullable<int> Original_MailItemID, string Original_DTEVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_MajorVersion.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_MajorVersion.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_MinorVersion.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_MinorVersion.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_PatchVersion.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_PatchVersion.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_Revision.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Revision.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_ErrorReportItemID == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ErrorReportItemID));
            }
            if ((Original_MailItemID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_MailItemID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_DTEVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_DTEVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ExceptionType, string ExceptionMessage, string StackTrace, System.Nullable<int> MajorVersion, System.Nullable<int> MinorVersion, System.Nullable<int> PatchVersion, System.Nullable<int> Revision, string ErrorReportItemID, System.Nullable<int> MailItemID, string DTEVersion) {
            if ((ExceptionType == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(MajorVersion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(MinorVersion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(PatchVersion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Revision.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((ErrorReportItemID == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ErrorReportItemID));
            }
            if ((MailItemID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(MailItemID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((DTEVersion == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(DTEVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ExceptionType, 
                    string ExceptionMessage, 
                    string StackTrace, 
                    System.Nullable<int> MajorVersion, 
                    System.Nullable<int> MinorVersion, 
                    System.Nullable<int> PatchVersion, 
                    System.Nullable<int> Revision, 
                    string ErrorReportItemID, 
                    System.Nullable<int> MailItemID, 
                    string DTEVersion, 
                    int Original_ID, 
                    System.Nullable<int> Original_MajorVersion, 
                    System.Nullable<int> Original_MinorVersion, 
                    System.Nullable<int> Original_PatchVersion, 
                    System.Nullable<int> Original_Revision, 
                    string Original_ErrorReportItemID, 
                    System.Nullable<int> Original_MailItemID, 
                    string Original_DTEVersion, 
                    int ID) {
            if ((ExceptionType == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(MajorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(MinorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(PatchVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Revision.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((ErrorReportItemID == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ErrorReportItemID));
            }
            if ((MailItemID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(MailItemID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((DTEVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(DTEVersion));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ID));
            if ((Original_MajorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_MajorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_MinorVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_MinorVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_PatchVersion.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_PatchVersion.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_Revision.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_Revision.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_ErrorReportItemID == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_ErrorReportItemID));
            }
            if ((Original_MailItemID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_MailItemID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_DTEVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_DTEVersion));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateErrorReport(string ExceptionType, string ExceptionMessage, string StackTrace, System.Nullable<int> MajorVersion, System.Nullable<int> MinorVersion, System.Nullable<int> PatchVersion, System.Nullable<int> Revision, string DTEVersion, int Original_ID, int ID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((ExceptionType == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                command.Parameters[3].Value = ((int)(MajorVersion.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                command.Parameters[4].Value = ((int)(MinorVersion.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                command.Parameters[5].Value = ((int)(PatchVersion.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                command.Parameters[6].Value = ((int)(Revision.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((DTEVersion == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(DTEVersion));
            }
            command.Parameters[8].Value = ((int)(Original_ID));
            command.Parameters[9].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MailItemsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MailItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MailItems";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Body", "Body");
            tableMapping.ColumnMappings.Add("SenderName", "SenderName");
            tableMapping.ColumnMappings.Add("SenderEmail", "SenderEmail");
            tableMapping.ColumnMappings.Add("RecipientName", "RecipientName");
            tableMapping.ColumnMappings.Add("RecipientEmail", "RecipientEmail");
            tableMapping.ColumnMappings.Add("ParentReply", "ParentReply");
            tableMapping.ColumnMappings.Add("Time", "Time");
            tableMapping.ColumnMappings.Add("MailID", "MailID");
            tableMapping.ColumnMappings.Add("ErrorReportID", "ErrorReportID");
            tableMapping.ColumnMappings.Add("Read", "Read");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [MailItems] WHERE (([ID] = @Original_ID) AND ([Read] = @Original_Read) AND ((@IsNull_ParentReply = 1 AND [ParentReply] IS NULL) OR ([ParentReply] = @Original_ParentReply)) AND ([Time] = @Original_Time) AND ((@IsNull_MailID = 1 AND [MailID] IS NULL) OR ([MailID] = @Original_MailID)) AND ((@IsNull_ErrorReportID = 1 AND [ErrorReportID] IS NULL) OR ([ErrorReportID] = @Original_ErrorReportID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Read", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Read", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ParentReply", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ParentReply", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ParentReply", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ParentReply", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Time", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Time", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MailID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MailID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MailID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ErrorReportID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ErrorReportID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [MailItems] ([Body], [SenderName], [SenderEmail], [RecipientName], [RecipientEmail], [Read], [ParentReply], [Time], [MailID], [ErrorReportID]) VALUES (@Body, @SenderName, @SenderEmail, @RecipientName, @RecipientEmail, @Read, @ParentReply, @Time, @MailID, @ErrorReportID);
SELECT ID, Body, SenderName, SenderEmail, RecipientName, RecipientEmail, [Read], ParentReply, Time, MailID, ErrorReportID FROM MailItems WHERE (ID = SCOPE_IDENTITY()) ORDER BY Time";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SenderName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SenderEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RecipientName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RecipientEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Read", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Read", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ParentReply", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ParentReply", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Time", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Time", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MailID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MailID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [MailItems] SET [Body] = @Body, [SenderName] = @SenderName, [SenderEmail] = @SenderEmail, [RecipientName] = @RecipientName, [RecipientEmail] = @RecipientEmail, [Read] = @Read, [ParentReply] = @ParentReply, [Time] = @Time, [MailID] = @MailID, [ErrorReportID] = @ErrorReportID WHERE (([ID] = @Original_ID) AND ([Read] = @Original_Read) AND ((@IsNull_ParentReply = 1 AND [ParentReply] IS NULL) OR ([ParentReply] = @Original_ParentReply)) AND ([Time] = @Original_Time) AND ((@IsNull_MailID = 1 AND [MailID] IS NULL) OR ([MailID] = @Original_MailID)) AND ((@IsNull_ErrorReportID = 1 AND [ErrorReportID] IS NULL) OR ([ErrorReportID] = @Original_ErrorReportID)));
SELECT ID, Body, SenderName, SenderEmail, RecipientName, RecipientEmail, [Read], ParentReply, Time, MailID, ErrorReportID FROM MailItems WHERE (ID = @ID) ORDER BY Time";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SenderName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SenderEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RecipientName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RecipientEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Read", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Read", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ParentReply", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ParentReply", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Time", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Time", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MailID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MailID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Read", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Read", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ParentReply", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ParentReply", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ParentReply", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ParentReply", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Time", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Time", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MailID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MailID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MailID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MailID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ErrorReportID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ErrorReportID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Body, SenderName, SenderEmail, RecipientName, RecipientEmail, [Read], " +
                "ParentReply, Time, MailID, ErrorReportID FROM MailItems ORDER BY [Time]";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT Body, ErrorReportID, ID, MailID, ParentReply, [Read], RecipientEmail, RecipientName, SenderEmail, SenderName, Time FROM MailItems WHERE (ErrorReportID = @ErrorReportID) AND (NOT EXISTS (SELECT 1 AS Expr1 FROM ErrorReports WHERE (MailItemID = MailItems.ID))) ORDER BY Time";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     ID, Body, SenderName, SenderEmail, RecipientName, RecipientEmail, [Read], ParentReply, Time, MailID, ErrorReportID,
                          (SELECT     COUNT(*) AS Expr1
                            FROM          MailItems
                            WHERE      (ErrorReportID = M.ErrorReportID)) AS NumItemsInThread
FROM         MailItems AS M
ORDER BY Time";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE    MailItems\r\nSET              Body = @Body, SenderName = @SenderName, Sen" +
                "derEmail = @SenderEmail, RecipientName = @RecipientName, \r\n                     " +
                " RecipientEmail = @RecipientEmail, [Read] = @Read\r\nWHERE     (ID = @Original_ID)" +
                "";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "SenderName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "SenderEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "RecipientName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "RecipientEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Read", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Read", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.MailItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.MailItemsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorReportsDataSet.MailItemsDataTable dataTable = new ErrorReportsDataSet.MailItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(ErrorReportsDataSet.MailItemsDataTable dataTable, System.Nullable<int> ErrorReportID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ErrorReportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ErrorReportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ErrorReportsDataSet.MailItemsDataTable GetRepliesToReport(System.Nullable<int> ErrorReportID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ErrorReportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ErrorReportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            ErrorReportsDataSet.MailItemsDataTable dataTable = new ErrorReportsDataSet.MailItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy1(ErrorReportsDataSet.MailItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ErrorReportsDataSet.MailItemsDataTable GetMailItemsWithThreadCount() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            ErrorReportsDataSet.MailItemsDataTable dataTable = new ErrorReportsDataSet.MailItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet.MailItemsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MailItems");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, bool Original_Read, System.Nullable<int> Original_ParentReply, System.DateTime Original_Time, string Original_MailID, System.Nullable<int> Original_ErrorReportID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_Read));
            if ((Original_ParentReply.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ParentReply.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Time));
            if ((Original_MailID == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_MailID));
            }
            if ((Original_ErrorReportID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_ErrorReportID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Body, string SenderName, string SenderEmail, string RecipientName, string RecipientEmail, bool Read, System.Nullable<int> ParentReply, System.DateTime Time, string MailID, System.Nullable<int> ErrorReportID) {
            if ((Body == null)) {
                throw new System.ArgumentNullException("Body");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Body));
            }
            if ((SenderName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SenderName));
            }
            if ((SenderEmail == null)) {
                throw new System.ArgumentNullException("SenderEmail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SenderEmail));
            }
            if ((RecipientName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(RecipientName));
            }
            if ((RecipientEmail == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(RecipientEmail));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(Read));
            if ((ParentReply.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ParentReply.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(Time));
            if ((MailID == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MailID));
            }
            if ((ErrorReportID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(ErrorReportID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Body, 
                    string SenderName, 
                    string SenderEmail, 
                    string RecipientName, 
                    string RecipientEmail, 
                    bool Read, 
                    System.Nullable<int> ParentReply, 
                    System.DateTime Time, 
                    string MailID, 
                    System.Nullable<int> ErrorReportID, 
                    int Original_ID, 
                    bool Original_Read, 
                    System.Nullable<int> Original_ParentReply, 
                    System.DateTime Original_Time, 
                    string Original_MailID, 
                    System.Nullable<int> Original_ErrorReportID, 
                    int ID) {
            if ((Body == null)) {
                throw new System.ArgumentNullException("Body");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Body));
            }
            if ((SenderName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SenderName));
            }
            if ((SenderEmail == null)) {
                throw new System.ArgumentNullException("SenderEmail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SenderEmail));
            }
            if ((RecipientName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(RecipientName));
            }
            if ((RecipientEmail == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(RecipientEmail));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Read));
            if ((ParentReply.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ParentReply.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Time));
            if ((MailID == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(MailID));
            }
            if ((ErrorReportID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ErrorReportID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_Read));
            if ((Original_ParentReply.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ParentReply.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_Time));
            if ((Original_MailID == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_MailID));
            }
            if ((Original_ErrorReportID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_ErrorReportID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateMailItem(string Body, string SenderName, string SenderEmail, string RecipientName, string RecipientEmail, bool Read, int Original_ID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((Body == null)) {
                throw new System.ArgumentNullException("Body");
            }
            else {
                command.Parameters[0].Value = ((string)(Body));
            }
            if ((SenderName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(SenderName));
            }
            if ((SenderEmail == null)) {
                throw new System.ArgumentNullException("SenderEmail");
            }
            else {
                command.Parameters[2].Value = ((string)(SenderEmail));
            }
            if ((RecipientName == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(RecipientName));
            }
            if ((RecipientEmail == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(RecipientEmail));
            }
            command.Parameters[5].Value = ((bool)(Read));
            command.Parameters[6].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StackTraceLinesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StackTraceLinesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StackTraceLines";
            tableMapping.ColumnMappings.Add("OldErrorReportItem", "OldErrorReportItem");
            tableMapping.ColumnMappings.Add("MethodName", "MethodName");
            tableMapping.ColumnMappings.Add("Parameters", "Parameters");
            tableMapping.ColumnMappings.Add("Filename", "Filename");
            tableMapping.ColumnMappings.Add("LineNumber", "LineNumber");
            tableMapping.ColumnMappings.Add("SequenceNumber", "SequenceNumber");
            tableMapping.ColumnMappings.Add("ErrorReportItem", "ErrorReportItem");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[StackTraceLines] ([OldErrorReportItem], [MethodName], [Parameters], [Filename], [LineNumber], [SequenceNumber], [ErrorReportItem]) VALUES (@OldErrorReportItem, @MethodName, @Parameters, @Filename, @LineNumber, @SequenceNumber, @ErrorReportItem)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OldErrorReportItem", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OldErrorReportItem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MethodName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MethodName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Parameters", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Parameters", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Filename", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Filename", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LineNumber", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LineNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SequenceNumber", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SequenceNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ErrorReportItem", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ErrorReportItem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OldErrorReportItem, MethodName, Parameters, Filename, LineNumber, Sequence" +
                "Number, ErrorReportItem FROM dbo.StackTraceLines";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.StackTraceLinesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.StackTraceLinesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorReportsDataSet.StackTraceLinesDataTable dataTable = new ErrorReportsDataSet.StackTraceLinesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet.StackTraceLinesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorReportsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "StackTraceLines");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string OldErrorReportItem, string MethodName, string Parameters, string Filename, System.Nullable<int> LineNumber, int SequenceNumber, System.Nullable<int> ErrorReportItem) {
            if ((OldErrorReportItem == null)) {
                throw new System.ArgumentNullException("OldErrorReportItem");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(OldErrorReportItem));
            }
            if ((MethodName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MethodName));
            }
            if ((Parameters == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameters));
            }
            if ((Filename == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Filename));
            }
            if ((LineNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(LineNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(SequenceNumber));
            if ((ErrorReportItem.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ErrorReportItem.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ErrorReportItemsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ErrorReportItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ErrorReportItems";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ExceptionType", "ExceptionType");
            tableMapping.ColumnMappings.Add("ExceptionMessage", "ExceptionMessage");
            tableMapping.ColumnMappings.Add("StackTrace", "StackTrace");
            tableMapping.ColumnMappings.Add("MajorVersion", "MajorVersion");
            tableMapping.ColumnMappings.Add("MinorVersion", "MinorVersion");
            tableMapping.ColumnMappings.Add("PatchVersion", "PatchVersion");
            tableMapping.ColumnMappings.Add("Revision", "Revision");
            tableMapping.ColumnMappings.Add("ErrorReportItemID", "ErrorReportItemID");
            tableMapping.ColumnMappings.Add("MailItemID", "MailItemID");
            tableMapping.ColumnMappings.Add("Body", "Body");
            tableMapping.ColumnMappings.Add("SenderName", "SenderName");
            tableMapping.ColumnMappings.Add("SenderEmail", "SenderEmail");
            tableMapping.ColumnMappings.Add("RecipientName", "RecipientName");
            tableMapping.ColumnMappings.Add("RecipientEmail", "RecipientEmail");
            tableMapping.ColumnMappings.Add("ParentReply", "ParentReply");
            tableMapping.ColumnMappings.Add("Time", "Time");
            tableMapping.ColumnMappings.Add("MailID", "MailID");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("ReplyCount", "ReplyCount");
            tableMapping.ColumnMappings.Add("Read", "Read");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, ExceptionType, ExceptionMessage, StackTrace, MajorVersion, MinorVersion, PatchVersion, Revision, ErrorReportItemID, MailItemID, Body, SenderName, SenderEmail, RecipientName, RecipientEmail, ParentReply, Time, MailID, Subject, [Read], (SELECT COUNT(ID) AS Expr1 FROM MailItems WHERE (ErrorReportID = ErrorReportItems.ID) AND (ID <> ErrorReportItems.MailItemID)) AS ReplyCount FROM ErrorReportItems ORDER BY Time";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorReportsDataSet.ErrorReportItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorReportsDataSet.ErrorReportItemsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorReportsDataSet.ErrorReportItemsDataTable dataTable = new ErrorReportsDataSet.ErrorReportItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.IDbCommand[] _commandCollection;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.IDbCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new System.Data.SqlClient.SqlConnection(global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.ImportErrorItem";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@InternetMailID", System.Data.SqlDbType.NVarChar, 250, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceivedTime", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubmitterEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubmitterName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionMessage", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@StackTrace", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@MajorVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinorVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PatchVersion", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepliedTo", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new System.Data.SqlClient.SqlConnection(global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.InsertPotentialErrorReply";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@InternetMailID", System.Data.SqlDbType.NVarChar, 250, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceivedTime", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReplyToID", System.Data.SqlDbType.NVarChar, 250, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new System.Data.SqlClient.SqlConnection(global::ErrorReportExtractor.Properties.Settings.Default.ErrorReportsConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.ReplyToReport";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReportId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReplyText", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientEmail", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientName", System.Data.SqlDbType.NVarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ParentReply", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReplyTime", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object ImportErrorItem(string InternetMailID, System.Nullable<System.DateTime> ReceivedTime, string SubmitterEmail, string SubmitterName, string Body, string Subject, string ExceptionType, string ExceptionMessage, string StackTrace, System.Nullable<int> MajorVersion, System.Nullable<int> MinorVersion, System.Nullable<int> PatchVersion, System.Nullable<int> Revision, System.Nullable<bool> RepliedTo) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((InternetMailID == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(InternetMailID));
            }
            if ((ReceivedTime.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(ReceivedTime.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((SubmitterEmail == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(SubmitterEmail));
            }
            if ((SubmitterName == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(SubmitterName));
            }
            if ((Body == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Body));
            }
            if ((Subject == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Subject));
            }
            if ((ExceptionType == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(ExceptionType));
            }
            if ((ExceptionMessage == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(ExceptionMessage));
            }
            if ((StackTrace == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(StackTrace));
            }
            if ((MajorVersion.HasValue == true)) {
                command.Parameters[10].Value = ((int)(MajorVersion.Value));
            }
            else {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            if ((MinorVersion.HasValue == true)) {
                command.Parameters[11].Value = ((int)(MinorVersion.Value));
            }
            else {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            if ((PatchVersion.HasValue == true)) {
                command.Parameters[12].Value = ((int)(PatchVersion.Value));
            }
            else {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Revision.HasValue == true)) {
                command.Parameters[13].Value = ((int)(Revision.Value));
            }
            else {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            if ((RepliedTo.HasValue == true)) {
                command.Parameters[14].Value = ((bool)(RepliedTo.Value));
            }
            else {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object InsertPotentialErrorReply(string InternetMailID, System.Nullable<System.DateTime> ReceivedTime, string SenderEmail, string SenderName, string RecipientEmail, string RecipientName, string Body, string Subject, string ReplyToID) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((InternetMailID == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(InternetMailID));
            }
            if ((ReceivedTime.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(ReceivedTime.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((SenderEmail == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(SenderEmail));
            }
            if ((SenderName == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(SenderName));
            }
            if ((RecipientEmail == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(RecipientEmail));
            }
            if ((RecipientName == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(RecipientName));
            }
            if ((Body == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Body));
            }
            if ((Subject == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(Subject));
            }
            if ((ReplyToID == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(ReplyToID));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object ReplyToReport(System.Nullable<int> ReportId, string ReplyText, string SenderEmail, string RecipientEmail, string SenderName, string RecipientName, System.Nullable<int> ParentReply, System.Nullable<System.DateTime> ReplyTime) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            if ((ReportId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(ReportId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ReplyText == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(ReplyText));
            }
            if ((SenderEmail == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(SenderEmail));
            }
            if ((RecipientEmail == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(RecipientEmail));
            }
            if ((SenderName == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(SenderName));
            }
            if ((RecipientName == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(RecipientName));
            }
            if ((ParentReply.HasValue == true)) {
                command.Parameters[7].Value = ((int)(ParentReply.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((ReplyTime.HasValue == true)) {
                command.Parameters[8].Value = ((System.DateTime)(ReplyTime.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
}

#pragma warning restore 1591