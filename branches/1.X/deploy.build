<?xml version="1.0" encoding="utf-8" ?> 
<project default="msi" xmlns="http://nant.sourceforge.net/schema/">
    <property name="verbose" value="false"/>
    <property name="debug" value="false"/>
    <property name="deploy.dir" value="deploy"/>
    <property name="checkout.dir" value="Ankh-Release" />
    
    <property name="vs.2003" value="false"/>
    <property name="major.version" value="0" />
    <property name="minor.version" value="5" />
    <property name="patch.version" value="2" />
    <property name="preserve.checkout.dir" value="false"/>
    <property name="zip.file" value="Ankh-${major.version}.${minor.version}.${patch.version}.zip" />
    <property name="msi.file" value="AnkhSetup-${major.version}.${minor.version}.${patch.version}.msi" />
    <property name="url" 
        value="http://10.0.0.3/svn/finalproject/branches/0.5-release/src"/>
        
   
    
    
    <target name="checkout">
        <svncheckout url="${url}" localDir="${checkout.dir}"/>
    </target>
    
    <target name="version">    
        <script language="C#">
        
            <code><![CDATA[
            public static string GetVersionString( Project project )
            {
               Location location = new Location( "GetVersionString" );
               string dirname = project.ExpandProperties( "${checkout.dir}", location );
               
               System.Diagnostics.Process proc = new System.Diagnostics.Process();
               proc.StartInfo.RedirectStandardOutput = true; 
               proc.StartInfo.UseShellExecute = false;
               proc.StartInfo.FileName="svnversion.exe";
               proc.StartInfo.Arguments = dirname;
               proc.StartInfo.CreateNoWindow = true;
               
               proc.Start();
               
               string output = proc.StandardOutput.ReadToEnd();
               proc.WaitForExit();
               
               if ( proc.ExitCode != 0 )
                  throw new ApplicationException( "svnversion returned an error code" );   
                  
               Regex rex = new Regex( @"(?'first'\d+):?(?'second'\d+)?[MS]*" );
               if ( !rex.IsMatch( output ) )
                  throw new ApplicationException( "svnversion output not as expected: '" + output.Trim() + "'" );
               
               string first = rex.Match( output ).Groups["first"].Value;
               string second = rex.Match( output ).Groups["second"].Value;
               
               Console.WriteLine( "First: {0}, Second: {1}\r\nOutput: {2}", first, second, output );
               
               int revision;
               if ( second != "" )
                  revision = int.Parse( second );
               else
                  revision = int.Parse( first );
               
               return project.ExpandProperties( 
                    "${major.version}.${minor.version}.${patch.version}." + revision, location );
            }
            
            public static void ScriptMain( Project project )
            {
               DirectoryScanner scanner = new DirectoryScanner();
               scanner.BaseDirectory = new DirectoryInfo( project.Properties[ "checkout.dir" ] );
               scanner.Includes.Add( @"**\AssemblyInfo.cs" );
               scanner.Includes.Add( @"**\AssemblyInfo.cpp" );
               
               string version = GetVersionString( project );
               
               project.Properties["msi.file"] = String.Format( "AnkhSetup-{0}.msi", version );
               project.Properties["zip.file"] = String.Format( "AnkhSvn-{0}.zip", version );
               
               string versionString = "AssemblyVersionAttribute( \"" + version +"\")";

               foreach( string file in scanner.FileNames )
               {
                  string fileContents = null;
                  Console.WriteLine( file );
                  using(StreamReader r = new StreamReader( file ) )
                     fileContents = r.ReadToEnd();                 
                 
                  
                  string newContents =
                     Regex.Replace( fileContents, @"AssemblyVersion(Attribute)*\(\s*"".*""\s*\)",
                        versionString );
                  
                  using( StreamWriter w = new StreamWriter( file ) )
                    w.Write( newContents );
               }
            }]]></code>   
        </script>
    
    </target>
    
    <target name="source">
        <ifnot test="${preserve.checkout.dir}">
            <echo message="Deleting ${checkout.dir}" />
            <delete dir="${checkout.dir}" failonerror='false'/>
            <call target="checkout" /> 
        </ifnot> 
        
        <call target="version" />
    </target>
    
    <target name="clean">
        <echo message="Deleting ${checkout.dir}"/>
        <delete dir="${checkout.dir}" failonerror='false' />   
    </target>
    
    
    <target name="svndir">
        <ifnot propertyexists="svn.dir">
            <sysinfo/>
            <ifnot propertyexists="sys.env.SVNSRC">
                <fail message="Either provide the svn.dir property, or set the SVNSRC env var to point to the Subversion source tree" />
            </ifnot>
            <property name="svn.dir" value="${sys.env.SVNSRC}" />
        </ifnot>
        
    </target>
    
    <target name="deploydir">
        <mkdir dir="${deploy.dir}"/>
    </target>
    
    <target name="msi" depends="source, deploydir">
        <!--<nant buildfile="${checkout.dir}\master.build" inheritall="true" target="rebuild,msi"/>
        
        <copy todir="${deploy.dir}">
            <fileset basedir="${checkout.dir}\installsource">
                <includes name="*.msi"/>
            </fileset>
        </copy>-->
    
    
            
    
        <property name="config" value="Debug" if="${debug}"/>
        <property name="config" value="Release" unless="${debug}" />
        
        <exec program="devenv.com" 
            commandline="${checkout.dir}\src.sln /build ${config} /project AnkhSetup"
            verbose="${verbose}">
            <environment>
                <option name="SVNSRC" value="${svn.dir}"/>                    
            </environment>
        </exec>
        <copy file="${checkout.dir}\Ankh\AnkhSetup\${config}\AnkhSetup.msi" 
            tofile="${deploy.dir}\${msi.file}" />
        
    </target>
    
    <target name="test" depends="svndir">
        <exec program="cmd.exe" commandline="/c test.bat">
            <environment>
                <option name="SVNSRC" value="${svn.dir}"/>                   
            </environment>
        </exec>
    </target>
    
    <target name="schema">
        <nantschema 
            output="nant-current.xsd" 
            target-ns="http://nant.sourceforge.net/schema/"/> 
    </target>
    
    <target name="zip" depends="source, deploydir">
        <zip zipfile="${deploy.dir}\${zip.file}" verbose="${verbose}">
            <fileset basedir="${checkout.dir}">
                <includes name="**/*"/>
                <excludes name="**/.svn/**" />
                <excludes name="**/bin/**" />
                <excludes name="**/obj/**" />
                <excludes name="**/*.tmp" />
                <excludes name="**/Debug/**" />
                <excludes name="**/Release/**" />
            </fileset>
        </zip>
    </target>
    
</project>
