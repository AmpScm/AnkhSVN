%parser DocCommentLexer.lexer.cs

%{
public class NodeVisitor{
   public virtual void Visit( Symbol sym )
   {}   
   
   public virtual void Visit( Header header )
   {}
   
   public virtual void Visit( FileElementList list )
   {}
   
   public virtual void Visit( ClassFileElement cl )
   {}
   
   public virtual void Visit( NamespaceFileElement ns )
   {}
   
   public virtual void Visit( MemberList list )
   {}
   
   public virtual void Visit( MethodDeclItem item )
   {}
   
}


public class Symbol : SYMBOL{
   public Symbol( Parser yypq ) : base( yypq ){}
   public virtual void Accept( NodeVisitor visitor )
   { visitor.Visit( this ); }
}
%}

%symbol Header : Symbol {
    public FileElementList Elements;
    public Header( FileElementList elements ) { Elements = elements; }
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol Type {
    public string Name;
    public Type( string t ){ Name = t; }
    public override string ToString(){ return Name; }
}

%symbol Class : Symbol {
    public DocComment DocComment;
    public ClassDecl ClassDecl;
    public Class( DocComment docComment, ClassDecl classDecl ) {
       DocComment = docComment;
       ClassDecl = classDecl;
    }
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol FileElement : Symbol {
}

%node NamespaceFileElement : FileElement{
    public Namespace Namespace;
    public NamespaceFileElement( Namespace ns ) { Namespace = ns; }
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%node ClassFileElement : FileElement{
    public Class Class;
    public ClassFileElement( Class cl ) { Class = cl;}
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}





%symbol FileElementList : Symbol {
    public FileElement Head;
    public FileElementList Tail;
    public FileElementList( FileElement head, FileElementList tail ) {
       Head = head;
       Tail = tail;
    }
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol MemberList : Symbol {
   public MemberDeclItem Head;
   public MemberList Tail;
   
   public MemberList( MemberDeclItem h, MemberList t ){ Head=h; Tail=t; }
   public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol ClassDecl : Symbol {
    public VisibilitySpecifier Visibility;
    public string Name;
    public MemberList Members;
    public ClassDecl( VisibilitySpecifier visibility, string name, MemberList m )
        {Visibility = visibility; Name = name; Members = m;  }
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol Namespace : Symbol {
   public string Name;
   public FileElementList Elements;
   
   public Namespace( string name, FileElementList elts ){ Name = name; Elements = elts; }
   public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol MemberDeclItem : Symbol {
    
}

// represents a public:/protected:/private: thingie in a struct/class
%node VisibilityItem : MemberDeclItem{
    public VisibilitySpecifier Visibility;
    public VisibilityItem( VisibilitySpecifier v ) { Visibility = v; }
}

%node MethodDeclItem : MemberDeclItem {   
   public DocComment DocComment; 
   public MethodDecl MethodDecl;
   public MethodDeclItem( DocComment c, MethodDecl m ){ DocComment = c; MethodDecl = m; }
   public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }
}

%symbol MethodDecl : Symbol {
    public Type ReturnType;
    public string Name;
    public MethodDecl( Type returnType, string name )
    {
        ReturnType = returnType;
        Name = name;
    }
    public override void Accept( NodeVisitor visitor ){ visitor.Visit( this ); }    
}


%symbol DocComment : Symbol {
    public string Comment;
    public DocComment( string c ){ Comment = c; }
}

%symbol VisibilitySpecifier : Symbol {
    public string Visibility;
    public VisibilitySpecifier( string visibility ){ Visibility = visibility; }
}

Header : FileElementList  %Header( $1 )
     ;   
FileElementList     : FileElement   %FileElementList( $1, null )
                    | FileElement FileElementList  %FileElementList( $1, $2 )
                    ;

FileElement  :  PLAINCOMMENT 
             |  Namespace   %NamespaceFileElement($1)       
             |  Function    
             |  Class       %ClassFileElement($1)
             ;
             /*|  MethodDefinition
             ;*/

DocComment :    DOCCOMMENT  %DocComment($1.Comment)
           |    DocComment  DOCCOMMENT  %DocComment( $1.Comment + " " + $2.Comment )
           ;



Namespace   :   NAMESPACE IDENTIFIER LBRACE FileElementList RBRACE  %Namespace($2.yytext, $4)
            ; 
                   
Function    :   Type  IDENTIFIER  LPAREN /*ArgumentList*/ RPAREN LBRACE   Code    RBRACE
            ;

Class   :   ClassDecl   %Class( null, $1 )
        |   DocComment ClassDecl %Class( $1, $2 )
        ;

ClassDecl   :   VisibilitySpecifier GC CLASS IDENTIFIER LBRACE MemberList RBRACE SEMICOLON  %ClassDecl( $1, $4.yytext, $6 )
            ;

Code    :   /* empty */
        ;
 
MemberList  :   MemberDeclItem  %MemberList( $1, null )
            |   MemberDeclItem MemberList   %MemberList( $1, $2 )
            ;
            
MemberDeclItem  :   VisibilitySpecifier COLON   %VisibilityItem( $1 )
                |   MethodDecl  %MethodDeclItem( null, $1 )
                |   DocComment MethodDecl   %MethodDeclItem( $1, $2 )
                ;

MethodDecl  :   Type IDENTIFIER LPAREN ArgumentList RPAREN SEMICOLON    %MethodDecl( $1, $2.yytext )
            ;

                
ArgumentList    :   Type IDENTIFIER
                |   /* empty */
                |   Type IDENTIFIER COMMA ArgumentList
                ;

MethodDefinition    :   /* empty */
                    ;

VisibilitySpecifier :   PRIVATE     %VisibilitySpecifier( "private")
                    |   PROTECTED   %VisibilitySpecifier( "protected")
                    |   PUBLIC      %VisibilitySpecifier( "public" )
                    ;
           

Type    :   IDENTIFIER  %Type( $1.yytext )
        |   VOID    %Type( $1.yytext )
        |   INT     %Type( $1.yytext )
        |   DOUBLE  %Type( $1.yytext )
        |   LONG    %Type( $1.yytext )
        |   FLOAT   %Type( $1.yytext )
        |   Type ASTERISK   %Type( $1.Name + "*" )//pointers
        |   Type AMPERSAND  %Type( $1.Name + "&" )//references
        ;
        
