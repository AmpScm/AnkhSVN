%lexer // parses C++ files for XML documentation comments

%token PLAINCOMMENT{
   public string Comment;
}

%token DOCCOMMENT{
    public string Comment;
}



"{"   %LBRACE
"}"   %RBRACE
"/""/""/"[^\n]+\n   %DOCCOMMENT{ Comment = yytext.Substring(3).Trim(); }

/*<DOCCOMMENT>'<'[^\/>\n]+'>'    %STARTTAG

<DOCCOMMENT>'</'[^>\n]+'>'    %ENDTAG
<DOCCOMMENT>[^\n<]*  %DOCCOMMENTTEXT
<DOCCOMMENT>\r\n     { yybegin("YYINITIAL"); }*/
 
'/''/'[^/][^\n]+\n  %PLAINCOMMENT   { Comment = yytext.Substring( 2 ).Trim();  }

'"'[^"\n]*'"' %LITERAL

:   %COLON
;   %SEMICOLON
,   %COMMA
*   %ASTERISK
&   %AMPERSAND
"/""*"  %STARTCCOMMENT
"*""/"  %ENDCCOMMENT
"::"  %SCOPEOPERATOR
"("   %LPAREN
")"   %RPAREN
public  %PUBLIC
auto	%AUTO
break   %BREAK
case    %CASE
char    %CHAR
const   %CONST
continue    %CONTINUE
default     %DEFAULT
do  %DO
double  %DOUBLE
else    %ELSE
enum    %ENUM
extern  %EXTERN
float   %FLOAT
for     %FOR
goto    %GOTO
if      %IF
int     %INT
long    %LONG
register    %REGISTER
return  %RETURN
short   %SHORT
signed  %SIGNED
sizeof  %SIZEOF
static  %STATIC
struct  %STRUCT
switch  %SWITCH
typedef %TYPEDEF
union   %UNION
unsigned    %UNSIGNED
void    %VOID
volatile    %VOLATILE
while   %WHILE
bool    %BOOL
catch   %CATCH
class   %CLASS
delete  %DELETE
friend  %FRIEND
inline  %INLINE
new     %NEW
namespace   %NAMESPACE
operator    %OPERATOR
private     %PRIVATE
protected   %PROTECTED
public  %PUBLIC
template    %TEMPLATE
this    %THIS
throw  %THROW
try     %TRY
true    %TRUE
false   %FALSE
using   %USING
dynamic_cast    %DYNAMIC_CAST
static_cast     %STATIC_CAST
reinterpret_cast    %REINTERPRET_CAST
const_cast  %CONST_CAST

__gc    %GC



[\ \n\r\t]  ;
[a-zA-Z_][-a-zA-Z0-9_]+   %IDENTIFIER

    
